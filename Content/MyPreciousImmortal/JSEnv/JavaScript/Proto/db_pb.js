// source: db.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Proto.Card', null, global);
goog.exportSymbol('proto.Proto.Card.CardCareerType', null, global);
goog.exportSymbol('proto.Proto.Card.CardCultivateState', null, global);
goog.exportSymbol('proto.Proto.CardTeam', null, global);
goog.exportSymbol('proto.Proto.DBAccount', null, global);
goog.exportSymbol('proto.Proto.DBWorldData', null, global);
goog.exportSymbol('proto.Proto.DropRecord', null, global);
goog.exportSymbol('proto.Proto.Equipment', null, global);
goog.exportSymbol('proto.Proto.Gender', null, global);
goog.exportSymbol('proto.Proto.Item', null, global);
goog.exportSymbol('proto.Proto.ItemBase', null, global);
goog.exportSymbol('proto.Proto.LastWorld', null, global);
goog.exportSymbol('proto.Proto.NPC', null, global);
goog.exportSymbol('proto.Proto.OBJ', null, global);
goog.exportSymbol('proto.Proto.Player', null, global);
goog.exportSymbol('proto.Proto.PlayerBase', null, global);
goog.exportSymbol('proto.Proto.PlayerCard', null, global);
goog.exportSymbol('proto.Proto.PlayerCharacter', null, global);
goog.exportSymbol('proto.Proto.PlayerItem', null, global);
goog.exportSymbol('proto.Proto.PlayerMisc', null, global);
goog.exportSymbol('proto.Proto.Position', null, global);
goog.exportSymbol('proto.Proto.Skill', null, global);
goog.exportSymbol('proto.Proto.Team', null, global);
goog.exportSymbol('proto.Proto.Team.TeamType', null, global);
goog.exportSymbol('proto.Proto.Vector3', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Vector3.displayName = 'proto.Proto.Vector3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.ItemBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.ItemBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.ItemBase.displayName = 'proto.Proto.ItemBase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Item.displayName = 'proto.Proto.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Skill.displayName = 'proto.Proto.Skill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.PlayerItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.PlayerItem.repeatedFields_, null);
};
goog.inherits(proto.Proto.PlayerItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.PlayerItem.displayName = 'proto.Proto.PlayerItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Equipment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Equipment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Equipment.displayName = 'proto.Proto.Equipment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.Card.repeatedFields_, null);
};
goog.inherits(proto.Proto.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Card.displayName = 'proto.Proto.Card';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.CardTeam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.CardTeam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.CardTeam.displayName = 'proto.Proto.CardTeam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Team = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.Team.repeatedFields_, null);
};
goog.inherits(proto.Proto.Team, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Team.displayName = 'proto.Proto.Team';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.PlayerCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.PlayerCard.repeatedFields_, null);
};
goog.inherits(proto.Proto.PlayerCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.PlayerCard.displayName = 'proto.Proto.PlayerCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.PlayerCharacter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.PlayerCharacter.repeatedFields_, null);
};
goog.inherits(proto.Proto.PlayerCharacter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.PlayerCharacter.displayName = 'proto.Proto.PlayerCharacter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.PlayerBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.PlayerBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.PlayerBase.displayName = 'proto.Proto.PlayerBase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.LastWorld = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.LastWorld, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.LastWorld.displayName = 'proto.Proto.LastWorld';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.PlayerMisc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.PlayerMisc.repeatedFields_, null);
};
goog.inherits(proto.Proto.PlayerMisc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.PlayerMisc.displayName = 'proto.Proto.PlayerMisc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.DropRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.DropRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.DropRecord.displayName = 'proto.Proto.DropRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.DBAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.DBAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.DBAccount.displayName = 'proto.Proto.DBAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Player.displayName = 'proto.Proto.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.Position.displayName = 'proto.Proto.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.NPC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.NPC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.NPC.displayName = 'proto.Proto.NPC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.OBJ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proto.OBJ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.OBJ.displayName = 'proto.Proto.OBJ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proto.DBWorldData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Proto.DBWorldData.repeatedFields_, null);
};
goog.inherits(proto.Proto.DBWorldData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proto.DBWorldData.displayName = 'proto.Proto.DBWorldData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Vector3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Vector3}
 */
proto.Proto.Vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Vector3;
  return proto.Proto.Vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Vector3}
 */
proto.Proto.Vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Vector3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Vector3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Vector3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Proto.Vector3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Vector3} returns this
 */
proto.Proto.Vector3.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Proto.Vector3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Vector3} returns this
 */
proto.Proto.Vector3.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.Proto.Vector3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Vector3} returns this
 */
proto.Proto.Vector3.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.ItemBase.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.ItemBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.ItemBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.ItemBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    num: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.ItemBase}
 */
proto.Proto.ItemBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.ItemBase;
  return proto.Proto.ItemBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.ItemBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.ItemBase}
 */
proto.Proto.ItemBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.ItemBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.ItemBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.ItemBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.ItemBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Proto.ItemBase.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.ItemBase} returns this
 */
proto.Proto.ItemBase.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 num = 2;
 * @return {number}
 */
proto.Proto.ItemBase.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.ItemBase} returns this
 */
proto.Proto.ItemBase.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    itemBase: (f = msg.getItemBase()) && proto.Proto.ItemBase.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Item}
 */
proto.Proto.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Item;
  return proto.Proto.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Item}
 */
proto.Proto.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSn(value);
      break;
    case 2:
      var value = new proto.Proto.ItemBase;
      reader.readMessage(value,proto.Proto.ItemBase.deserializeBinaryFromReader);
      msg.setItemBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getItemBase();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Proto.ItemBase.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sn = 1;
 * @return {number}
 */
proto.Proto.Item.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Item} returns this
 */
proto.Proto.Item.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ItemBase item_base = 2;
 * @return {?proto.Proto.ItemBase}
 */
proto.Proto.Item.prototype.getItemBase = function() {
  return /** @type{?proto.Proto.ItemBase} */ (
    jspb.Message.getWrapperField(this, proto.Proto.ItemBase, 2));
};


/**
 * @param {?proto.Proto.ItemBase|undefined} value
 * @return {!proto.Proto.Item} returns this
*/
proto.Proto.Item.prototype.setItemBase = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Item} returns this
 */
proto.Proto.Item.prototype.clearItemBase = function() {
  return this.setItemBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Item.prototype.hasItemBase = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Skill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    skillLevel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Skill}
 */
proto.Proto.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Skill;
  return proto.Proto.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Skill}
 */
proto.Proto.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkillId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkillLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Skill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Skill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Skill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSkillLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 skill_id = 1;
 * @return {number}
 */
proto.Proto.Skill.prototype.getSkillId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Skill} returns this
 */
proto.Proto.Skill.prototype.setSkillId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 skill_level = 2;
 * @return {number}
 */
proto.Proto.Skill.prototype.getSkillLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Skill} returns this
 */
proto.Proto.Skill.prototype.setSkillLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.PlayerItem.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.PlayerItem.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.PlayerItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.PlayerItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.Proto.Item.toObject, includeInstance),
    bagsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.PlayerItem}
 */
proto.Proto.PlayerItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.PlayerItem;
  return proto.Proto.PlayerItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.PlayerItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.PlayerItem}
 */
proto.Proto.PlayerItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Item;
      reader.readMessage(value,proto.Proto.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setBagsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.PlayerItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.PlayerItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.PlayerItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Proto.Item.serializeBinaryToWriter
    );
  }
  f = message.getBagsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
};


/**
 * repeated Item items = 1;
 * @return {!Array<!proto.Proto.Item>}
 */
proto.Proto.PlayerItem.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.Proto.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Item, 1));
};


/**
 * @param {!Array<!proto.Proto.Item>} value
 * @return {!proto.Proto.PlayerItem} returns this
*/
proto.Proto.PlayerItem.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Proto.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Item}
 */
proto.Proto.PlayerItem.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Proto.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerItem} returns this
 */
proto.Proto.PlayerItem.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * repeated uint64 bags = 2;
 * @return {!Array<number>}
 */
proto.Proto.PlayerItem.prototype.getBagsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Proto.PlayerItem} returns this
 */
proto.Proto.PlayerItem.prototype.setBagsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Proto.PlayerItem} returns this
 */
proto.Proto.PlayerItem.prototype.addBags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerItem} returns this
 */
proto.Proto.PlayerItem.prototype.clearBagsList = function() {
  return this.setBagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Equipment.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Equipment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Equipment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Equipment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Equipment}
 */
proto.Proto.Equipment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Equipment;
  return proto.Proto.Equipment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Equipment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Equipment}
 */
proto.Proto.Equipment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Equipment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Equipment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Equipment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Equipment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Proto.Equipment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Equipment} returns this
 */
proto.Proto.Equipment.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.Proto.Equipment.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Equipment} returns this
 */
proto.Proto.Equipment.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.Card.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    character: jspb.Message.getFieldWithDefault(msg, 3, 0),
    star: jspb.Message.getFieldWithDefault(msg, 4, 0),
    getedTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    aptitude: jspb.Message.getFieldWithDefault(msg, 7, 0),
    career: jspb.Message.getFieldWithDefault(msg, 8, 0),
    att: jspb.Message.getFieldWithDefault(msg, 9, 0),
    attspeed: jspb.Message.getFieldWithDefault(msg, 10, 0),
    def: jspb.Message.getFieldWithDefault(msg, 11, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 12, 0),
    intensifyTimes: jspb.Message.getFieldWithDefault(msg, 13, 0),
    curexp: jspb.Message.getFieldWithDefault(msg, 14, 0),
    skillsList: jspb.Message.toObjectList(msg.getSkillsList(),
    proto.Proto.Skill.toObject, includeInstance),
    cardcltstate: jspb.Message.getFieldWithDefault(msg, 16, 0),
    fightpower: jspb.Message.getFieldWithDefault(msg, 17, 0),
    intensifyLv: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Card}
 */
proto.Proto.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Card;
  return proto.Proto.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Card}
 */
proto.Proto.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharacter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStar(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGetedTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAptitude(value);
      break;
    case 8:
      var value = /** @type {!proto.Proto.Card.CardCareerType} */ (reader.readEnum());
      msg.setCareer(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAtt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttspeed(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDef(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntensifyTimes(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurexp(value);
      break;
    case 15:
      var value = new proto.Proto.Skill;
      reader.readMessage(value,proto.Proto.Skill.deserializeBinaryFromReader);
      msg.addSkills(value);
      break;
    case 16:
      var value = /** @type {!proto.Proto.Card.CardCultivateState} */ (reader.readEnum());
      msg.setCardcltstate(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFightpower(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntensifyLv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCharacter();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStar();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getGetedTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAptitude();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCareer();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAtt();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getAttspeed();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDef();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getIntensifyTimes();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getCurexp();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.Proto.Skill.serializeBinaryToWriter
    );
  }
  f = message.getCardcltstate();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getFightpower();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getIntensifyLv();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Proto.Card.CardCareerType = {
  NONE: 0,
  GHOST: 1,
  KING: 2,
  GOD: 3,
  SHOULD: 4,
  MASTER: 5
};

/**
 * @enum {number}
 */
proto.Proto.Card.CardCultivateState = {
  CLEVEL: 0,
  CSTAR: 1,
  CQLT: 2
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Proto.Card.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.Proto.Card.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 character = 3;
 * @return {number}
 */
proto.Proto.Card.prototype.getCharacter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setCharacter = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 star = 4;
 * @return {number}
 */
proto.Proto.Card.prototype.getStar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setStar = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 geted_time = 6;
 * @return {number}
 */
proto.Proto.Card.prototype.getGetedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setGetedTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 aptitude = 7;
 * @return {number}
 */
proto.Proto.Card.prototype.getAptitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setAptitude = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional CardCareerType career = 8;
 * @return {!proto.Proto.Card.CardCareerType}
 */
proto.Proto.Card.prototype.getCareer = function() {
  return /** @type {!proto.Proto.Card.CardCareerType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.Proto.Card.CardCareerType} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setCareer = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int32 att = 9;
 * @return {number}
 */
proto.Proto.Card.prototype.getAtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setAtt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 attspeed = 10;
 * @return {number}
 */
proto.Proto.Card.prototype.getAttspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setAttspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 def = 11;
 * @return {number}
 */
proto.Proto.Card.prototype.getDef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setDef = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 hp = 12;
 * @return {number}
 */
proto.Proto.Card.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 intensify_times = 13;
 * @return {number}
 */
proto.Proto.Card.prototype.getIntensifyTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setIntensifyTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 curExp = 14;
 * @return {number}
 */
proto.Proto.Card.prototype.getCurexp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setCurexp = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated Skill skills = 15;
 * @return {!Array<!proto.Proto.Skill>}
 */
proto.Proto.Card.prototype.getSkillsList = function() {
  return /** @type{!Array<!proto.Proto.Skill>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Skill, 15));
};


/**
 * @param {!Array<!proto.Proto.Skill>} value
 * @return {!proto.Proto.Card} returns this
*/
proto.Proto.Card.prototype.setSkillsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.Proto.Skill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Skill}
 */
proto.Proto.Card.prototype.addSkills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.Proto.Skill, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};


/**
 * optional CardCultivateState cardCltState = 16;
 * @return {!proto.Proto.Card.CardCultivateState}
 */
proto.Proto.Card.prototype.getCardcltstate = function() {
  return /** @type {!proto.Proto.Card.CardCultivateState} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.Proto.Card.CardCultivateState} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setCardcltstate = function(value) {
  return jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional int32 fightPower = 17;
 * @return {number}
 */
proto.Proto.Card.prototype.getFightpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setFightpower = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 intensify_lv = 18;
 * @return {number}
 */
proto.Proto.Card.prototype.getIntensifyLv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Card} returns this
 */
proto.Proto.Card.prototype.setIntensifyLv = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.CardTeam.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.CardTeam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.CardTeam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.CardTeam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.CardTeam}
 */
proto.Proto.CardTeam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.CardTeam;
  return proto.Proto.CardTeam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.CardTeam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.CardTeam}
 */
proto.Proto.CardTeam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.CardTeam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.CardTeam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.CardTeam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.CardTeam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPos();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCardId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 pos = 1;
 * @return {number}
 */
proto.Proto.CardTeam.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.CardTeam} returns this
 */
proto.Proto.CardTeam.prototype.setPos = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 card_id = 2;
 * @return {number}
 */
proto.Proto.CardTeam.prototype.getCardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.CardTeam} returns this
 */
proto.Proto.CardTeam.prototype.setCardId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.Team.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Team.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Team.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Team} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Team.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.Proto.CardTeam.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Team}
 */
proto.Proto.Team.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Team;
  return proto.Proto.Team.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Team} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Team}
 */
proto.Proto.Team.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Proto.Team.TeamType} */ (reader.readEnum());
      msg.setTeamType(value);
      break;
    case 3:
      var value = new proto.Proto.CardTeam;
      reader.readMessage(value,proto.Proto.CardTeam.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Team.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Team.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Team} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Team.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Proto.CardTeam.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Proto.Team.TeamType = {
  NORMAL: 0
};

/**
 * optional TeamType team_type = 1;
 * @return {!proto.Proto.Team.TeamType}
 */
proto.Proto.Team.prototype.getTeamType = function() {
  return /** @type {!proto.Proto.Team.TeamType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Proto.Team.TeamType} value
 * @return {!proto.Proto.Team} returns this
 */
proto.Proto.Team.prototype.setTeamType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated CardTeam cards = 3;
 * @return {!Array<!proto.Proto.CardTeam>}
 */
proto.Proto.Team.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.Proto.CardTeam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.CardTeam, 3));
};


/**
 * @param {!Array<!proto.Proto.CardTeam>} value
 * @return {!proto.Proto.Team} returns this
*/
proto.Proto.Team.prototype.setCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Proto.CardTeam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.CardTeam}
 */
proto.Proto.Team.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Proto.CardTeam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.Team} returns this
 */
proto.Proto.Team.prototype.clearCardsList = function() {
  return this.setCardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.PlayerCard.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.PlayerCard.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.PlayerCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.PlayerCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.Proto.Card.toObject, includeInstance),
    teamsList: jspb.Message.toObjectList(msg.getTeamsList(),
    proto.Proto.Team.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.PlayerCard}
 */
proto.Proto.PlayerCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.PlayerCard;
  return proto.Proto.PlayerCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.PlayerCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.PlayerCard}
 */
proto.Proto.PlayerCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Card;
      reader.readMessage(value,proto.Proto.Card.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 2:
      var value = new proto.Proto.Team;
      reader.readMessage(value,proto.Proto.Team.deserializeBinaryFromReader);
      msg.addTeams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.PlayerCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.PlayerCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.PlayerCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Proto.Card.serializeBinaryToWriter
    );
  }
  f = message.getTeamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Proto.Team.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card cards = 1;
 * @return {!Array<!proto.Proto.Card>}
 */
proto.Proto.PlayerCard.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.Proto.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Card, 1));
};


/**
 * @param {!Array<!proto.Proto.Card>} value
 * @return {!proto.Proto.PlayerCard} returns this
*/
proto.Proto.PlayerCard.prototype.setCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Proto.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Card}
 */
proto.Proto.PlayerCard.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Proto.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerCard} returns this
 */
proto.Proto.PlayerCard.prototype.clearCardsList = function() {
  return this.setCardsList([]);
};


/**
 * repeated Team teams = 2;
 * @return {!Array<!proto.Proto.Team>}
 */
proto.Proto.PlayerCard.prototype.getTeamsList = function() {
  return /** @type{!Array<!proto.Proto.Team>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Team, 2));
};


/**
 * @param {!Array<!proto.Proto.Team>} value
 * @return {!proto.Proto.PlayerCard} returns this
*/
proto.Proto.PlayerCard.prototype.setTeamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Proto.Team=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Team}
 */
proto.Proto.PlayerCard.prototype.addTeams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Proto.Team, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerCard} returns this
 */
proto.Proto.PlayerCard.prototype.clearTeamsList = function() {
  return this.setTeamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.PlayerCharacter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.PlayerCharacter.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.PlayerCharacter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.PlayerCharacter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerCharacter.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillsList: jspb.Message.toObjectList(msg.getSkillsList(),
    proto.Proto.Skill.toObject, includeInstance),
    equipmentsList: jspb.Message.toObjectList(msg.getEquipmentsList(),
    proto.Proto.Equipment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.PlayerCharacter}
 */
proto.Proto.PlayerCharacter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.PlayerCharacter;
  return proto.Proto.PlayerCharacter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.PlayerCharacter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.PlayerCharacter}
 */
proto.Proto.PlayerCharacter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Skill;
      reader.readMessage(value,proto.Proto.Skill.deserializeBinaryFromReader);
      msg.addSkills(value);
      break;
    case 2:
      var value = new proto.Proto.Equipment;
      reader.readMessage(value,proto.Proto.Equipment.deserializeBinaryFromReader);
      msg.addEquipments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.PlayerCharacter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.PlayerCharacter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.PlayerCharacter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerCharacter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Proto.Skill.serializeBinaryToWriter
    );
  }
  f = message.getEquipmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Proto.Equipment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Skill skills = 1;
 * @return {!Array<!proto.Proto.Skill>}
 */
proto.Proto.PlayerCharacter.prototype.getSkillsList = function() {
  return /** @type{!Array<!proto.Proto.Skill>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Skill, 1));
};


/**
 * @param {!Array<!proto.Proto.Skill>} value
 * @return {!proto.Proto.PlayerCharacter} returns this
*/
proto.Proto.PlayerCharacter.prototype.setSkillsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Proto.Skill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Skill}
 */
proto.Proto.PlayerCharacter.prototype.addSkills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Proto.Skill, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerCharacter} returns this
 */
proto.Proto.PlayerCharacter.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};


/**
 * repeated Equipment equipments = 2;
 * @return {!Array<!proto.Proto.Equipment>}
 */
proto.Proto.PlayerCharacter.prototype.getEquipmentsList = function() {
  return /** @type{!Array<!proto.Proto.Equipment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.Equipment, 2));
};


/**
 * @param {!Array<!proto.Proto.Equipment>} value
 * @return {!proto.Proto.PlayerCharacter} returns this
*/
proto.Proto.PlayerCharacter.prototype.setEquipmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Proto.Equipment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.Equipment}
 */
proto.Proto.PlayerCharacter.prototype.addEquipments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Proto.Equipment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerCharacter} returns this
 */
proto.Proto.PlayerCharacter.prototype.clearEquipmentsList = function() {
  return this.setEquipmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.PlayerBase.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.PlayerBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.PlayerBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    exp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    vipLevel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    vipExp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    templateId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    guildSn: jspb.Message.getFieldWithDefault(msg, 7, 0),
    teamSn: jspb.Message.getFieldWithDefault(msg, 8, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 9, 0),
    diamond: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mute: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.PlayerBase}
 */
proto.Proto.PlayerBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.PlayerBase;
  return proto.Proto.PlayerBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.PlayerBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.PlayerBase}
 */
proto.Proto.PlayerBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVipLevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVipExp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGuildSn(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTeamSn(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGold(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiamond(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.PlayerBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.PlayerBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.PlayerBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVipLevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVipExp();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTemplateId();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getGuildSn();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTeamSn();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDiamond();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMute();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 exp = 3;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setExp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 vip_level = 4;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getVipLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setVipLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 vip_exp = 5;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getVipExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setVipExp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 template_id = 6;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getTemplateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setTemplateId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 guild_sn = 7;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getGuildSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setGuildSn = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 team_sn = 8;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getTeamSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setTeamSn = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 gold = 9;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setGold = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 diamond = 10;
 * @return {number}
 */
proto.Proto.PlayerBase.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setDiamond = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool mute = 11;
 * @return {boolean}
 */
proto.Proto.PlayerBase.prototype.getMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Proto.PlayerBase} returns this
 */
proto.Proto.PlayerBase.prototype.setMute = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.LastWorld.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.LastWorld.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.LastWorld} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.LastWorld.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    worldSn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: (f = msg.getPosition()) && proto.Proto.Vector3.toObject(includeInstance, f),
    rotator: (f = msg.getRotator()) && proto.Proto.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.LastWorld}
 */
proto.Proto.LastWorld.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.LastWorld;
  return proto.Proto.LastWorld.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.LastWorld} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.LastWorld}
 */
proto.Proto.LastWorld.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorldSn(value);
      break;
    case 3:
      var value = new proto.Proto.Vector3;
      reader.readMessage(value,proto.Proto.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = new proto.Proto.Vector3;
      reader.readMessage(value,proto.Proto.Vector3.deserializeBinaryFromReader);
      msg.setRotator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.LastWorld.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.LastWorld.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.LastWorld} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.LastWorld.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorldId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWorldSn();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getRotator();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Proto.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 world_id = 1;
 * @return {number}
 */
proto.Proto.LastWorld.prototype.getWorldId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.LastWorld} returns this
 */
proto.Proto.LastWorld.prototype.setWorldId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 world_sn = 2;
 * @return {number}
 */
proto.Proto.LastWorld.prototype.getWorldSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.LastWorld} returns this
 */
proto.Proto.LastWorld.prototype.setWorldSn = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Vector3 position = 3;
 * @return {?proto.Proto.Vector3}
 */
proto.Proto.LastWorld.prototype.getPosition = function() {
  return /** @type{?proto.Proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Vector3, 3));
};


/**
 * @param {?proto.Proto.Vector3|undefined} value
 * @return {!proto.Proto.LastWorld} returns this
*/
proto.Proto.LastWorld.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.LastWorld} returns this
 */
proto.Proto.LastWorld.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.LastWorld.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Vector3 rotator = 4;
 * @return {?proto.Proto.Vector3}
 */
proto.Proto.LastWorld.prototype.getRotator = function() {
  return /** @type{?proto.Proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Vector3, 4));
};


/**
 * @param {?proto.Proto.Vector3|undefined} value
 * @return {!proto.Proto.LastWorld} returns this
*/
proto.Proto.LastWorld.prototype.setRotator = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.LastWorld} returns this
 */
proto.Proto.LastWorld.prototype.clearRotator = function() {
  return this.setRotator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.LastWorld.prototype.hasRotator = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.PlayerMisc.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.PlayerMisc.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.PlayerMisc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.PlayerMisc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerMisc.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastWorld: (f = msg.getLastWorld()) && proto.Proto.LastWorld.toObject(includeInstance, f),
    onlineVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dropRecordsList: jspb.Message.toObjectList(msg.getDropRecordsList(),
    proto.Proto.DropRecord.toObject, includeInstance),
    gachaRecordsList: jspb.Message.toObjectList(msg.getGachaRecordsList(),
    proto.Proto.DropRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.PlayerMisc}
 */
proto.Proto.PlayerMisc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.PlayerMisc;
  return proto.Proto.PlayerMisc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.PlayerMisc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.PlayerMisc}
 */
proto.Proto.PlayerMisc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.LastWorld;
      reader.readMessage(value,proto.Proto.LastWorld.deserializeBinaryFromReader);
      msg.setLastWorld(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnlineVersion(value);
      break;
    case 4:
      var value = new proto.Proto.DropRecord;
      reader.readMessage(value,proto.Proto.DropRecord.deserializeBinaryFromReader);
      msg.addDropRecords(value);
      break;
    case 5:
      var value = new proto.Proto.DropRecord;
      reader.readMessage(value,proto.Proto.DropRecord.deserializeBinaryFromReader);
      msg.addGachaRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.PlayerMisc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.PlayerMisc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.PlayerMisc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.PlayerMisc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastWorld();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.LastWorld.serializeBinaryToWriter
    );
  }
  f = message.getOnlineVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDropRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Proto.DropRecord.serializeBinaryToWriter
    );
  }
  f = message.getGachaRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Proto.DropRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional LastWorld last_world = 1;
 * @return {?proto.Proto.LastWorld}
 */
proto.Proto.PlayerMisc.prototype.getLastWorld = function() {
  return /** @type{?proto.Proto.LastWorld} */ (
    jspb.Message.getWrapperField(this, proto.Proto.LastWorld, 1));
};


/**
 * @param {?proto.Proto.LastWorld|undefined} value
 * @return {!proto.Proto.PlayerMisc} returns this
*/
proto.Proto.PlayerMisc.prototype.setLastWorld = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.PlayerMisc} returns this
 */
proto.Proto.PlayerMisc.prototype.clearLastWorld = function() {
  return this.setLastWorld(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.PlayerMisc.prototype.hasLastWorld = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 online_version = 3;
 * @return {number}
 */
proto.Proto.PlayerMisc.prototype.getOnlineVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.PlayerMisc} returns this
 */
proto.Proto.PlayerMisc.prototype.setOnlineVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated DropRecord drop_records = 4;
 * @return {!Array<!proto.Proto.DropRecord>}
 */
proto.Proto.PlayerMisc.prototype.getDropRecordsList = function() {
  return /** @type{!Array<!proto.Proto.DropRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.DropRecord, 4));
};


/**
 * @param {!Array<!proto.Proto.DropRecord>} value
 * @return {!proto.Proto.PlayerMisc} returns this
*/
proto.Proto.PlayerMisc.prototype.setDropRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Proto.DropRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.DropRecord}
 */
proto.Proto.PlayerMisc.prototype.addDropRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Proto.DropRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerMisc} returns this
 */
proto.Proto.PlayerMisc.prototype.clearDropRecordsList = function() {
  return this.setDropRecordsList([]);
};


/**
 * repeated DropRecord gacha_records = 5;
 * @return {!Array<!proto.Proto.DropRecord>}
 */
proto.Proto.PlayerMisc.prototype.getGachaRecordsList = function() {
  return /** @type{!Array<!proto.Proto.DropRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.DropRecord, 5));
};


/**
 * @param {!Array<!proto.Proto.DropRecord>} value
 * @return {!proto.Proto.PlayerMisc} returns this
*/
proto.Proto.PlayerMisc.prototype.setGachaRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Proto.DropRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.DropRecord}
 */
proto.Proto.PlayerMisc.prototype.addGachaRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Proto.DropRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.PlayerMisc} returns this
 */
proto.Proto.PlayerMisc.prototype.clearGachaRecordsList = function() {
  return this.setGachaRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.DropRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.DropRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.DropRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.DropRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.DropRecord}
 */
proto.Proto.DropRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.DropRecord;
  return proto.Proto.DropRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.DropRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.DropRecord}
 */
proto.Proto.DropRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.DropRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.DropRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.DropRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.DropRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Proto.DropRecord.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.DropRecord} returns this
 */
proto.Proto.DropRecord.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.Proto.DropRecord.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.DropRecord} returns this
 */
proto.Proto.DropRecord.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.DBAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.DBAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.DBAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.DBAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    account: jspb.Message.getFieldWithDefault(msg, 5, ""),
    name: msg.getName_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.DBAccount}
 */
proto.Proto.DBAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.DBAccount;
  return proto.Proto.DBAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.DBAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.DBAccount}
 */
proto.Proto.DBAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.DBAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.DBAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.DBAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.DBAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional int64 sn = 1;
 * @return {number}
 */
proto.Proto.DBAccount.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.DBAccount} returns this
 */
proto.Proto.DBAccount.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 serverid = 2;
 * @return {number}
 */
proto.Proto.DBAccount.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.DBAccount} returns this
 */
proto.Proto.DBAccount.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string channel = 3;
 * @return {string}
 */
proto.Proto.DBAccount.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Proto.DBAccount} returns this
 */
proto.Proto.DBAccount.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string uuid = 4;
 * @return {string}
 */
proto.Proto.DBAccount.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Proto.DBAccount} returns this
 */
proto.Proto.DBAccount.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string account = 5;
 * @return {string}
 */
proto.Proto.DBAccount.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Proto.DBAccount} returns this
 */
proto.Proto.DBAccount.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes name = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Proto.DBAccount.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes name = 6;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.Proto.DBAccount.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.Proto.DBAccount.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Proto.DBAccount} returns this
 */
proto.Proto.DBAccount.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    account: jspb.Message.getFieldWithDefault(msg, 5, ""),
    name: msg.getName_asB64(),
    base: (f = msg.getBase()) && proto.Proto.PlayerBase.toObject(includeInstance, f),
    misc: (f = msg.getMisc()) && proto.Proto.PlayerMisc.toObject(includeInstance, f),
    item: (f = msg.getItem()) && proto.Proto.PlayerItem.toObject(includeInstance, f),
    card: (f = msg.getCard()) && proto.Proto.PlayerCard.toObject(includeInstance, f),
    character: (f = msg.getCharacter()) && proto.Proto.PlayerCharacter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Player}
 */
proto.Proto.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Player;
  return proto.Proto.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Player}
 */
proto.Proto.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 7:
      var value = new proto.Proto.PlayerBase;
      reader.readMessage(value,proto.Proto.PlayerBase.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 8:
      var value = new proto.Proto.PlayerMisc;
      reader.readMessage(value,proto.Proto.PlayerMisc.deserializeBinaryFromReader);
      msg.setMisc(value);
      break;
    case 9:
      var value = new proto.Proto.PlayerItem;
      reader.readMessage(value,proto.Proto.PlayerItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 10:
      var value = new proto.Proto.PlayerCard;
      reader.readMessage(value,proto.Proto.PlayerCard.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 11:
      var value = new proto.Proto.PlayerCharacter;
      reader.readMessage(value,proto.Proto.PlayerCharacter.deserializeBinaryFromReader);
      msg.setCharacter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Proto.PlayerBase.serializeBinaryToWriter
    );
  }
  f = message.getMisc();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Proto.PlayerMisc.serializeBinaryToWriter
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Proto.PlayerItem.serializeBinaryToWriter
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Proto.PlayerCard.serializeBinaryToWriter
    );
  }
  f = message.getCharacter();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Proto.PlayerCharacter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 sn = 1;
 * @return {number}
 */
proto.Proto.Player.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 serverid = 2;
 * @return {number}
 */
proto.Proto.Player.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string channel = 3;
 * @return {string}
 */
proto.Proto.Player.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string uuid = 4;
 * @return {string}
 */
proto.Proto.Player.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string account = 5;
 * @return {string}
 */
proto.Proto.Player.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes name = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Proto.Player.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes name = 6;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.Proto.Player.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.Proto.Player.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional PlayerBase base = 7;
 * @return {?proto.Proto.PlayerBase}
 */
proto.Proto.Player.prototype.getBase = function() {
  return /** @type{?proto.Proto.PlayerBase} */ (
    jspb.Message.getWrapperField(this, proto.Proto.PlayerBase, 7));
};


/**
 * @param {?proto.Proto.PlayerBase|undefined} value
 * @return {!proto.Proto.Player} returns this
*/
proto.Proto.Player.prototype.setBase = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.clearBase = function() {
  return this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Player.prototype.hasBase = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PlayerMisc misc = 8;
 * @return {?proto.Proto.PlayerMisc}
 */
proto.Proto.Player.prototype.getMisc = function() {
  return /** @type{?proto.Proto.PlayerMisc} */ (
    jspb.Message.getWrapperField(this, proto.Proto.PlayerMisc, 8));
};


/**
 * @param {?proto.Proto.PlayerMisc|undefined} value
 * @return {!proto.Proto.Player} returns this
*/
proto.Proto.Player.prototype.setMisc = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.clearMisc = function() {
  return this.setMisc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Player.prototype.hasMisc = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PlayerItem item = 9;
 * @return {?proto.Proto.PlayerItem}
 */
proto.Proto.Player.prototype.getItem = function() {
  return /** @type{?proto.Proto.PlayerItem} */ (
    jspb.Message.getWrapperField(this, proto.Proto.PlayerItem, 9));
};


/**
 * @param {?proto.Proto.PlayerItem|undefined} value
 * @return {!proto.Proto.Player} returns this
*/
proto.Proto.Player.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Player.prototype.hasItem = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PlayerCard card = 10;
 * @return {?proto.Proto.PlayerCard}
 */
proto.Proto.Player.prototype.getCard = function() {
  return /** @type{?proto.Proto.PlayerCard} */ (
    jspb.Message.getWrapperField(this, proto.Proto.PlayerCard, 10));
};


/**
 * @param {?proto.Proto.PlayerCard|undefined} value
 * @return {!proto.Proto.Player} returns this
*/
proto.Proto.Player.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Player.prototype.hasCard = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PlayerCharacter character = 11;
 * @return {?proto.Proto.PlayerCharacter}
 */
proto.Proto.Player.prototype.getCharacter = function() {
  return /** @type{?proto.Proto.PlayerCharacter} */ (
    jspb.Message.getWrapperField(this, proto.Proto.PlayerCharacter, 11));
};


/**
 * @param {?proto.Proto.PlayerCharacter|undefined} value
 * @return {!proto.Proto.Player} returns this
*/
proto.Proto.Player.prototype.setCharacter = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Player} returns this
 */
proto.Proto.Player.prototype.clearCharacter = function() {
  return this.setCharacter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Player.prototype.hasCharacter = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.Proto.Vector3.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && proto.Proto.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.Position}
 */
proto.Proto.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.Position;
  return proto.Proto.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.Position}
 */
proto.Proto.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Proto.Vector3;
      reader.readMessage(value,proto.Proto.Vector3.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.Proto.Vector3;
      reader.readMessage(value,proto.Proto.Vector3.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Proto.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3 location = 1;
 * @return {?proto.Proto.Vector3}
 */
proto.Proto.Position.prototype.getLocation = function() {
  return /** @type{?proto.Proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Vector3, 1));
};


/**
 * @param {?proto.Proto.Vector3|undefined} value
 * @return {!proto.Proto.Position} returns this
*/
proto.Proto.Position.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Position} returns this
 */
proto.Proto.Position.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Position.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector3 rotation = 2;
 * @return {?proto.Proto.Vector3}
 */
proto.Proto.Position.prototype.getRotation = function() {
  return /** @type{?proto.Proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Vector3, 2));
};


/**
 * @param {?proto.Proto.Vector3|undefined} value
 * @return {!proto.Proto.Position} returns this
*/
proto.Proto.Position.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.Position} returns this
 */
proto.Proto.Position.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.Position.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.NPC.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.NPC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.NPC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.NPC.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dieTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initPos: (f = msg.getInitPos()) && proto.Proto.Position.toObject(includeInstance, f),
    curPos: (f = msg.getCurPos()) && proto.Proto.Position.toObject(includeInstance, f),
    nextPos: (f = msg.getNextPos()) && proto.Proto.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.NPC}
 */
proto.Proto.NPC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.NPC;
  return proto.Proto.NPC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.NPC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.NPC}
 */
proto.Proto.NPC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDieTime(value);
      break;
    case 5:
      var value = new proto.Proto.Position;
      reader.readMessage(value,proto.Proto.Position.deserializeBinaryFromReader);
      msg.setInitPos(value);
      break;
    case 6:
      var value = new proto.Proto.Position;
      reader.readMessage(value,proto.Proto.Position.deserializeBinaryFromReader);
      msg.setCurPos(value);
      break;
    case 7:
      var value = new proto.Proto.Position;
      reader.readMessage(value,proto.Proto.Position.deserializeBinaryFromReader);
      msg.setNextPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.NPC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.NPC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.NPC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.NPC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSn();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDieTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getInitPos();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Proto.Position.serializeBinaryToWriter
    );
  }
  f = message.getCurPos();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Proto.Position.serializeBinaryToWriter
    );
  }
  f = message.getNextPos();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Proto.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Proto.NPC.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 sn = 2;
 * @return {number}
 */
proto.Proto.NPC.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 create_time = 3;
 * @return {number}
 */
proto.Proto.NPC.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 die_time = 4;
 * @return {number}
 */
proto.Proto.NPC.prototype.getDieTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.setDieTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Position init_pos = 5;
 * @return {?proto.Proto.Position}
 */
proto.Proto.NPC.prototype.getInitPos = function() {
  return /** @type{?proto.Proto.Position} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Position, 5));
};


/**
 * @param {?proto.Proto.Position|undefined} value
 * @return {!proto.Proto.NPC} returns this
*/
proto.Proto.NPC.prototype.setInitPos = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.clearInitPos = function() {
  return this.setInitPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.NPC.prototype.hasInitPos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Position cur_pos = 6;
 * @return {?proto.Proto.Position}
 */
proto.Proto.NPC.prototype.getCurPos = function() {
  return /** @type{?proto.Proto.Position} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Position, 6));
};


/**
 * @param {?proto.Proto.Position|undefined} value
 * @return {!proto.Proto.NPC} returns this
*/
proto.Proto.NPC.prototype.setCurPos = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.clearCurPos = function() {
  return this.setCurPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.NPC.prototype.hasCurPos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Position next_pos = 7;
 * @return {?proto.Proto.Position}
 */
proto.Proto.NPC.prototype.getNextPos = function() {
  return /** @type{?proto.Proto.Position} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Position, 7));
};


/**
 * @param {?proto.Proto.Position|undefined} value
 * @return {!proto.Proto.NPC} returns this
*/
proto.Proto.NPC.prototype.setNextPos = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.NPC} returns this
 */
proto.Proto.NPC.prototype.clearNextPos = function() {
  return this.setNextPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.NPC.prototype.hasNextPos = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.OBJ.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.OBJ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.OBJ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.OBJ.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dieTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initPos: (f = msg.getInitPos()) && proto.Proto.Position.toObject(includeInstance, f),
    curPos: (f = msg.getCurPos()) && proto.Proto.Position.toObject(includeInstance, f),
    nextPos: (f = msg.getNextPos()) && proto.Proto.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.OBJ}
 */
proto.Proto.OBJ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.OBJ;
  return proto.Proto.OBJ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.OBJ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.OBJ}
 */
proto.Proto.OBJ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDieTime(value);
      break;
    case 5:
      var value = new proto.Proto.Position;
      reader.readMessage(value,proto.Proto.Position.deserializeBinaryFromReader);
      msg.setInitPos(value);
      break;
    case 6:
      var value = new proto.Proto.Position;
      reader.readMessage(value,proto.Proto.Position.deserializeBinaryFromReader);
      msg.setCurPos(value);
      break;
    case 7:
      var value = new proto.Proto.Position;
      reader.readMessage(value,proto.Proto.Position.deserializeBinaryFromReader);
      msg.setNextPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.OBJ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.OBJ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.OBJ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.OBJ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSn();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDieTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getInitPos();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Proto.Position.serializeBinaryToWriter
    );
  }
  f = message.getCurPos();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Proto.Position.serializeBinaryToWriter
    );
  }
  f = message.getNextPos();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Proto.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Proto.OBJ.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 sn = 2;
 * @return {number}
 */
proto.Proto.OBJ.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 create_time = 3;
 * @return {number}
 */
proto.Proto.OBJ.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 die_time = 4;
 * @return {number}
 */
proto.Proto.OBJ.prototype.getDieTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.setDieTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Position init_pos = 5;
 * @return {?proto.Proto.Position}
 */
proto.Proto.OBJ.prototype.getInitPos = function() {
  return /** @type{?proto.Proto.Position} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Position, 5));
};


/**
 * @param {?proto.Proto.Position|undefined} value
 * @return {!proto.Proto.OBJ} returns this
*/
proto.Proto.OBJ.prototype.setInitPos = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.clearInitPos = function() {
  return this.setInitPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.OBJ.prototype.hasInitPos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Position cur_pos = 6;
 * @return {?proto.Proto.Position}
 */
proto.Proto.OBJ.prototype.getCurPos = function() {
  return /** @type{?proto.Proto.Position} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Position, 6));
};


/**
 * @param {?proto.Proto.Position|undefined} value
 * @return {!proto.Proto.OBJ} returns this
*/
proto.Proto.OBJ.prototype.setCurPos = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.clearCurPos = function() {
  return this.setCurPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.OBJ.prototype.hasCurPos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Position next_pos = 7;
 * @return {?proto.Proto.Position}
 */
proto.Proto.OBJ.prototype.getNextPos = function() {
  return /** @type{?proto.Proto.Position} */ (
    jspb.Message.getWrapperField(this, proto.Proto.Position, 7));
};


/**
 * @param {?proto.Proto.Position|undefined} value
 * @return {!proto.Proto.OBJ} returns this
*/
proto.Proto.OBJ.prototype.setNextPos = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Proto.OBJ} returns this
 */
proto.Proto.OBJ.prototype.clearNextPos = function() {
  return this.setNextPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Proto.OBJ.prototype.hasNextPos = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Proto.DBWorldData.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proto.DBWorldData.prototype.toObject = function(opt_includeInstance) {
  return proto.Proto.DBWorldData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proto.DBWorldData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.DBWorldData.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    worldId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    npcListList: jspb.Message.toObjectList(msg.getNpcListList(),
    proto.Proto.NPC.toObject, includeInstance),
    objListList: jspb.Message.toObjectList(msg.getObjListList(),
    proto.Proto.OBJ.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proto.DBWorldData}
 */
proto.Proto.DBWorldData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proto.DBWorldData;
  return proto.Proto.DBWorldData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proto.DBWorldData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proto.DBWorldData}
 */
proto.Proto.DBWorldData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldId(value);
      break;
    case 3:
      var value = new proto.Proto.NPC;
      reader.readMessage(value,proto.Proto.NPC.deserializeBinaryFromReader);
      msg.addNpcList(value);
      break;
    case 4:
      var value = new proto.Proto.OBJ;
      reader.readMessage(value,proto.Proto.OBJ.deserializeBinaryFromReader);
      msg.addObjList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proto.DBWorldData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proto.DBWorldData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proto.DBWorldData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proto.DBWorldData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWorldId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNpcListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Proto.NPC.serializeBinaryToWriter
    );
  }
  f = message.getObjListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Proto.OBJ.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 server_id = 1;
 * @return {number}
 */
proto.Proto.DBWorldData.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.DBWorldData} returns this
 */
proto.Proto.DBWorldData.prototype.setServerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 world_id = 2;
 * @return {number}
 */
proto.Proto.DBWorldData.prototype.getWorldId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Proto.DBWorldData} returns this
 */
proto.Proto.DBWorldData.prototype.setWorldId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated NPC npc_list = 3;
 * @return {!Array<!proto.Proto.NPC>}
 */
proto.Proto.DBWorldData.prototype.getNpcListList = function() {
  return /** @type{!Array<!proto.Proto.NPC>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.NPC, 3));
};


/**
 * @param {!Array<!proto.Proto.NPC>} value
 * @return {!proto.Proto.DBWorldData} returns this
*/
proto.Proto.DBWorldData.prototype.setNpcListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Proto.NPC=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.NPC}
 */
proto.Proto.DBWorldData.prototype.addNpcList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Proto.NPC, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.DBWorldData} returns this
 */
proto.Proto.DBWorldData.prototype.clearNpcListList = function() {
  return this.setNpcListList([]);
};


/**
 * repeated OBJ obj_list = 4;
 * @return {!Array<!proto.Proto.OBJ>}
 */
proto.Proto.DBWorldData.prototype.getObjListList = function() {
  return /** @type{!Array<!proto.Proto.OBJ>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Proto.OBJ, 4));
};


/**
 * @param {!Array<!proto.Proto.OBJ>} value
 * @return {!proto.Proto.DBWorldData} returns this
*/
proto.Proto.DBWorldData.prototype.setObjListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Proto.OBJ=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Proto.OBJ}
 */
proto.Proto.DBWorldData.prototype.addObjList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Proto.OBJ, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Proto.DBWorldData} returns this
 */
proto.Proto.DBWorldData.prototype.clearObjListList = function() {
  return this.setObjListList([]);
};


/**
 * @enum {number}
 */
proto.Proto.Gender = {
  NONE: 0,
  MALE: 1,
  FEMALE: 2
};

goog.object.extend(exports, proto.Proto);
