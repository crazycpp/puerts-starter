// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInfoSync_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BattleAction_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleDamage_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BattleTeam_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Card_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardTeam_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateComponentParam_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBAccount_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DBWorldData_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Item_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemBase_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemChange_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Player_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerLittle_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushItemChange_ChangeShow_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqeustSkillLvUp_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseSkillLvUp_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotState_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Role_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STChatInfo_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STFriendInfo_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STPlayerSnName_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncPlayerProperty_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tag_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TagValue_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_db_2eproto;
namespace Proto {
class NullMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NullMsg> _instance;
} _NullMsg_default_instance_;
class CmdThreadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdThread> _instance;
} _CmdThread_default_instance_;
class CmdAppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdApp> _instance;
} _CmdApp_default_instance_;
class EfficiencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Efficiency> _instance;
} _Efficiency_default_instance_;
class AppRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppRegister> _instance;
} _AppRegister_default_instance_;
class AppInfoSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInfoSync> _instance;
} _AppInfoSync_default_instance_;
class AppInfoListSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInfoListSync> _instance;
} _AppInfoListSync_default_instance_;
class NetworkDisconnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkDisconnect> _instance;
} _NetworkDisconnect_default_instance_;
class TagValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TagValue> _instance;
} _TagValue_default_instance_;
class TagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tag> _instance;
} _Tag_default_instance_;
class NetworkConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkConnect> _instance;
} _NetworkConnect_default_instance_;
class HttpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Http> _instance;
} _Http_default_instance_;
class CreateComponentParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateComponentParam> _instance;
} _CreateComponentParam_default_instance_;
class CreateComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateComponent> _instance;
} _CreateComponent_default_instance_;
class RemoveComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveComponent> _instance;
} _RemoveComponent_default_instance_;
class CreateSystemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSystem> _instance;
} _CreateSystem_default_instance_;
class AccountCheckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountCheck> _instance;
} _AccountCheck_default_instance_;
class AccountCheckRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountCheckRs> _instance;
} _AccountCheckRs_default_instance_;
class RobotStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotState> _instance;
} _RobotState_default_instance_;
class RobotSyncStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotSyncState> _instance;
} _RobotSyncState_default_instance_;
class RobotCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCreate> _instance;
} _RobotCreate_default_instance_;
class PlayerLittleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerLittle> _instance;
} _PlayerLittle_default_instance_;
class PlayerListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerList> _instance;
} _PlayerList_default_instance_;
class QueryPlayerListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPlayerList> _instance;
} _QueryPlayerList_default_instance_;
class QueryPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPlayer> _instance;
} _QueryPlayer_default_instance_;
class QueryPlayerRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPlayerRs> _instance;
} _QueryPlayerRs_default_instance_;
class LoadAllAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadAllAccount> _instance;
} _LoadAllAccount_default_instance_;
class LoadAllAccountRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadAllAccountRet> _instance;
} _LoadAllAccountRet_default_instance_;
class LoadAllPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadAllPlayer> _instance;
} _LoadAllPlayer_default_instance_;
class LoadAllPlayerRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadAllPlayerRet> _instance;
} _LoadAllPlayerRet_default_instance_;
class LoadPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPlayer> _instance;
} _LoadPlayer_default_instance_;
class LoadPlayerRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPlayerRet> _instance;
} _LoadPlayerRet_default_instance_;
class PlayerLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerLogin> _instance;
} _PlayerLogin_default_instance_;
class PlayerLoginRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerLoginRet> _instance;
} _PlayerLoginRet_default_instance_;
class PlayerCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerCreate> _instance;
} _PlayerCreate_default_instance_;
class PlayerCreateRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerCreateRet> _instance;
} _PlayerCreateRet_default_instance_;
class SelectPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPlayer> _instance;
} _SelectPlayer_default_instance_;
class SelectPlayerRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPlayerRs> _instance;
} _SelectPlayerRs_default_instance_;
class SavePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavePlayer> _instance;
} _SavePlayer_default_instance_;
class WorldSyncToGatherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldSyncToGather> _instance;
} _WorldSyncToGather_default_instance_;
class WorldProxySyncToGatherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldProxySyncToGather> _instance;
} _WorldProxySyncToGather_default_instance_;
class GameTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToken> _instance;
} _GameToken_default_instance_;
class LoginByTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginByToken> _instance;
} _LoginByToken_default_instance_;
class LoginByTokenRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginByTokenRs> _instance;
} _LoginByTokenRs_default_instance_;
class TokenInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenInfo> _instance;
} _TokenInfo_default_instance_;
class SyncPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPlayer> _instance;
} _SyncPlayer_default_instance_;
class EnterWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterWorld> _instance;
} _EnterWorld_default_instance_;
class EnterHomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterHome> _instance;
} _EnterHome_default_instance_;
class QueryDungeonBySnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDungeonBySn> _instance;
} _QueryDungeonBySn_default_instance_;
class QueryDungeonBySnRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDungeonBySnRs> _instance;
} _QueryDungeonBySnRs_default_instance_;
class RequestWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestWorld> _instance;
} _RequestWorld_default_instance_;
class CreateWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWorld> _instance;
} _CreateWorld_default_instance_;
class DestoryWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestoryWorld> _instance;
} _DestoryWorld_default_instance_;
class BroadcastCreateWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastCreateWorld> _instance;
} _BroadcastCreateWorld_default_instance_;
class RequestCreateWorldProxyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestCreateWorldProxy> _instance;
} _RequestCreateWorldProxy_default_instance_;
class BroadcastCreateWorldProxyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastCreateWorldProxy> _instance;
} _BroadcastCreateWorldProxy_default_instance_;
class QueryWorldDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryWorldData> _instance;
} _QueryWorldData_default_instance_;
class QueryWorldDataRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryWorldDataRet> _instance;
} _QueryWorldDataRet_default_instance_;
class SyncWorldDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncWorldData> _instance;
} _SyncWorldData_default_instance_;
class WorldActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldAction> _instance;
} _WorldAction_default_instance_;
class WorldActionRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldActionRet> _instance;
} _WorldActionRet_default_instance_;
class SyncWorldActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncWorldAction> _instance;
} _SyncWorldAction_default_instance_;
class RemovePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePlayer> _instance;
} _RemovePlayer_default_instance_;
class RequestSyncPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestSyncPlayer> _instance;
} _RequestSyncPlayer_default_instance_;
class RoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Role> _instance;
} _Role_default_instance_;
class RoleAppearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleAppear> _instance;
} _RoleAppear_default_instance_;
class RoleDisAppearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleDisAppear> _instance;
} _RoleDisAppear_default_instance_;
class TeleportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Teleport> _instance;
} _Teleport_default_instance_;
class TeleportAfterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeleportAfter> _instance;
} _TeleportAfter_default_instance_;
class MoveByRotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveByRotation> _instance;
} _MoveByRotation_default_instance_;
class AddItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddItem> _instance;
} _AddItem_default_instance_;
class AddItemRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddItemRet> _instance;
} _AddItemRet_default_instance_;
class AddExpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddExp> _instance;
} _AddExp_default_instance_;
class AddExpRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddExpRet> _instance;
} _AddExpRet_default_instance_;
class DungeonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dungeon> _instance;
} _Dungeon_default_instance_;
class DungeonRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DungeonRs> _instance;
} _DungeonRs_default_instance_;
class ChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chat> _instance;
} _Chat_default_instance_;
class ChatRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatRet> _instance;
} _ChatRet_default_instance_;
class SyncChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncChat> _instance;
} _SyncChat_default_instance_;
class GetChatRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChatRecord> _instance;
} _GetChatRecord_default_instance_;
class STChatInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STChatInfo> _instance;
} _STChatInfo_default_instance_;
class GetChatRecordRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChatRecordRet> _instance;
} _GetChatRecordRet_default_instance_;
class QueryAllPlayerNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryAllPlayerName> _instance;
} _QueryAllPlayerName_default_instance_;
class STPlayerSnNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STPlayerSnName> _instance;
} _STPlayerSnName_default_instance_;
class QueryAllPlayerNameRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryAllPlayerNameRet> _instance;
} _QueryAllPlayerNameRet_default_instance_;
class MuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mute> _instance;
} _Mute_default_instance_;
class MuteRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MuteRet> _instance;
} _MuteRet_default_instance_;
class GetTargetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTargetInfo> _instance;
} _GetTargetInfo_default_instance_;
class GetTargetInfoRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTargetInfoRet> _instance;
} _GetTargetInfoRet_default_instance_;
class BoardcastLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoardcastLogin> _instance;
} _BoardcastLogin_default_instance_;
class STFriendInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STFriendInfo> _instance;
} _STFriendInfo_default_instance_;
class GetFriendListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFriendList> _instance;
} _GetFriendList_default_instance_;
class GetFriendListRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFriendListRet> _instance;
} _GetFriendListRet_default_instance_;
class AddFriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriend> _instance;
} _AddFriend_default_instance_;
class AddFriendRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFriendRet> _instance;
} _AddFriendRet_default_instance_;
class DelFriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelFriend> _instance;
} _DelFriend_default_instance_;
class DelFriendRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelFriendRet> _instance;
} _DelFriendRet_default_instance_;
class RefreshFriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshFriend> _instance;
} _RefreshFriend_default_instance_;
class RefreshFriendRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshFriendRet> _instance;
} _RefreshFriendRet_default_instance_;
class JoinGuildDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinGuild> _instance;
} _JoinGuild_default_instance_;
class JoinGuildRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinGuildRet> _instance;
} _JoinGuildRet_default_instance_;
class QuitGuildDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitGuild> _instance;
} _QuitGuild_default_instance_;
class QuitGuildRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitGuildRet> _instance;
} _QuitGuildRet_default_instance_;
class JoinTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinTeam> _instance;
} _JoinTeam_default_instance_;
class JoinTeamRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinTeamRet> _instance;
} _JoinTeamRet_default_instance_;
class QuitTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitTeam> _instance;
} _QuitTeam_default_instance_;
class QuitTeamRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitTeamRet> _instance;
} _QuitTeamRet_default_instance_;
class SyncPlayerPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPlayerProperty> _instance;
} _SyncPlayerProperty_default_instance_;
class SyncPlayerPropertyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPlayerPropertyList> _instance;
} _SyncPlayerPropertyList_default_instance_;
class RequestChangeTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestChangeTeam> _instance;
} _RequestChangeTeam_default_instance_;
class ReseponseChangeTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReseponseChangeTeam> _instance;
} _ReseponseChangeTeam_default_instance_;
class ReqCardLevelUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCardLevelUp> _instance;
} _ReqCardLevelUp_default_instance_;
class ReqCardStarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCardStar> _instance;
} _ReqCardStar_default_instance_;
class ReqCardQltDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCardQlt> _instance;
} _ReqCardQlt_default_instance_;
class ResCardLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCardLevel> _instance;
} _ResCardLevel_default_instance_;
class ResCardStarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCardStar> _instance;
} _ResCardStar_default_instance_;
class ResCardQltDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCardQlt> _instance;
} _ResCardQlt_default_instance_;
class ResIntenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResInten> _instance;
} _ResInten_default_instance_;
class ReuqestGMAddItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReuqestGMAddItem> _instance;
} _ReuqestGMAddItem_default_instance_;
class ItemChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemChange> _instance;
} _ItemChange_default_instance_;
class PushItemChange_ChangeShowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushItemChange_ChangeShow> _instance;
} _PushItemChange_ChangeShow_default_instance_;
class PushItemChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushItemChange> _instance;
} _PushItemChange_default_instance_;
class RequestUseItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestUseItem> _instance;
} _RequestUseItem_default_instance_;
class ResponseUseItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseUseItem> _instance;
} _ResponseUseItem_default_instance_;
class RequestSortBagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestSortBag> _instance;
} _RequestSortBag_default_instance_;
class ResponseSortBagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseSortBag> _instance;
} _ResponseSortBag_default_instance_;
class RequestSellItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestSellItem> _instance;
} _RequestSellItem_default_instance_;
class ResponseSellItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseSellItem> _instance;
} _ResponseSellItem_default_instance_;
class RequestGachaPullDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestGachaPull> _instance;
} _RequestGachaPull_default_instance_;
class ResponseGachaPullDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseGachaPull> _instance;
} _ResponseGachaPull_default_instance_;
class DBQueryPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBQueryPlayer> _instance;
} _DBQueryPlayer_default_instance_;
class DBQueryPlayerRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBQueryPlayerRet> _instance;
} _DBQueryPlayerRet_default_instance_;
class DBCreatePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBCreatePlayer> _instance;
} _DBCreatePlayer_default_instance_;
class DBCreatePlayerRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBCreatePlayerRet> _instance;
} _DBCreatePlayerRet_default_instance_;
class DBSavePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSavePlayer> _instance;
} _DBSavePlayer_default_instance_;
class DBSavePlayerRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSavePlayerRet> _instance;
} _DBSavePlayerRet_default_instance_;
class DBSaveListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSaveList> _instance;
} _DBSaveList_default_instance_;
class DBSaveListRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSaveListRet> _instance;
} _DBSaveListRet_default_instance_;
class DBSaveWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSaveWorld> _instance;
} _DBSaveWorld_default_instance_;
class DBSaveWorldRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSaveWorldRet> _instance;
} _DBSaveWorldRet_default_instance_;
class DBQueryWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBQueryWorld> _instance;
} _DBQueryWorld_default_instance_;
class DBQueryWorldRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBQueryWorldRet> _instance;
} _DBQueryWorldRet_default_instance_;
class BattleDamageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleDamage> _instance;
} _BattleDamage_default_instance_;
class BattleActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleAction> _instance;
} _BattleAction_default_instance_;
class BattleActionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleActionList> _instance;
} _BattleActionList_default_instance_;
class BattleJoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleJoin> _instance;
} _BattleJoin_default_instance_;
class BattleCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleCreate> _instance;
} _BattleCreate_default_instance_;
class BattleViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleView> _instance;
} _BattleView_default_instance_;
class BattleRsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleRs> _instance;
} _BattleRs_default_instance_;
class BattleTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleTeam> _instance;
} _BattleTeam_default_instance_;
class BattleSyncTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleSyncTeam> _instance;
} _BattleSyncTeam_default_instance_;
class BattleBeginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleBegin> _instance;
} _BattleBegin_default_instance_;
class BattleEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleEnd> _instance;
} _BattleEnd_default_instance_;
class ReqeustSkillLvUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqeustSkillLvUp> _instance;
} _ReqeustSkillLvUp_default_instance_;
class ResponseSkillLvUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseSkillLvUp> _instance;
} _ResponseSkillLvUp_default_instance_;
class ReqeustEquipmentLvUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqeustEquipmentLvUp> _instance;
} _ReqeustEquipmentLvUp_default_instance_;
class ResponseEquipmentLvUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseEquipmentLvUp> _instance;
} _ResponseEquipmentLvUp_default_instance_;
class ReqCardSkillLvUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCardSkillLvUp> _instance;
} _ReqCardSkillLvUp_default_instance_;
class ResCardSkillLvUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResCardSkillLvUp> _instance;
} _ResCardSkillLvUp_default_instance_;
}  // namespace Proto
static void InitDefaultsscc_info_AccountCheck_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AccountCheck_default_instance_;
    new (ptr) ::Proto::AccountCheck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AccountCheck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountCheck_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccountCheck_msg_2eproto}, {}};

static void InitDefaultsscc_info_AccountCheckRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AccountCheckRs_default_instance_;
    new (ptr) ::Proto::AccountCheckRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AccountCheckRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountCheckRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccountCheckRs_msg_2eproto}, {}};

static void InitDefaultsscc_info_AddExp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AddExp_default_instance_;
    new (ptr) ::Proto::AddExp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AddExp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddExp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddExp_msg_2eproto}, {}};

static void InitDefaultsscc_info_AddExpRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AddExpRet_default_instance_;
    new (ptr) ::Proto::AddExpRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AddExpRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddExpRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddExpRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_AddFriend_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AddFriend_default_instance_;
    new (ptr) ::Proto::AddFriend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AddFriend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriend_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddFriend_msg_2eproto}, {}};

static void InitDefaultsscc_info_AddFriendRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AddFriendRet_default_instance_;
    new (ptr) ::Proto::AddFriendRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AddFriendRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFriendRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddFriendRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_AddItem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AddItem_default_instance_;
    new (ptr) ::Proto::AddItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AddItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddItem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddItem_msg_2eproto}, {}};

static void InitDefaultsscc_info_AddItemRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AddItemRet_default_instance_;
    new (ptr) ::Proto::AddItemRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AddItemRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddItemRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AddItemRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_AppInfoListSync_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AppInfoListSync_default_instance_;
    new (ptr) ::Proto::AppInfoListSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AppInfoListSync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppInfoListSync_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppInfoListSync_msg_2eproto}, {
      &scc_info_AppInfoSync_msg_2eproto.base,}};

static void InitDefaultsscc_info_AppInfoSync_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AppInfoSync_default_instance_;
    new (ptr) ::Proto::AppInfoSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AppInfoSync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInfoSync_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppInfoSync_msg_2eproto}, {}};

static void InitDefaultsscc_info_AppRegister_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_AppRegister_default_instance_;
    new (ptr) ::Proto::AppRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::AppRegister::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppRegister_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppRegister_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleAction_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleAction_default_instance_;
    new (ptr) ::Proto::BattleAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BattleAction_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BattleAction_msg_2eproto}, {
      &scc_info_BattleDamage_msg_2eproto.base,}};

static void InitDefaultsscc_info_BattleActionList_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleActionList_default_instance_;
    new (ptr) ::Proto::BattleActionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleActionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BattleActionList_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BattleActionList_msg_2eproto}, {
      &scc_info_BattleAction_msg_2eproto.base,}};

static void InitDefaultsscc_info_BattleBegin_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleBegin_default_instance_;
    new (ptr) ::Proto::BattleBegin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleBegin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleBegin_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleBegin_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleCreate_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleCreate_default_instance_;
    new (ptr) ::Proto::BattleCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleCreate_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleCreate_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleDamage_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleDamage_default_instance_;
    new (ptr) ::Proto::BattleDamage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleDamage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleDamage_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleDamage_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleEnd_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleEnd_default_instance_;
    new (ptr) ::Proto::BattleEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleEnd_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleEnd_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleJoin_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleJoin_default_instance_;
    new (ptr) ::Proto::BattleJoin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleJoin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleJoin_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleJoin_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleRs_default_instance_;
    new (ptr) ::Proto::BattleRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleRs_msg_2eproto}, {}};

static void InitDefaultsscc_info_BattleSyncTeam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleSyncTeam_default_instance_;
    new (ptr) ::Proto::BattleSyncTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleSyncTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BattleSyncTeam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BattleSyncTeam_msg_2eproto}, {
      &scc_info_BattleTeam_msg_2eproto.base,}};

static void InitDefaultsscc_info_BattleTeam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleTeam_default_instance_;
    new (ptr) ::Proto::BattleTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BattleTeam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BattleTeam_msg_2eproto}, {
      &scc_info_Card_db_2eproto.base,}};

static void InitDefaultsscc_info_BattleView_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BattleView_default_instance_;
    new (ptr) ::Proto::BattleView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BattleView::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleView_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BattleView_msg_2eproto}, {}};

static void InitDefaultsscc_info_BoardcastLogin_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BoardcastLogin_default_instance_;
    new (ptr) ::Proto::BoardcastLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BoardcastLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoardcastLogin_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoardcastLogin_msg_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastCreateWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BroadcastCreateWorld_default_instance_;
    new (ptr) ::Proto::BroadcastCreateWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BroadcastCreateWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastCreateWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BroadcastCreateWorld_msg_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastCreateWorldProxy_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_BroadcastCreateWorldProxy_default_instance_;
    new (ptr) ::Proto::BroadcastCreateWorldProxy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::BroadcastCreateWorldProxy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastCreateWorldProxy_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BroadcastCreateWorldProxy_msg_2eproto}, {}};

static void InitDefaultsscc_info_Chat_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Chat_default_instance_;
    new (ptr) ::Proto::Chat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Chat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chat_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Chat_msg_2eproto}, {}};

static void InitDefaultsscc_info_ChatRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ChatRet_default_instance_;
    new (ptr) ::Proto::ChatRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ChatRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChatRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_CmdApp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_CmdApp_default_instance_;
    new (ptr) ::Proto::CmdApp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::CmdApp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdApp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CmdApp_msg_2eproto}, {}};

static void InitDefaultsscc_info_CmdThread_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_CmdThread_default_instance_;
    new (ptr) ::Proto::CmdThread();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::CmdThread::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdThread_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CmdThread_msg_2eproto}, {}};

static void InitDefaultsscc_info_CreateComponent_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_CreateComponent_default_instance_;
    new (ptr) ::Proto::CreateComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::CreateComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateComponent_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateComponent_msg_2eproto}, {
      &scc_info_CreateComponentParam_msg_2eproto.base,}};

static void InitDefaultsscc_info_CreateComponentParam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_CreateComponentParam_default_instance_;
    new (ptr) ::Proto::CreateComponentParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::CreateComponentParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateComponentParam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreateComponentParam_msg_2eproto}, {}};

static void InitDefaultsscc_info_CreateSystem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_CreateSystem_default_instance_;
    new (ptr) ::Proto::CreateSystem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::CreateSystem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSystem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreateSystem_msg_2eproto}, {}};

static void InitDefaultsscc_info_CreateWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_CreateWorld_default_instance_;
    new (ptr) ::Proto::CreateWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::CreateWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CreateWorld_msg_2eproto}, {}};

static void InitDefaultsscc_info_DBCreatePlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBCreatePlayer_default_instance_;
    new (ptr) ::Proto::DBCreatePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBCreatePlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBCreatePlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBCreatePlayer_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_DBCreatePlayerRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBCreatePlayerRet_default_instance_;
    new (ptr) ::Proto::DBCreatePlayerRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBCreatePlayerRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBCreatePlayerRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBCreatePlayerRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_DBQueryPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBQueryPlayer_default_instance_;
    new (ptr) ::Proto::DBQueryPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBQueryPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBQueryPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBQueryPlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_DBQueryPlayerRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBQueryPlayerRet_default_instance_;
    new (ptr) ::Proto::DBQueryPlayerRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBQueryPlayerRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBQueryPlayerRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBQueryPlayerRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_DBQueryWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBQueryWorld_default_instance_;
    new (ptr) ::Proto::DBQueryWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBQueryWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBQueryWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBQueryWorld_msg_2eproto}, {}};

static void InitDefaultsscc_info_DBQueryWorldRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBQueryWorldRet_default_instance_;
    new (ptr) ::Proto::DBQueryWorldRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBQueryWorldRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBQueryWorldRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBQueryWorldRet_msg_2eproto}, {
      &scc_info_DBWorldData_db_2eproto.base,}};

static void InitDefaultsscc_info_DBSaveList_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBSaveList_default_instance_;
    new (ptr) ::Proto::DBSaveList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBSaveList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBSaveList_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBSaveList_msg_2eproto}, {}};

static void InitDefaultsscc_info_DBSaveListRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBSaveListRet_default_instance_;
    new (ptr) ::Proto::DBSaveListRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBSaveListRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBSaveListRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBSaveListRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_DBSavePlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBSavePlayer_default_instance_;
    new (ptr) ::Proto::DBSavePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBSavePlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBSavePlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBSavePlayer_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_DBSavePlayerRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBSavePlayerRet_default_instance_;
    new (ptr) ::Proto::DBSavePlayerRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBSavePlayerRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBSavePlayerRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBSavePlayerRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_DBSaveWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBSaveWorld_default_instance_;
    new (ptr) ::Proto::DBSaveWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBSaveWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBSaveWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DBSaveWorld_msg_2eproto}, {
      &scc_info_DBWorldData_db_2eproto.base,}};

static void InitDefaultsscc_info_DBSaveWorldRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DBSaveWorldRet_default_instance_;
    new (ptr) ::Proto::DBSaveWorldRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DBSaveWorldRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBSaveWorldRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DBSaveWorldRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_DelFriend_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DelFriend_default_instance_;
    new (ptr) ::Proto::DelFriend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DelFriend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelFriend_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DelFriend_msg_2eproto}, {}};

static void InitDefaultsscc_info_DelFriendRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DelFriendRet_default_instance_;
    new (ptr) ::Proto::DelFriendRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DelFriendRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelFriendRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DelFriendRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_DestoryWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DestoryWorld_default_instance_;
    new (ptr) ::Proto::DestoryWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DestoryWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestoryWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DestoryWorld_msg_2eproto}, {}};

static void InitDefaultsscc_info_Dungeon_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Dungeon_default_instance_;
    new (ptr) ::Proto::Dungeon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Dungeon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dungeon_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Dungeon_msg_2eproto}, {}};

static void InitDefaultsscc_info_DungeonRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_DungeonRs_default_instance_;
    new (ptr) ::Proto::DungeonRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::DungeonRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DungeonRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DungeonRs_msg_2eproto}, {
      &scc_info_ItemBase_db_2eproto.base,}};

static void InitDefaultsscc_info_Efficiency_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Efficiency_default_instance_;
    new (ptr) ::Proto::Efficiency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Efficiency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Efficiency_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Efficiency_msg_2eproto}, {}};

static void InitDefaultsscc_info_EnterHome_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_EnterHome_default_instance_;
    new (ptr) ::Proto::EnterHome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::EnterHome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterHome_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnterHome_msg_2eproto}, {}};

static void InitDefaultsscc_info_EnterWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_EnterWorld_default_instance_;
    new (ptr) ::Proto::EnterWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::EnterWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnterWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_EnterWorld_msg_2eproto}, {
      &scc_info_Vector3_db_2eproto.base,
      &scc_info_DBWorldData_db_2eproto.base,}};

static void InitDefaultsscc_info_GameToken_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GameToken_default_instance_;
    new (ptr) ::Proto::GameToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GameToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToken_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GameToken_msg_2eproto}, {}};

static void InitDefaultsscc_info_GetChatRecord_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GetChatRecord_default_instance_;
    new (ptr) ::Proto::GetChatRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GetChatRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChatRecord_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetChatRecord_msg_2eproto}, {}};

static void InitDefaultsscc_info_GetChatRecordRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GetChatRecordRet_default_instance_;
    new (ptr) ::Proto::GetChatRecordRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GetChatRecordRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetChatRecordRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetChatRecordRet_msg_2eproto}, {
      &scc_info_STChatInfo_msg_2eproto.base,}};

static void InitDefaultsscc_info_GetFriendList_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GetFriendList_default_instance_;
    new (ptr) ::Proto::GetFriendList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GetFriendList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFriendList_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetFriendList_msg_2eproto}, {}};

static void InitDefaultsscc_info_GetFriendListRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GetFriendListRet_default_instance_;
    new (ptr) ::Proto::GetFriendListRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GetFriendListRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFriendListRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetFriendListRet_msg_2eproto}, {
      &scc_info_STFriendInfo_msg_2eproto.base,}};

static void InitDefaultsscc_info_GetTargetInfo_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GetTargetInfo_default_instance_;
    new (ptr) ::Proto::GetTargetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GetTargetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTargetInfo_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetTargetInfo_msg_2eproto}, {}};

static void InitDefaultsscc_info_GetTargetInfoRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_GetTargetInfoRet_default_instance_;
    new (ptr) ::Proto::GetTargetInfoRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GetTargetInfoRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTargetInfoRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetTargetInfoRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_Http_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Http_default_instance_;
    new (ptr) ::Proto::Http();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Http::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Http_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Http_msg_2eproto}, {}};

static void InitDefaultsscc_info_ItemChange_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ItemChange_default_instance_;
    new (ptr) ::Proto::ItemChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ItemChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemChange_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ItemChange_msg_2eproto}, {}};

static void InitDefaultsscc_info_JoinGuild_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_JoinGuild_default_instance_;
    new (ptr) ::Proto::JoinGuild();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::JoinGuild::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGuild_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JoinGuild_msg_2eproto}, {}};

static void InitDefaultsscc_info_JoinGuildRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_JoinGuildRet_default_instance_;
    new (ptr) ::Proto::JoinGuildRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::JoinGuildRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinGuildRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JoinGuildRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_JoinTeam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_JoinTeam_default_instance_;
    new (ptr) ::Proto::JoinTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::JoinTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinTeam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JoinTeam_msg_2eproto}, {}};

static void InitDefaultsscc_info_JoinTeamRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_JoinTeamRet_default_instance_;
    new (ptr) ::Proto::JoinTeamRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::JoinTeamRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinTeamRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JoinTeamRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_LoadAllAccount_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoadAllAccount_default_instance_;
    new (ptr) ::Proto::LoadAllAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoadAllAccount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadAllAccount_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoadAllAccount_msg_2eproto}, {}};

static void InitDefaultsscc_info_LoadAllAccountRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoadAllAccountRet_default_instance_;
    new (ptr) ::Proto::LoadAllAccountRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoadAllAccountRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadAllAccountRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoadAllAccountRet_msg_2eproto}, {
      &scc_info_DBAccount_db_2eproto.base,}};

static void InitDefaultsscc_info_LoadAllPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoadAllPlayer_default_instance_;
    new (ptr) ::Proto::LoadAllPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoadAllPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadAllPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoadAllPlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_LoadAllPlayerRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoadAllPlayerRet_default_instance_;
    new (ptr) ::Proto::LoadAllPlayerRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoadAllPlayerRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadAllPlayerRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoadAllPlayerRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_LoadPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoadPlayer_default_instance_;
    new (ptr) ::Proto::LoadPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoadPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoadPlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_LoadPlayerRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoadPlayerRet_default_instance_;
    new (ptr) ::Proto::LoadPlayerRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoadPlayerRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadPlayerRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LoadPlayerRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_LoginByToken_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoginByToken_default_instance_;
    new (ptr) ::Proto::LoginByToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoginByToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginByToken_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoginByToken_msg_2eproto}, {}};

static void InitDefaultsscc_info_LoginByTokenRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_LoginByTokenRs_default_instance_;
    new (ptr) ::Proto::LoginByTokenRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::LoginByTokenRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginByTokenRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoginByTokenRs_msg_2eproto}, {}};

static void InitDefaultsscc_info_MoveByRotation_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_MoveByRotation_default_instance_;
    new (ptr) ::Proto::MoveByRotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::MoveByRotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveByRotation_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveByRotation_msg_2eproto}, {
      &scc_info_Vector3_db_2eproto.base,}};

static void InitDefaultsscc_info_Mute_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Mute_default_instance_;
    new (ptr) ::Proto::Mute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Mute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mute_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Mute_msg_2eproto}, {}};

static void InitDefaultsscc_info_MuteRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_MuteRet_default_instance_;
    new (ptr) ::Proto::MuteRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::MuteRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MuteRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MuteRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_NetworkConnect_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_NetworkConnect_default_instance_;
    new (ptr) ::Proto::NetworkConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::NetworkConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkConnect_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkConnect_msg_2eproto}, {
      &scc_info_Tag_msg_2eproto.base,}};

static void InitDefaultsscc_info_NetworkDisconnect_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_NetworkDisconnect_default_instance_;
    new (ptr) ::Proto::NetworkDisconnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::NetworkDisconnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkDisconnect_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkDisconnect_msg_2eproto}, {}};

static void InitDefaultsscc_info_NullMsg_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_NullMsg_default_instance_;
    new (ptr) ::Proto::NullMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::NullMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NullMsg_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NullMsg_msg_2eproto}, {}};

static void InitDefaultsscc_info_PlayerCreate_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PlayerCreate_default_instance_;
    new (ptr) ::Proto::PlayerCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PlayerCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerCreate_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayerCreate_msg_2eproto}, {}};

static void InitDefaultsscc_info_PlayerCreateRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PlayerCreateRet_default_instance_;
    new (ptr) ::Proto::PlayerCreateRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PlayerCreateRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerCreateRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlayerCreateRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_PlayerList_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PlayerList_default_instance_;
    new (ptr) ::Proto::PlayerList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PlayerList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerList_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlayerList_msg_2eproto}, {
      &scc_info_PlayerLittle_msg_2eproto.base,}};

static void InitDefaultsscc_info_PlayerLittle_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PlayerLittle_default_instance_;
    new (ptr) ::Proto::PlayerLittle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PlayerLittle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerLittle_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayerLittle_msg_2eproto}, {}};

static void InitDefaultsscc_info_PlayerLogin_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PlayerLogin_default_instance_;
    new (ptr) ::Proto::PlayerLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PlayerLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerLogin_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PlayerLogin_msg_2eproto}, {}};

static void InitDefaultsscc_info_PlayerLoginRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PlayerLoginRet_default_instance_;
    new (ptr) ::Proto::PlayerLoginRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PlayerLoginRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerLoginRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PlayerLoginRet_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_PushItemChange_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PushItemChange_default_instance_;
    new (ptr) ::Proto::PushItemChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PushItemChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PushItemChange_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PushItemChange_msg_2eproto}, {
      &scc_info_ItemChange_msg_2eproto.base,
      &scc_info_PushItemChange_ChangeShow_msg_2eproto.base,}};

static void InitDefaultsscc_info_PushItemChange_ChangeShow_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_PushItemChange_ChangeShow_default_instance_;
    new (ptr) ::Proto::PushItemChange_ChangeShow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::PushItemChange_ChangeShow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushItemChange_ChangeShow_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PushItemChange_ChangeShow_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryAllPlayerName_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryAllPlayerName_default_instance_;
    new (ptr) ::Proto::QueryAllPlayerName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryAllPlayerName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryAllPlayerName_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryAllPlayerName_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryAllPlayerNameRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryAllPlayerNameRet_default_instance_;
    new (ptr) ::Proto::QueryAllPlayerNameRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryAllPlayerNameRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryAllPlayerNameRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QueryAllPlayerNameRet_msg_2eproto}, {
      &scc_info_STPlayerSnName_msg_2eproto.base,}};

static void InitDefaultsscc_info_QueryDungeonBySn_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryDungeonBySn_default_instance_;
    new (ptr) ::Proto::QueryDungeonBySn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryDungeonBySn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryDungeonBySn_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryDungeonBySn_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryDungeonBySnRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryDungeonBySnRs_default_instance_;
    new (ptr) ::Proto::QueryDungeonBySnRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryDungeonBySnRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryDungeonBySnRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryDungeonBySnRs_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryPlayer_default_instance_;
    new (ptr) ::Proto::QueryPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryPlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryPlayerList_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryPlayerList_default_instance_;
    new (ptr) ::Proto::QueryPlayerList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryPlayerList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPlayerList_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryPlayerList_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryPlayerRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryPlayerRs_default_instance_;
    new (ptr) ::Proto::QueryPlayerRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryPlayerRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryPlayerRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QueryPlayerRs_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_QueryWorldData_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryWorldData_default_instance_;
    new (ptr) ::Proto::QueryWorldData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryWorldData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryWorldData_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryWorldData_msg_2eproto}, {}};

static void InitDefaultsscc_info_QueryWorldDataRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QueryWorldDataRet_default_instance_;
    new (ptr) ::Proto::QueryWorldDataRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QueryWorldDataRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryWorldDataRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QueryWorldDataRet_msg_2eproto}, {
      &scc_info_DBWorldData_db_2eproto.base,}};

static void InitDefaultsscc_info_QuitGuild_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QuitGuild_default_instance_;
    new (ptr) ::Proto::QuitGuild();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QuitGuild::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitGuild_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuitGuild_msg_2eproto}, {}};

static void InitDefaultsscc_info_QuitGuildRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QuitGuildRet_default_instance_;
    new (ptr) ::Proto::QuitGuildRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QuitGuildRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitGuildRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuitGuildRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_QuitTeam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QuitTeam_default_instance_;
    new (ptr) ::Proto::QuitTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QuitTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitTeam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuitTeam_msg_2eproto}, {}};

static void InitDefaultsscc_info_QuitTeamRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_QuitTeamRet_default_instance_;
    new (ptr) ::Proto::QuitTeamRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::QuitTeamRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitTeamRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuitTeamRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_RefreshFriend_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RefreshFriend_default_instance_;
    new (ptr) ::Proto::RefreshFriend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RefreshFriend::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshFriend_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RefreshFriend_msg_2eproto}, {}};

static void InitDefaultsscc_info_RefreshFriendRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RefreshFriendRet_default_instance_;
    new (ptr) ::Proto::RefreshFriendRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RefreshFriendRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefreshFriendRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RefreshFriendRet_msg_2eproto}, {
      &scc_info_STFriendInfo_msg_2eproto.base,}};

static void InitDefaultsscc_info_RemoveComponent_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RemoveComponent_default_instance_;
    new (ptr) ::Proto::RemoveComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RemoveComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveComponent_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemoveComponent_msg_2eproto}, {}};

static void InitDefaultsscc_info_RemovePlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RemovePlayer_default_instance_;
    new (ptr) ::Proto::RemovePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RemovePlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RemovePlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_ReqCardLevelUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReqCardLevelUp_default_instance_;
    new (ptr) ::Proto::ReqCardLevelUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReqCardLevelUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCardLevelUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqCardLevelUp_msg_2eproto}, {
      &scc_info_Item_db_2eproto.base,}};

static void InitDefaultsscc_info_ReqCardQlt_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReqCardQlt_default_instance_;
    new (ptr) ::Proto::ReqCardQlt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReqCardQlt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCardQlt_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqCardQlt_msg_2eproto}, {
      &scc_info_ItemBase_db_2eproto.base,}};

static void InitDefaultsscc_info_ReqCardSkillLvUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReqCardSkillLvUp_default_instance_;
    new (ptr) ::Proto::ReqCardSkillLvUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReqCardSkillLvUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCardSkillLvUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqCardSkillLvUp_msg_2eproto}, {
      &scc_info_ReqeustSkillLvUp_msg_2eproto.base,}};

static void InitDefaultsscc_info_ReqCardStar_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReqCardStar_default_instance_;
    new (ptr) ::Proto::ReqCardStar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReqCardStar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCardStar_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReqCardStar_msg_2eproto}, {
      &scc_info_ItemBase_db_2eproto.base,}};

static void InitDefaultsscc_info_ReqeustEquipmentLvUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReqeustEquipmentLvUp_default_instance_;
    new (ptr) ::Proto::ReqeustEquipmentLvUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReqeustEquipmentLvUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqeustEquipmentLvUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqeustEquipmentLvUp_msg_2eproto}, {}};

static void InitDefaultsscc_info_ReqeustSkillLvUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReqeustSkillLvUp_default_instance_;
    new (ptr) ::Proto::ReqeustSkillLvUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReqeustSkillLvUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqeustSkillLvUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReqeustSkillLvUp_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestChangeTeam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestChangeTeam_default_instance_;
    new (ptr) ::Proto::RequestChangeTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestChangeTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestChangeTeam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RequestChangeTeam_msg_2eproto}, {
      &scc_info_CardTeam_db_2eproto.base,}};

static void InitDefaultsscc_info_RequestCreateWorldProxy_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestCreateWorldProxy_default_instance_;
    new (ptr) ::Proto::RequestCreateWorldProxy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestCreateWorldProxy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestCreateWorldProxy_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestCreateWorldProxy_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestGachaPull_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestGachaPull_default_instance_;
    new (ptr) ::Proto::RequestGachaPull();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestGachaPull::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestGachaPull_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestGachaPull_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestSellItem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestSellItem_default_instance_;
    new (ptr) ::Proto::RequestSellItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestSellItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestSellItem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestSellItem_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestSortBag_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestSortBag_default_instance_;
    new (ptr) ::Proto::RequestSortBag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestSortBag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestSortBag_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestSortBag_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestSyncPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestSyncPlayer_default_instance_;
    new (ptr) ::Proto::RequestSyncPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestSyncPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestSyncPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestSyncPlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestUseItem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestUseItem_default_instance_;
    new (ptr) ::Proto::RequestUseItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestUseItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestUseItem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestUseItem_msg_2eproto}, {}};

static void InitDefaultsscc_info_RequestWorld_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RequestWorld_default_instance_;
    new (ptr) ::Proto::RequestWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RequestWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestWorld_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestWorld_msg_2eproto}, {}};

static void InitDefaultsscc_info_ResCardLevel_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResCardLevel_default_instance_;
    new (ptr) ::Proto::ResCardLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResCardLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResCardLevel_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResCardLevel_msg_2eproto}, {
      &scc_info_Card_db_2eproto.base,}};

static void InitDefaultsscc_info_ResCardQlt_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResCardQlt_default_instance_;
    new (ptr) ::Proto::ResCardQlt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResCardQlt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResCardQlt_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResCardQlt_msg_2eproto}, {
      &scc_info_Card_db_2eproto.base,}};

static void InitDefaultsscc_info_ResCardSkillLvUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResCardSkillLvUp_default_instance_;
    new (ptr) ::Proto::ResCardSkillLvUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResCardSkillLvUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResCardSkillLvUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResCardSkillLvUp_msg_2eproto}, {
      &scc_info_ResponseSkillLvUp_msg_2eproto.base,}};

static void InitDefaultsscc_info_ResCardStar_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResCardStar_default_instance_;
    new (ptr) ::Proto::ResCardStar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResCardStar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResCardStar_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResCardStar_msg_2eproto}, {
      &scc_info_Card_db_2eproto.base,}};

static void InitDefaultsscc_info_ResInten_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResInten_default_instance_;
    new (ptr) ::Proto::ResInten();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResInten::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResInten_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResInten_msg_2eproto}, {
      &scc_info_Card_db_2eproto.base,}};

static void InitDefaultsscc_info_ReseponseChangeTeam_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReseponseChangeTeam_default_instance_;
    new (ptr) ::Proto::ReseponseChangeTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReseponseChangeTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReseponseChangeTeam_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReseponseChangeTeam_msg_2eproto}, {
      &scc_info_CardTeam_db_2eproto.base,}};

static void InitDefaultsscc_info_ResponseEquipmentLvUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResponseEquipmentLvUp_default_instance_;
    new (ptr) ::Proto::ResponseEquipmentLvUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResponseEquipmentLvUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseEquipmentLvUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResponseEquipmentLvUp_msg_2eproto}, {}};

static void InitDefaultsscc_info_ResponseGachaPull_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResponseGachaPull_default_instance_;
    new (ptr) ::Proto::ResponseGachaPull();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResponseGachaPull::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseGachaPull_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResponseGachaPull_msg_2eproto}, {
      &scc_info_PushItemChange_ChangeShow_msg_2eproto.base,}};

static void InitDefaultsscc_info_ResponseSellItem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResponseSellItem_default_instance_;
    new (ptr) ::Proto::ResponseSellItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResponseSellItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseSellItem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResponseSellItem_msg_2eproto}, {}};

static void InitDefaultsscc_info_ResponseSkillLvUp_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResponseSkillLvUp_default_instance_;
    new (ptr) ::Proto::ResponseSkillLvUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResponseSkillLvUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseSkillLvUp_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResponseSkillLvUp_msg_2eproto}, {}};

static void InitDefaultsscc_info_ResponseSortBag_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResponseSortBag_default_instance_;
    new (ptr) ::Proto::ResponseSortBag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResponseSortBag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseSortBag_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResponseSortBag_msg_2eproto}, {
      &scc_info_Item_db_2eproto.base,}};

static void InitDefaultsscc_info_ResponseUseItem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ResponseUseItem_default_instance_;
    new (ptr) ::Proto::ResponseUseItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ResponseUseItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseUseItem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResponseUseItem_msg_2eproto}, {}};

static void InitDefaultsscc_info_ReuqestGMAddItem_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_ReuqestGMAddItem_default_instance_;
    new (ptr) ::Proto::ReuqestGMAddItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::ReuqestGMAddItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReuqestGMAddItem_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReuqestGMAddItem_msg_2eproto}, {}};

static void InitDefaultsscc_info_RobotCreate_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RobotCreate_default_instance_;
    new (ptr) ::Proto::RobotCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RobotCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotCreate_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RobotCreate_msg_2eproto}, {}};

static void InitDefaultsscc_info_RobotState_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RobotState_default_instance_;
    new (ptr) ::Proto::RobotState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RobotState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotState_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RobotState_msg_2eproto}, {}};

static void InitDefaultsscc_info_RobotSyncState_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RobotSyncState_default_instance_;
    new (ptr) ::Proto::RobotSyncState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RobotSyncState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotSyncState_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RobotSyncState_msg_2eproto}, {
      &scc_info_RobotState_msg_2eproto.base,}};

static void InitDefaultsscc_info_Role_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Role_default_instance_;
    new (ptr) ::Proto::Role();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Role::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Role_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Role_msg_2eproto}, {
      &scc_info_Vector3_db_2eproto.base,}};

static void InitDefaultsscc_info_RoleAppear_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RoleAppear_default_instance_;
    new (ptr) ::Proto::RoleAppear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RoleAppear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoleAppear_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoleAppear_msg_2eproto}, {
      &scc_info_Role_msg_2eproto.base,}};

static void InitDefaultsscc_info_RoleDisAppear_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_RoleDisAppear_default_instance_;
    new (ptr) ::Proto::RoleDisAppear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::RoleDisAppear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDisAppear_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoleDisAppear_msg_2eproto}, {}};

static void InitDefaultsscc_info_STChatInfo_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_STChatInfo_default_instance_;
    new (ptr) ::Proto::STChatInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::STChatInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STChatInfo_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_STChatInfo_msg_2eproto}, {}};

static void InitDefaultsscc_info_STFriendInfo_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_STFriendInfo_default_instance_;
    new (ptr) ::Proto::STFriendInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::STFriendInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STFriendInfo_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_STFriendInfo_msg_2eproto}, {}};

static void InitDefaultsscc_info_STPlayerSnName_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_STPlayerSnName_default_instance_;
    new (ptr) ::Proto::STPlayerSnName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::STPlayerSnName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STPlayerSnName_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_STPlayerSnName_msg_2eproto}, {}};

static void InitDefaultsscc_info_SavePlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SavePlayer_default_instance_;
    new (ptr) ::Proto::SavePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SavePlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SavePlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SavePlayer_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_SelectPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SelectPlayer_default_instance_;
    new (ptr) ::Proto::SelectPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SelectPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SelectPlayer_msg_2eproto}, {}};

static void InitDefaultsscc_info_SelectPlayerRs_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SelectPlayerRs_default_instance_;
    new (ptr) ::Proto::SelectPlayerRs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SelectPlayerRs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPlayerRs_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SelectPlayerRs_msg_2eproto}, {}};

static void InitDefaultsscc_info_SyncChat_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SyncChat_default_instance_;
    new (ptr) ::Proto::SyncChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SyncChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncChat_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SyncChat_msg_2eproto}, {
      &scc_info_STChatInfo_msg_2eproto.base,}};

static void InitDefaultsscc_info_SyncPlayer_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SyncPlayer_default_instance_;
    new (ptr) ::Proto::SyncPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SyncPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPlayer_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SyncPlayer_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_SyncPlayerProperty_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SyncPlayerProperty_default_instance_;
    new (ptr) ::Proto::SyncPlayerProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SyncPlayerProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncPlayerProperty_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SyncPlayerProperty_msg_2eproto}, {}};

static void InitDefaultsscc_info_SyncPlayerPropertyList_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SyncPlayerPropertyList_default_instance_;
    new (ptr) ::Proto::SyncPlayerPropertyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SyncPlayerPropertyList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPlayerPropertyList_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SyncPlayerPropertyList_msg_2eproto}, {
      &scc_info_SyncPlayerProperty_msg_2eproto.base,}};

static void InitDefaultsscc_info_SyncWorldAction_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SyncWorldAction_default_instance_;
    new (ptr) ::Proto::SyncWorldAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SyncWorldAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncWorldAction_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SyncWorldAction_msg_2eproto}, {}};

static void InitDefaultsscc_info_SyncWorldData_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_SyncWorldData_default_instance_;
    new (ptr) ::Proto::SyncWorldData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::SyncWorldData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncWorldData_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SyncWorldData_msg_2eproto}, {
      &scc_info_DBWorldData_db_2eproto.base,}};

static void InitDefaultsscc_info_Tag_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Tag_default_instance_;
    new (ptr) ::Proto::Tag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Tag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tag_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Tag_msg_2eproto}, {
      &scc_info_TagValue_msg_2eproto.base,}};

static void InitDefaultsscc_info_TagValue_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TagValue_default_instance_;
    new (ptr) ::Proto::TagValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TagValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TagValue_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TagValue_msg_2eproto}, {}};

static void InitDefaultsscc_info_Teleport_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_Teleport_default_instance_;
    new (ptr) ::Proto::Teleport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Teleport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Teleport_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Teleport_msg_2eproto}, {
      &scc_info_Player_db_2eproto.base,}};

static void InitDefaultsscc_info_TeleportAfter_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TeleportAfter_default_instance_;
    new (ptr) ::Proto::TeleportAfter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TeleportAfter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeleportAfter_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TeleportAfter_msg_2eproto}, {}};

static void InitDefaultsscc_info_TokenInfo_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TokenInfo_default_instance_;
    new (ptr) ::Proto::TokenInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TokenInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenInfo_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TokenInfo_msg_2eproto}, {}};

static void InitDefaultsscc_info_WorldAction_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_WorldAction_default_instance_;
    new (ptr) ::Proto::WorldAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::WorldAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldAction_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorldAction_msg_2eproto}, {}};

static void InitDefaultsscc_info_WorldActionRet_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_WorldActionRet_default_instance_;
    new (ptr) ::Proto::WorldActionRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::WorldActionRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldActionRet_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorldActionRet_msg_2eproto}, {}};

static void InitDefaultsscc_info_WorldProxySyncToGather_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_WorldProxySyncToGather_default_instance_;
    new (ptr) ::Proto::WorldProxySyncToGather();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::WorldProxySyncToGather::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldProxySyncToGather_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorldProxySyncToGather_msg_2eproto}, {}};

static void InitDefaultsscc_info_WorldSyncToGather_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_WorldSyncToGather_default_instance_;
    new (ptr) ::Proto::WorldSyncToGather();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::WorldSyncToGather::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldSyncToGather_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WorldSyncToGather_msg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[159];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::NullMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::CmdThread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::CmdThread, cmd_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::CmdApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::CmdApp, cmd_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Efficiency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Efficiency, thread_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::Efficiency, thread_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::Efficiency, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AppRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppRegister, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppRegister, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AppInfoSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppInfoSync, app_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppInfoSync, app_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::AppInfoSync, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AppInfoListSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AppInfoListSync, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkDisconnect, network_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkDisconnect, socket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TagValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TagValue, value_int64_),
  PROTOBUF_FIELD_OFFSET(::Proto::TagValue, value_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Tag, tag_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::Tag, tag_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkConnect, network_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkConnect, tag_),
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkConnect, ip_),
  PROTOBUF_FIELD_OFFSET(::Proto::NetworkConnect, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Http, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Http, body_),
  PROTOBUF_FIELD_OFFSET(::Proto::Http, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponentParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponentParam, type_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponentParam, int_param_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponentParam, string_param_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponentParam, uint64_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponent, thread_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponent, class_name_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponent, params_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponent, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateComponent, is_to_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RemoveComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RemoveComponent, sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateSystem, thread_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateSystem, system_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AccountCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AccountCheck, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::AccountCheck, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::AccountCheck, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AccountCheckRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AccountCheckRs, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RobotState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RobotState, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::RobotState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RobotSyncState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RobotSyncState, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RobotCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RobotCreate, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLittle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLittle, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLittle, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLittle, level_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLittle, template_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerList, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerList, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayerList, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayer, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayer, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayerRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayerRs, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::QueryPlayerRs, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllAccount, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllAccountRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllAccountRet, account_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllPlayer, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllPlayerRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadAllPlayerRet, player_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadPlayer, player_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::LoadPlayer, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadPlayerRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoadPlayerRet, player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLogin, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLogin, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLogin, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLoginRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLoginRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerLoginRet, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerCreate, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerCreate, template_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerCreateRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerCreateRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::PlayerCreateRet, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SelectPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SelectPlayer, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SelectPlayerRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SelectPlayerRs, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SavePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SavePlayer, save_mode_),
  PROTOBUF_FIELD_OFFSET(::Proto::SavePlayer, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldSyncToGather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldSyncToGather, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldSyncToGather, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldSyncToGather, online_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldSyncToGather, is_remove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldProxySyncToGather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldProxySyncToGather, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldProxySyncToGather, is_remove_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldProxySyncToGather, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldProxySyncToGather, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, return_code_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, token_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, ip_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, port_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameToken, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByToken, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByToken, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByToken, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByToken, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByToken, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByTokenRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::LoginByTokenRs, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TokenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TokenInfo, token_),
  PROTOBUF_FIELD_OFFSET(::Proto::TokenInfo, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayer, app_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayer, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayer, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::EnterWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::EnterWorld, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnterWorld, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnterWorld, position_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnterWorld, rotation_),
  PROTOBUF_FIELD_OFFSET(::Proto::EnterWorld, world_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::EnterHome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::EnterHome, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryDungeonBySn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryDungeonBySn, world_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryDungeonBySnRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryDungeonBySnRs, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::QueryDungeonBySnRs, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestWorld, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestWorld, for_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::CreateWorld, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateWorld, alive_),
  PROTOBUF_FIELD_OFFSET(::Proto::CreateWorld, for_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DestoryWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DestoryWorld, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::DestoryWorld, for_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorld, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorld, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorld, for_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestCreateWorldProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestCreateWorldProxy, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestCreateWorldProxy, world_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorldProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorldProxy, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorldProxy, world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::BroadcastCreateWorldProxy, for_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryWorldData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryWorldData, world_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::QueryWorldData, world_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryWorldDataRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryWorldDataRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::QueryWorldDataRet, world_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldData, world_data_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldData, die_sn_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldAction, target_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldAction, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::WorldAction, action_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldActionRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::WorldActionRet, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldAction, player_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldAction, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldAction, target_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncWorldAction, action_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RemovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RemovePlayer, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestSyncPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestSyncPlayer, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Role, name_),
  PROTOBUF_FIELD_OFFSET(::Proto::Role, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::Role, template_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::Role, level_),
  PROTOBUF_FIELD_OFFSET(::Proto::Role, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RoleAppear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RoleAppear, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RoleDisAppear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RoleDisAppear, sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Teleport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Teleport, last_world_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::Teleport, player_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::Teleport, account_),
  PROTOBUF_FIELD_OFFSET(::Proto::Teleport, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TeleportAfter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TeleportAfter, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::MoveByRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::MoveByRotation, player_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::MoveByRotation, position_),
  PROTOBUF_FIELD_OFFSET(::Proto::MoveByRotation, rotation_),
  PROTOBUF_FIELD_OFFSET(::Proto::MoveByRotation, direction_),
  PROTOBUF_FIELD_OFFSET(::Proto::MoveByRotation, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AddItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AddItem, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::AddItem, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AddItemRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AddItemRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::AddItemRet, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::AddItemRet, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AddExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AddExp, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AddExpRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AddExpRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::AddExpRet, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Dungeon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Dungeon, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::Dungeon, star_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DungeonRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DungeonRs, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::DungeonRs, item_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Chat, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::Chat, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::Chat, cross_),
  PROTOBUF_FIELD_OFFSET(::Proto::Chat, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::Chat, chat_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ChatRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ChatRet, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncChat, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncChat, chats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecord, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecord, chat_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecord, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecord, my_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecord, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, chat_time_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, chat_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, cross_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, chat_msg_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, sender_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, sender_name_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, recver_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::STChatInfo, recver_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecordRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecordRet, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecordRet, chats_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetChatRecordRet, my_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryAllPlayerName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::STPlayerSnName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::STPlayerSnName, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::STPlayerSnName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryAllPlayerNameRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QueryAllPlayerNameRet, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::Mute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::Mute, cross_),
  PROTOBUF_FIELD_OFFSET(::Proto::Mute, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::Mute, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::Mute, mute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::MuteRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::MuteRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::MuteRet, operator_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::MuteRet, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::MuteRet, mute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfo, cross_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfo, target_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, cross_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, target_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, target_name_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, in_blacklist_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, in_mute_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, res_pic_),
  PROTOBUF_FIELD_OFFSET(::Proto::GetTargetInfoRet, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BoardcastLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BoardcastLogin, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::BoardcastLogin, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::STFriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::STFriendInfo, player_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::STFriendInfo, level_),
  PROTOBUF_FIELD_OFFSET(::Proto::STFriendInfo, vip_),
  PROTOBUF_FIELD_OFFSET(::Proto::STFriendInfo, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GetFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::GetFriendListRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GetFriendListRet, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AddFriend, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::AddFriend, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::AddFriendRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::AddFriendRet, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DelFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DelFriend, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DelFriendRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DelFriendRet, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RefreshFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RefreshFriendRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RefreshFriendRet, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinGuild, guild_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinGuildRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinGuildRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::JoinGuildRet, guild_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitGuild, guild_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitGuildRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitGuildRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::QuitGuildRet, guild_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinTeam, team_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinTeamRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::JoinTeamRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::JoinTeamRet, team_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitTeam, team_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitTeamRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::QuitTeamRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::QuitTeamRet, team_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayerProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayerProperty, property_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayerProperty, value_),
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayerProperty, value_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayerPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::SyncPlayerPropertyList, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestChangeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestChangeTeam, team_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestChangeTeam, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReseponseChangeTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReseponseChangeTeam, team_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReseponseChangeTeam, cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardLevelUp, cardid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardLevelUp, isonekey_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardLevelUp, material_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardLevelUp, operator_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardStar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardStar, cardid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardStar, materialitems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardQlt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardQlt, qltcardid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardQlt, materialitems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardLevel, rescode_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardLevel, isonekey_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardLevel, newcard_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardLevel, detalfightpower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardStar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardStar, starrescode_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardStar, newcard_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardStar, detalfightpower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardQlt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardQlt, qltrescode_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardQlt, newcard_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardQlt, detalfightpower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResInten, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResInten, myintenrescode_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResInten, newcard_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResInten, detalfightpower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReuqestGMAddItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReuqestGMAddItem, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReuqestGMAddItem, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ItemChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ItemChange, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::ItemChange, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::ItemChange, num_),
  PROTOBUF_FIELD_OFFSET(::Proto::ItemChange, delta_),
  PROTOBUF_FIELD_OFFSET(::Proto::ItemChange, bagindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange_ChangeShow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange_ChangeShow, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange_ChangeShow, delta_),
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange_ChangeShow, replace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange, changes_),
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange, source_),
  PROTOBUF_FIELD_OFFSET(::Proto::PushItemChange, show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestUseItem, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestUseItem, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestSortBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSortBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSortBag, bags_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSortBag, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestSellItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestSellItem, sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestSellItem, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSellItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestGachaPull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::RequestGachaPull, poolid_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestGachaPull, single_),
  PROTOBUF_FIELD_OFFSET(::Proto::RequestGachaPull, costtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseGachaPull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseGachaPull, items_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseGachaPull, poolid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseGachaPull, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayer, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayer, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayer, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayerRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayerRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryPlayerRet, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayer, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayer, channel_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayer, uuid_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayer, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayerRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayerRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBCreatePlayerRet, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSavePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSavePlayer, save_mode_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBSavePlayer, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSavePlayerRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSavePlayerRet, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveListRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveListRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveListRet, player_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveWorld, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveWorldRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBSaveWorldRet, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryWorld, server_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryWorld, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryWorldRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryWorldRet, ret_),
  PROTOBUF_FIELD_OFFSET(::Proto::DBQueryWorldRet, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleDamage, pos_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleDamage, damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleAction, owner_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleAction, pos_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleAction, skill_id_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleAction, action_type_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleAction, damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleActionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleActionList, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleJoin, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleCreate, monster_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleView, player_sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleRs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleRs, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleTeam, owner_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleTeam, pos_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleTeam, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleSyncTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleSyncTeam, team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleBegin, owner_sn_),
  PROTOBUF_FIELD_OFFSET(::Proto::BattleBegin, monster_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::BattleEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqeustSkillLvUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqeustSkillLvUp, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSkillLvUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSkillLvUp, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseSkillLvUp, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqeustEquipmentLvUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqeustEquipmentLvUp, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseEquipmentLvUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseEquipmentLvUp, id_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResponseEquipmentLvUp, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardSkillLvUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardSkillLvUp, cardid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ReqCardSkillLvUp, requestskill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardSkillLvUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardSkillLvUp, rescode_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardSkillLvUp, rescardid_),
  PROTOBUF_FIELD_OFFSET(::Proto::ResCardSkillLvUp, resskilllvup_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Proto::NullMsg)},
  { 5, -1, sizeof(::Proto::CmdThread)},
  { 11, -1, sizeof(::Proto::CmdApp)},
  { 17, -1, sizeof(::Proto::Efficiency)},
  { 25, -1, sizeof(::Proto::AppRegister)},
  { 32, -1, sizeof(::Proto::AppInfoSync)},
  { 40, -1, sizeof(::Proto::AppInfoListSync)},
  { 46, -1, sizeof(::Proto::NetworkDisconnect)},
  { 53, -1, sizeof(::Proto::TagValue)},
  { 60, -1, sizeof(::Proto::Tag)},
  { 67, -1, sizeof(::Proto::NetworkConnect)},
  { 76, -1, sizeof(::Proto::Http)},
  { 83, -1, sizeof(::Proto::CreateComponentParam)},
  { 92, -1, sizeof(::Proto::CreateComponent)},
  { 102, -1, sizeof(::Proto::RemoveComponent)},
  { 108, -1, sizeof(::Proto::CreateSystem)},
  { 115, -1, sizeof(::Proto::AccountCheck)},
  { 123, -1, sizeof(::Proto::AccountCheckRs)},
  { 129, -1, sizeof(::Proto::RobotState)},
  { 136, -1, sizeof(::Proto::RobotSyncState)},
  { 142, -1, sizeof(::Proto::RobotCreate)},
  { 148, -1, sizeof(::Proto::PlayerLittle)},
  { 157, -1, sizeof(::Proto::PlayerList)},
  { 164, -1, sizeof(::Proto::QueryPlayerList)},
  { 170, -1, sizeof(::Proto::QueryPlayer)},
  { 177, -1, sizeof(::Proto::QueryPlayerRs)},
  { 184, -1, sizeof(::Proto::LoadAllAccount)},
  { 190, -1, sizeof(::Proto::LoadAllAccountRet)},
  { 196, -1, sizeof(::Proto::LoadAllPlayer)},
  { 202, -1, sizeof(::Proto::LoadAllPlayerRet)},
  { 208, -1, sizeof(::Proto::LoadPlayer)},
  { 215, -1, sizeof(::Proto::LoadPlayerRet)},
  { 221, -1, sizeof(::Proto::PlayerLogin)},
  { 229, -1, sizeof(::Proto::PlayerLoginRet)},
  { 236, -1, sizeof(::Proto::PlayerCreate)},
  { 243, -1, sizeof(::Proto::PlayerCreateRet)},
  { 250, -1, sizeof(::Proto::SelectPlayer)},
  { 256, -1, sizeof(::Proto::SelectPlayerRs)},
  { 262, -1, sizeof(::Proto::SavePlayer)},
  { 269, -1, sizeof(::Proto::WorldSyncToGather)},
  { 278, -1, sizeof(::Proto::WorldProxySyncToGather)},
  { 287, -1, sizeof(::Proto::GameToken)},
  { 299, -1, sizeof(::Proto::LoginByToken)},
  { 309, -1, sizeof(::Proto::LoginByTokenRs)},
  { 315, -1, sizeof(::Proto::TokenInfo)},
  { 322, -1, sizeof(::Proto::SyncPlayer)},
  { 330, -1, sizeof(::Proto::EnterWorld)},
  { 340, -1, sizeof(::Proto::EnterHome)},
  { 346, -1, sizeof(::Proto::QueryDungeonBySn)},
  { 352, -1, sizeof(::Proto::QueryDungeonBySnRs)},
  { 359, -1, sizeof(::Proto::RequestWorld)},
  { 366, -1, sizeof(::Proto::CreateWorld)},
  { 374, -1, sizeof(::Proto::DestoryWorld)},
  { 381, -1, sizeof(::Proto::BroadcastCreateWorld)},
  { 389, -1, sizeof(::Proto::RequestCreateWorldProxy)},
  { 396, -1, sizeof(::Proto::BroadcastCreateWorldProxy)},
  { 404, -1, sizeof(::Proto::QueryWorldData)},
  { 411, -1, sizeof(::Proto::QueryWorldDataRet)},
  { 418, -1, sizeof(::Proto::SyncWorldData)},
  { 425, -1, sizeof(::Proto::WorldAction)},
  { 433, -1, sizeof(::Proto::WorldActionRet)},
  { 439, -1, sizeof(::Proto::SyncWorldAction)},
  { 448, -1, sizeof(::Proto::RemovePlayer)},
  { 454, -1, sizeof(::Proto::RequestSyncPlayer)},
  { 460, -1, sizeof(::Proto::Role)},
  { 470, -1, sizeof(::Proto::RoleAppear)},
  { 476, -1, sizeof(::Proto::RoleDisAppear)},
  { 482, -1, sizeof(::Proto::Teleport)},
  { 491, -1, sizeof(::Proto::TeleportAfter)},
  { 497, -1, sizeof(::Proto::MoveByRotation)},
  { 507, -1, sizeof(::Proto::AddItem)},
  { 514, -1, sizeof(::Proto::AddItemRet)},
  { 522, -1, sizeof(::Proto::AddExp)},
  { 528, -1, sizeof(::Proto::AddExpRet)},
  { 535, -1, sizeof(::Proto::Dungeon)},
  { 542, -1, sizeof(::Proto::DungeonRs)},
  { 549, -1, sizeof(::Proto::Chat)},
  { 559, -1, sizeof(::Proto::ChatRet)},
  { 565, -1, sizeof(::Proto::SyncChat)},
  { 572, -1, sizeof(::Proto::GetChatRecord)},
  { 582, -1, sizeof(::Proto::STChatInfo)},
  { 597, -1, sizeof(::Proto::GetChatRecordRet)},
  { 605, -1, sizeof(::Proto::QueryAllPlayerName)},
  { 610, -1, sizeof(::Proto::STPlayerSnName)},
  { 617, -1, sizeof(::Proto::QueryAllPlayerNameRet)},
  { 623, -1, sizeof(::Proto::Mute)},
  { 632, -1, sizeof(::Proto::MuteRet)},
  { 641, -1, sizeof(::Proto::GetTargetInfo)},
  { 649, -1, sizeof(::Proto::GetTargetInfoRet)},
  { 663, -1, sizeof(::Proto::BoardcastLogin)},
  { 670, -1, sizeof(::Proto::STFriendInfo)},
  { 679, -1, sizeof(::Proto::GetFriendList)},
  { 684, -1, sizeof(::Proto::GetFriendListRet)},
  { 690, -1, sizeof(::Proto::AddFriend)},
  { 697, -1, sizeof(::Proto::AddFriendRet)},
  { 703, -1, sizeof(::Proto::DelFriend)},
  { 709, -1, sizeof(::Proto::DelFriendRet)},
  { 715, -1, sizeof(::Proto::RefreshFriend)},
  { 720, -1, sizeof(::Proto::RefreshFriendRet)},
  { 726, -1, sizeof(::Proto::JoinGuild)},
  { 732, -1, sizeof(::Proto::JoinGuildRet)},
  { 739, -1, sizeof(::Proto::QuitGuild)},
  { 745, -1, sizeof(::Proto::QuitGuildRet)},
  { 752, -1, sizeof(::Proto::JoinTeam)},
  { 758, -1, sizeof(::Proto::JoinTeamRet)},
  { 765, -1, sizeof(::Proto::QuitTeam)},
  { 771, -1, sizeof(::Proto::QuitTeamRet)},
  { 778, -1, sizeof(::Proto::SyncPlayerProperty)},
  { 786, -1, sizeof(::Proto::SyncPlayerPropertyList)},
  { 792, -1, sizeof(::Proto::RequestChangeTeam)},
  { 799, -1, sizeof(::Proto::ReseponseChangeTeam)},
  { 806, -1, sizeof(::Proto::ReqCardLevelUp)},
  { 815, -1, sizeof(::Proto::ReqCardStar)},
  { 822, -1, sizeof(::Proto::ReqCardQlt)},
  { 829, -1, sizeof(::Proto::ResCardLevel)},
  { 838, -1, sizeof(::Proto::ResCardStar)},
  { 846, -1, sizeof(::Proto::ResCardQlt)},
  { 854, -1, sizeof(::Proto::ResInten)},
  { 862, -1, sizeof(::Proto::ReuqestGMAddItem)},
  { 869, -1, sizeof(::Proto::ItemChange)},
  { 879, -1, sizeof(::Proto::PushItemChange_ChangeShow)},
  { 887, -1, sizeof(::Proto::PushItemChange)},
  { 895, -1, sizeof(::Proto::RequestUseItem)},
  { 902, -1, sizeof(::Proto::ResponseUseItem)},
  { 907, -1, sizeof(::Proto::RequestSortBag)},
  { 912, -1, sizeof(::Proto::ResponseSortBag)},
  { 919, -1, sizeof(::Proto::RequestSellItem)},
  { 926, -1, sizeof(::Proto::ResponseSellItem)},
  { 931, -1, sizeof(::Proto::RequestGachaPull)},
  { 939, -1, sizeof(::Proto::ResponseGachaPull)},
  { 947, -1, sizeof(::Proto::DBQueryPlayer)},
  { 955, -1, sizeof(::Proto::DBQueryPlayerRet)},
  { 962, -1, sizeof(::Proto::DBCreatePlayer)},
  { 971, -1, sizeof(::Proto::DBCreatePlayerRet)},
  { 978, -1, sizeof(::Proto::DBSavePlayer)},
  { 985, -1, sizeof(::Proto::DBSavePlayerRet)},
  { 991, -1, sizeof(::Proto::DBSaveList)},
  { 996, -1, sizeof(::Proto::DBSaveListRet)},
  { 1003, -1, sizeof(::Proto::DBSaveWorld)},
  { 1009, -1, sizeof(::Proto::DBSaveWorldRet)},
  { 1015, -1, sizeof(::Proto::DBQueryWorld)},
  { 1022, -1, sizeof(::Proto::DBQueryWorldRet)},
  { 1029, -1, sizeof(::Proto::BattleDamage)},
  { 1036, -1, sizeof(::Proto::BattleAction)},
  { 1046, -1, sizeof(::Proto::BattleActionList)},
  { 1052, -1, sizeof(::Proto::BattleJoin)},
  { 1058, -1, sizeof(::Proto::BattleCreate)},
  { 1064, -1, sizeof(::Proto::BattleView)},
  { 1070, -1, sizeof(::Proto::BattleRs)},
  { 1076, -1, sizeof(::Proto::BattleTeam)},
  { 1084, -1, sizeof(::Proto::BattleSyncTeam)},
  { 1090, -1, sizeof(::Proto::BattleBegin)},
  { 1097, -1, sizeof(::Proto::BattleEnd)},
  { 1102, -1, sizeof(::Proto::ReqeustSkillLvUp)},
  { 1108, -1, sizeof(::Proto::ResponseSkillLvUp)},
  { 1115, -1, sizeof(::Proto::ReqeustEquipmentLvUp)},
  { 1121, -1, sizeof(::Proto::ResponseEquipmentLvUp)},
  { 1128, -1, sizeof(::Proto::ReqCardSkillLvUp)},
  { 1135, -1, sizeof(::Proto::ResCardSkillLvUp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_NullMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_CmdThread_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_CmdApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Efficiency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppInfoSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AppInfoListSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_NetworkDisconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TagValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_NetworkConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Http_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_CreateComponentParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_CreateComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RemoveComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_CreateSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AccountCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AccountCheckRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RobotState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RobotSyncState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RobotCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PlayerLittle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PlayerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryPlayerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryPlayerRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoadAllAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoadAllAccountRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoadAllPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoadAllPlayerRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoadPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoadPlayerRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PlayerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PlayerLoginRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PlayerCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PlayerCreateRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SelectPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SelectPlayerRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SavePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_WorldSyncToGather_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_WorldProxySyncToGather_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GameToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoginByToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_LoginByTokenRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TokenInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SyncPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_EnterWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_EnterHome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryDungeonBySn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryDungeonBySnRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_CreateWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DestoryWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BroadcastCreateWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestCreateWorldProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BroadcastCreateWorldProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryWorldData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryWorldDataRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SyncWorldData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_WorldAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_WorldActionRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SyncWorldAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RemovePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestSyncPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Role_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RoleAppear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RoleDisAppear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Teleport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TeleportAfter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_MoveByRotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AddItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AddItemRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AddExp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AddExpRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Dungeon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DungeonRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Chat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ChatRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SyncChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GetChatRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_STChatInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GetChatRecordRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryAllPlayerName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_STPlayerSnName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QueryAllPlayerNameRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_Mute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_MuteRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GetTargetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GetTargetInfoRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BoardcastLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_STFriendInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GetFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_GetFriendListRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_AddFriendRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DelFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DelFriendRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RefreshFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RefreshFriendRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_JoinGuild_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_JoinGuildRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QuitGuild_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QuitGuildRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_JoinTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_JoinTeamRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QuitTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_QuitTeamRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SyncPlayerProperty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_SyncPlayerPropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestChangeTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReseponseChangeTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReqCardLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReqCardStar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReqCardQlt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResCardLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResCardStar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResCardQlt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResInten_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReuqestGMAddItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ItemChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PushItemChange_ChangeShow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_PushItemChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResponseUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestSortBag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResponseSortBag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestSellItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResponseSellItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_RequestGachaPull_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResponseGachaPull_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBQueryPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBQueryPlayerRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBCreatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBCreatePlayerRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBSavePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBSavePlayerRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBSaveList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBSaveListRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBSaveWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBSaveWorldRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBQueryWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_DBQueryWorldRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleActionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleJoin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleRs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleSyncTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleBegin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_BattleEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReqeustSkillLvUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResponseSkillLvUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReqeustEquipmentLvUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResponseEquipmentLvUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ReqCardSkillLvUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_ResCardSkillLvUp_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\005Proto\032\010db.proto\032\014x_enum.pro"
  "to\"\t\n\007NullMsg\"e\n\tCmdThread\022*\n\010cmd_type\030\001"
  " \001(\0162\030.Proto.CmdThread.CmdType\",\n\007CmdTyp"
  "e\022\n\n\006Entity\020\000\022\010\n\004Pool\020\001\022\013\n\007Connect\020\002\"F\n\006"
  "CmdApp\022\'\n\010cmd_type\030\001 \001(\0162\025.Proto.CmdApp."
  "CmdType\"\023\n\007CmdType\022\010\n\004Info\020\000\"B\n\nEfficien"
  "cy\022\023\n\013thread_type\030\001 \001(\005\022\021\n\tthread_id\030\002 \001"
  "(\t\022\014\n\004time\030\003 \001(\003\"\'\n\013AppRegister\022\014\n\004type\030"
  "\001 \001(\005\022\n\n\002id\030\002 \001(\005\"\?\n\013AppInfoSync\022\016\n\006app_"
  "id\030\001 \001(\005\022\020\n\010app_type\030\002 \001(\005\022\016\n\006online\030\003 \001"
  "(\005\"3\n\017AppInfoListSync\022 \n\004apps\030\001 \003(\0132\022.Pr"
  "oto.AppInfoSync\"9\n\021NetworkDisconnect\022\024\n\014"
  "network_type\030\001 \001(\005\022\016\n\006socket\030\002 \001(\005\"2\n\010Ta"
  "gValue\022\023\n\013value_int64\030\001 \001(\004\022\021\n\tvalue_str"
  "\030\002 \001(\t\";\n\003Tag\022\020\n\010tag_type\030\001 \001(\005\022\"\n\ttag_v"
  "alue\030\002 \001(\0132\017.Proto.TagValue\"Y\n\016NetworkCo"
  "nnect\022\024\n\014network_type\030\001 \001(\005\022\027\n\003tag\030\002 \003(\013"
  "2\n.Proto.Tag\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\")"
  "\n\004Http\022\014\n\004body\030\001 \001(\t\022\023\n\013status_code\030\002 \001("
  "\005\"\270\001\n\024CreateComponentParam\0223\n\004type\030\001 \001(\016"
  "2%.Proto.CreateComponentParam.ParamType\022"
  "\021\n\tint_param\030\002 \001(\005\022\024\n\014string_param\030\003 \001(\t"
  "\022\024\n\014uint64_param\030\004 \001(\004\",\n\tParamType\022\007\n\003I"
  "nt\020\000\022\n\n\006String\020\001\022\n\n\006UInt64\020\002\"\206\001\n\017CreateC"
  "omponent\022\023\n\013thread_type\030\001 \001(\005\022\022\n\nclass_n"
  "ame\030\002 \001(\t\022+\n\006params\030\003 \003(\0132\033.Proto.Create"
  "ComponentParam\022\n\n\002sn\030\004 \001(\004\022\021\n\tis_to_all\030"
  "\005 \001(\010\"\035\n\017RemoveComponent\022\n\n\002sn\030\001 \001(\004\"8\n\014"
  "CreateSystem\022\023\n\013thread_type\030\001 \001(\005\022\023\n\013sys"
  "tem_name\030\002 \001(\t\"@\n\014AccountCheck\022\021\n\tserver"
  "_id\030\001 \001(\005\022\017\n\007channel\030\002 \001(\t\022\014\n\004uuid\030\003 \001(\t"
  "\"D\n\016AccountCheckRs\0222\n\013return_code\030\001 \001(\0162"
  "\035.Proto.AccountCheckReturnCode\",\n\nRobotS"
  "tate\022\017\n\007account\030\001 \001(\t\022\r\n\005state\030\002 \001(\005\"3\n\016"
  "RobotSyncState\022!\n\006states\030\001 \003(\0132\021.Proto.R"
  "obotState\"\036\n\013RobotCreate\022\017\n\007account\030\001 \001("
  "\t\"L\n\014PlayerLittle\022\n\n\002sn\030\001 \001(\004\022\014\n\004name\030\002 "
  "\001(\t\022\r\n\005level\030\004 \001(\005\022\023\n\013template_id\030\005 \001(\005\""
  "B\n\nPlayerList\022\017\n\007account\030\001 \001(\t\022#\n\006player"
  "\030\002 \003(\0132\023.Proto.PlayerLittle\"\"\n\017QueryPlay"
  "erList\022\017\n\007account\030\001 \001(\t\"1\n\013QueryPlayer\022\017"
  "\n\007account\030\001 \001(\t\022\021\n\tplayer_sn\030\002 \001(\004\"\?\n\rQu"
  "eryPlayerRs\022\017\n\007account\030\001 \001(\t\022\035\n\006player\030\002"
  " \001(\0132\r.Proto.Player\"#\n\016LoadAllAccount\022\021\n"
  "\tserver_id\030\001 \003(\005\";\n\021LoadAllAccountRet\022&\n"
  "\014account_list\030\001 \003(\0132\020.Proto.DBAccount\"\"\n"
  "\rLoadAllPlayer\022\021\n\tserver_id\030\001 \003(\005\"6\n\020Loa"
  "dAllPlayerRet\022\"\n\013player_list\030\001 \003(\0132\r.Pro"
  "to.Player\"0\n\nLoadPlayer\022\021\n\tplayer_sn\030\001 \001"
  "(\003\022\017\n\007account\030\002 \001(\t\"3\n\rLoadPlayerRet\022\"\n\013"
  "player_info\030\001 \001(\0132\r.Proto.Player\"\?\n\013Play"
  "erLogin\022\021\n\tserver_id\030\001 \001(\005\022\017\n\007channel\030\002 "
  "\001(\t\022\014\n\004uuid\030\003 \001(\t\"Q\n\016PlayerLoginRet\022 \n\003r"
  "et\030\001 \001(\0162\023.Proto.LoginRetCode\022\035\n\006player\030"
  "\002 \001(\0132\r.Proto.Player\"1\n\014PlayerCreate\022\014\n\004"
  "name\030\001 \001(\t\022\023\n\013template_id\030\003 \001(\005\"S\n\017Playe"
  "rCreateRet\022!\n\003ret\030\001 \001(\0162\024.Proto.CreateRe"
  "tCode\022\035\n\006player\030\002 \001(\0132\r.Proto.Player\"!\n\014"
  "SelectPlayer\022\021\n\tplayer_sn\030\001 \001(\004\"\215\001\n\016Sele"
  "ctPlayerRs\022A\n\013return_code\030\001 \001(\0162,.Proto."
  "SelectPlayerRs.SelectPlayerReturnCode\"8\n"
  "\026SelectPlayerReturnCode\022\013\n\007SPRC_OK\020\000\022\021\n\r"
  "SPRC_NotFound\020\001\"P\n\nSavePlayer\022#\n\tsave_mo"
  "de\030\001 \001(\0162\020.Proto.ESaveMode\022\035\n\006player\030\002 \001"
  "(\0132\r.Proto.Player\"Z\n\021WorldSyncToGather\022\020"
  "\n\010world_sn\030\001 \001(\004\022\020\n\010world_id\030\002 \001(\005\022\016\n\006on"
  "line\030\003 \001(\005\022\021\n\tis_remove\030\004 \001(\010\"_\n\026WorldPr"
  "oxySyncToGather\022\020\n\010world_sn\030\001 \001(\004\022\021\n\tis_"
  "remove\030\002 \001(\010\022\020\n\010world_id\030\003 \001(\005\022\016\n\006online"
  "\030\004 \001(\005\"\317\001\n\tGameToken\0220\n\013return_code\030\001 \001("
  "\0162\033.Proto.GameToken.ReturnCode\022\r\n\005token\030"
  "\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\021\n\tserve"
  "r_id\030\005 \001(\005\022\017\n\007channel\030\006 \001(\t\022\014\n\004uuid\030\007 \001("
  "\t\"5\n\nReturnCode\022\020\n\014GameToken_OK\020\000\022\025\n\021Gam"
  "eToken_NO_GAME\020\001\"`\n\014LoginByToken\022\021\n\tserv"
  "er_id\030\001 \001(\005\022\017\n\007channel\030\002 \001(\t\022\014\n\004uuid\030\003 \001"
  "(\t\022\017\n\007account\030\004 \001(\t\022\r\n\005token\030\005 \001(\t\"\246\001\n\016L"
  "oginByTokenRs\0225\n\013return_code\030\001 \001(\0162 .Pro"
  "to.LoginByTokenRs.ReturnCode\"]\n\nReturnCo"
  "de\022\013\n\007LGRC_OK\020\000\022\020\n\014LGRC_UNKONWN\020\001\022\032\n\026LGR"
  "C_NOT_FOUND_ACCOUNT\020\002\022\024\n\020LGRC_TOKEN_WRON"
  "G\020\003\"-\n\tTokenInfo\022\r\n\005token\030\001 \001(\t\022\021\n\tplaye"
  "r_sn\030\002 \001(\004\"L\n\nSyncPlayer\022\016\n\006app_id\030\001 \001(\005"
  "\022\017\n\007account\030\002 \001(\t\022\035\n\006player\030\003 \001(\0132\r.Prot"
  "o.Player\"\234\001\n\nEnterWorld\022\020\n\010world_id\030\001 \001("
  "\005\022\020\n\010world_sn\030\002 \001(\004\022 \n\010position\030\003 \001(\0132\016."
  "Proto.Vector3\022 \n\010rotation\030\004 \001(\0132\016.Proto."
  "Vector3\022&\n\nworld_data\030\005 \001(\0132\022.Proto.DBWo"
  "rldData\"\036\n\tEnterHome\022\021\n\tplayer_sn\030\001 \001(\004\""
  "$\n\020QueryDungeonBySn\022\020\n\010world_sn\030\001 \001(\004\"\231\001"
  "\n\022QueryDungeonBySnRs\022\020\n\010world_sn\030\001 \001(\004\0229"
  "\n\013return_code\030\003 \001(\0162$.Proto.QueryDungeon"
  "BySnRs.ReturnCode\"6\n\nReturnCode\022\021\n\rQuery"
  "World_OK\020\000\022\025\n\021QueryWorld_Failed\020\001\"4\n\014Req"
  "uestWorld\022\020\n\010world_id\030\001 \001(\005\022\022\n\nfor_playe"
  "r\030\002 \001(\004\"B\n\013CreateWorld\022\020\n\010world_id\030\001 \001(\005"
  "\022\r\n\005alive\030\002 \001(\005\022\022\n\nfor_player\030\003 \001(\004\"4\n\014D"
  "estoryWorld\022\020\n\010world_sn\030\001 \001(\004\022\022\n\nfor_pla"
  "yer\030\002 \001(\004\"N\n\024BroadcastCreateWorld\022\020\n\010wor"
  "ld_id\030\001 \001(\005\022\020\n\010world_sn\030\002 \001(\004\022\022\n\nfor_pla"
  "yer\030\004 \001(\004\"=\n\027RequestCreateWorldProxy\022\020\n\010"
  "world_id\030\001 \001(\005\022\020\n\010world_sn\030\002 \001(\004\"S\n\031Broa"
  "dcastCreateWorldProxy\022\020\n\010world_id\030\001 \001(\005\022"
  "\020\n\010world_sn\030\002 \001(\004\022\022\n\nfor_player\030\003 \001(\004\"4\n"
  "\016QueryWorldData\022\020\n\010world_id\030\001 \001(\005\022\020\n\010wor"
  "ld_sn\030\002 \001(\004\"H\n\021QueryWorldDataRet\022\013\n\003ret\030"
  "\001 \001(\005\022&\n\nworld_data\030\002 \001(\0132\022.Proto.DBWorl"
  "dData\"L\n\rSyncWorldData\022&\n\nworld_data\030\001 \001"
  "(\0132\022.Proto.DBWorldData\022\023\n\013die_sn_list\030\002 "
  "\003(\003\"J\n\013WorldAction\022\023\n\013target_type\030\001 \001(\005\022"
  "\021\n\ttarget_sn\030\002 \001(\003\022\023\n\013action_type\030\003 \001(\005\""
  "\035\n\016WorldActionRet\022\013\n\003ret\030\001 \001(\005\"a\n\017SyncWo"
  "rldAction\022\021\n\tplayer_sn\030\001 \001(\003\022\021\n\ttarget_s"
  "n\030\002 \001(\003\022\023\n\013target_type\030\003 \001(\005\022\023\n\013action_t"
  "ype\030\004 \001(\005\"!\n\014RemovePlayer\022\021\n\tplayer_sn\030\001"
  " \001(\004\"&\n\021RequestSyncPlayer\022\021\n\tplayer_sn\030\001"
  " \001(\004\"f\n\004Role\022\014\n\004name\030\001 \001(\t\022\n\n\002sn\030\002 \001(\004\022\023"
  "\n\013template_id\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022 \n\010po"
  "sition\030\005 \001(\0132\016.Proto.Vector3\"\'\n\nRoleAppe"
  "ar\022\031\n\004role\030\001 \003(\0132\013.Proto.Role\"\033\n\rRoleDis"
  "Appear\022\n\n\002sn\030\001 \001(\004\"d\n\010Teleport\022\025\n\rlast_w"
  "orld_sn\030\001 \001(\004\022\021\n\tplayer_sn\030\002 \001(\004\022\017\n\007acco"
  "unt\030\003 \001(\t\022\035\n\006player\030\004 \001(\0132\r.Proto.Player"
  "\"\"\n\rTeleportAfter\022\021\n\tplayer_sn\030\001 \001(\004\"\231\001\n"
  "\016MoveByRotation\022\021\n\tplayer_sn\030\001 \001(\004\022 \n\010po"
  "sition\030\002 \001(\0132\016.Proto.Vector3\022 \n\010rotation"
  "\030\003 \001(\0132\016.Proto.Vector3\022!\n\tdirection\030\004 \001("
  "\0132\016.Proto.Vector3\022\r\n\005value\030\005 \001(\002\"\"\n\007AddI"
  "tem\022\n\n\002id\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"2\n\nAddItemR"
  "et\022\013\n\003ret\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\013\n\003num\030\003 \001(\005"
  "\"\025\n\006AddExp\022\013\n\003exp\030\001 \001(\005\"%\n\tAddExpRet\022\013\n\003"
  "ret\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\"#\n\007Dungeon\022\n\n\002id\030"
  "\001 \001(\005\022\014\n\004star\030\002 \001(\005\"<\n\tDungeonRs\022\013\n\003ret\030"
  "\001 \001(\005\022\"\n\titem_list\030\002 \003(\0132\017.Proto.ItemBas"
  "e\"s\n\004Chat\022$\n\007channel\030\001 \001(\0162\023.Proto.eChat"
  "Channel\022\021\n\ttarget_sn\030\002 \001(\003\022\r\n\005cross\030\003 \001("
  "\010\022\021\n\tserver_id\030\004 \001(\005\022\020\n\010chat_msg\030\005 \001(\014\"\026"
  "\n\007ChatRet\022\013\n\003ret\030\001 \001(\005\"R\n\010SyncChat\022$\n\007ch"
  "annel\030\001 \001(\0162\023.Proto.eChatChannel\022 \n\005chat"
  "s\030\002 \003(\0132\021.Proto.STChatInfo\"{\n\rGetChatRec"
  "ord\022$\n\007channel\030\001 \001(\0162\023.Proto.eChatChanne"
  "l\022\017\n\007chat_id\030\002 \001(\003\022\021\n\ttarget_sn\030\003 \001(\003\022\r\n"
  "\005my_sn\030\004 \001(\003\022\021\n\tserver_id\030\005 \001(\005\"\332\001\n\nSTCh"
  "atInfo\022$\n\007channel\030\001 \001(\0162\023.Proto.eChatCha"
  "nnel\022\021\n\tchat_time\030\002 \001(\003\022\017\n\007chat_id\030\003 \001(\003"
  "\022\r\n\005cross\030\004 \001(\010\022\021\n\tserver_id\030\005 \001(\005\022\020\n\010ch"
  "at_msg\030\006 \001(\014\022\021\n\tsender_sn\030\007 \001(\003\022\023\n\013sende"
  "r_name\030\010 \001(\014\022\021\n\trecver_sn\030\t \001(\003\022\023\n\013recve"
  "r_name\030\n \001(\014\"i\n\020GetChatRecordRet\022$\n\007chan"
  "nel\030\001 \001(\0162\023.Proto.eChatChannel\022 \n\005chats\030"
  "\002 \003(\0132\021.Proto.STChatInfo\022\r\n\005my_sn\030\003 \001(\003\""
  "\024\n\022QueryAllPlayerName\"*\n\016STPlayerSnName\022"
  "\n\n\002sn\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\"=\n\025QueryAllPla"
  "yerNameRet\022$\n\005infos\030\001 \003(\0132\025.Proto.STPlay"
  "erSnName\"I\n\004Mute\022\r\n\005cross\030\001 \001(\010\022\021\n\tserve"
  "r_id\030\002 \001(\005\022\021\n\ttarget_sn\030\003 \001(\003\022\014\n\004mute\030\004 "
  "\001(\010\"L\n\007MuteRet\022\013\n\003ret\030\001 \001(\005\022\023\n\013operator_"
  "sn\030\002 \001(\003\022\021\n\ttarget_sn\030\003 \001(\003\022\014\n\004mute\030\004 \001("
  "\010\"D\n\rGetTargetInfo\022\r\n\005cross\030\001 \001(\010\022\021\n\tser"
  "ver_id\030\002 \001(\005\022\021\n\ttarget_sn\030\003 \001(\003\"\261\001\n\020GetT"
  "argetInfoRet\022\013\n\003ret\030\001 \001(\005\022\r\n\005cross\030\002 \001(\010"
  "\022\021\n\tserver_id\030\003 \001(\005\022\021\n\ttarget_sn\030\004 \001(\003\022\023"
  "\n\013target_name\030\005 \001(\014\022\024\n\014in_blacklist\030\006 \001("
  "\010\022\017\n\007in_mute\030\007 \001(\010\022\017\n\007res_pic\030\010 \001(\014\022\016\n\006o"
  "nline\030\t \001(\010\"*\n\016BoardcastLogin\022\n\n\002sn\030\001 \001("
  "\003\022\014\n\004name\030\002 \001(\014\"M\n\014STFriendInfo\022\021\n\tplaye"
  "r_sn\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\013\n\003vip\030\003 \001(\005\022\016"
  "\n\006online\030\004 \001(\005\"\017\n\rGetFriendList\"8\n\020GetFr"
  "iendListRet\022$\n\007friends\030\001 \003(\0132\023.Proto.STF"
  "riendInfo\"1\n\tAddFriend\022\021\n\tserver_id\030\001 \001("
  "\005\022\021\n\tplayer_sn\030\002 \001(\003\"\033\n\014AddFriendRet\022\013\n\003"
  "ret\030\001 \001(\005\"\036\n\tDelFriend\022\021\n\tplayer_sn\030\001 \001("
  "\005\"\033\n\014DelFriendRet\022\013\n\003ret\030\001 \001(\005\"\017\n\rRefres"
  "hFriend\"8\n\020RefreshFriendRet\022$\n\007friends\030\001"
  " \003(\0132\023.Proto.STFriendInfo\"\035\n\tJoinGuild\022\020"
  "\n\010guild_sn\030\001 \001(\003\"-\n\014JoinGuildRet\022\013\n\003ret\030"
  "\001 \001(\005\022\020\n\010guild_sn\030\002 \001(\003\"\035\n\tQuitGuild\022\020\n\010"
  "guild_sn\030\001 \001(\003\"-\n\014QuitGuildRet\022\013\n\003ret\030\001 "
  "\001(\005\022\020\n\010guild_sn\030\002 \001(\003\"\033\n\010JoinTeam\022\017\n\007tea"
  "m_sn\030\001 \001(\003\"+\n\013JoinTeamRet\022\013\n\003ret\030\001 \001(\005\022\017"
  "\n\007team_sn\030\002 \001(\003\"\033\n\010QuitTeam\022\017\n\007team_sn\030\001"
  " \001(\003\"+\n\013QuitTeamRet\022\013\n\003ret\030\001 \001(\005\022\017\n\007team"
  "_sn\030\002 \001(\003\"\277\001\n\022SyncPlayerProperty\022C\n\rprop"
  "erty_type\030\001 \001(\0162,.Proto.SyncPlayerProper"
  "ty.PlayerPropertyType\022\r\n\005value\030\002 \001(\003\022\024\n\014"
  "value_change\030\003 \001(\003\"\?\n\022PlayerPropertyType"
  "\022\t\n\005Level\020\000\022\007\n\003Exp\020\001\022\010\n\004Gold\020\002\022\013\n\007Diamon"
  "d\020\003\"G\n\026SyncPlayerPropertyList\022-\n\npropert"
  "ies\030\001 \003(\0132\031.Proto.SyncPlayerProperty\"\\\n\021"
  "RequestChangeTeam\022\'\n\tteam_type\030\001 \001(\0162\024.P"
  "roto.Team.TeamType\022\036\n\005cards\030\002 \003(\0132\017.Prot"
  "o.CardTeam\"^\n\023ReseponseChangeTeam\022\'\n\ttea"
  "m_type\030\001 \001(\0162\024.Proto.Team.TeamType\022\036\n\005ca"
  "rds\030\002 \003(\0132\017.Proto.CardTeam\"h\n\016ReqCardLev"
  "elUp\022\016\n\006cardID\030\001 \001(\005\022\020\n\010isOneKey\030\002 \001(\010\022\035"
  "\n\010material\030\003 \003(\0132\013.Proto.Item\022\025\n\roperato"
  "r_type\030\004 \001(\005\"E\n\013ReqCardStar\022\016\n\006cardID\030\001 "
  "\001(\005\022&\n\rmaterialItems\030\002 \003(\0132\017.Proto.ItemB"
  "ase\"G\n\nReqCardQlt\022\021\n\tqltCardID\030\001 \001(\005\022&\n\r"
  "materialItems\030\002 \003(\0132\017.Proto.ItemBase\"\355\001\n"
  "\014ResCardLevel\022,\n\007rescode\030\001 \001(\0162\033.Proto.R"
  "esCardLevel.ResCode\022\020\n\010isOneKey\030\002 \001(\005\022\034\n"
  "\007newcard\030\003 \001(\0132\013.Proto.Card\022\027\n\017detalfigh"
  "tpower\030\004 \001(\005\"f\n\007ResCode\022\013\n\007succeed\020\000\022\024\n\020"
  "playerlevellimit\020\001\022\n\n\006noitem\020\002\022\020\n\014cardle"
  "velmax\020\003\022\017\n\013notReachQlt\020\004\022\t\n\005error\020\005\"\317\001\n"
  "\013ResCardStar\0223\n\013starResCode\030\001 \001(\0162\036.Prot"
  "o.ResCardStar.StarResCode\022\034\n\007newcard\030\002 \001"
  "(\0132\013.Proto.Card\022\027\n\017detalfightpower\030\003 \001(\005"
  "\"T\n\013StarResCode\022\n\n\006SUCCED\020\000\022\016\n\nNOTREACHL"
  "V\020\001\022\n\n\006NOITEM\020\002\022\013\n\007STARMAX\020\003\022\020\n\014UNKNOWNE"
  "RROR\020\005\"\313\001\n\nResCardQlt\0220\n\nQLtResCode\030\001 \001("
  "\0162\034.Proto.ResCardQlt.ResQltCode\022\034\n\007newca"
  "rd\030\002 \001(\0132\013.Proto.Card\022\027\n\017detalfightpower"
  "\030\003 \001(\005\"T\n\nResQltCode\022\n\n\006SUCCED\020\000\022\020\n\014NOTR"
  "EACHSTAR\020\001\022\n\n\006NOITEM\020\002\022\n\n\006QltMAX\020\003\022\020\n\014UN"
  "KNOWNERROR\020\005\"\326\001\n\010ResInten\0224\n\016MyIntenResC"
  "ode\030\001 \001(\0162\034.Proto.ResInten.ResIntenCode\022"
  "\034\n\007newcard\030\002 \001(\0132\013.Proto.Card\022\027\n\017detalfi"
  "ghtpower\030\003 \001(\005\"]\n\014ResIntenCode\022\n\n\006SUCCED"
  "\020\000\022\025\n\021NOTREACHCONDITION\020\001\022\n\n\006NOITEM\020\002\022\014\n"
  "\010INTENMAX\020\003\022\020\n\014UNKNOWNERROR\020\005\"+\n\020Reuqest"
  "GMAddItem\022\n\n\002id\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"R\n\nIt"
  "emChange\022\n\n\002sn\030\001 \001(\004\022\n\n\002id\030\002 \001(\005\022\013\n\003num\030"
  "\003 \001(\005\022\r\n\005delta\030\004 \001(\005\022\020\n\010bagIndex\030\013 \001(\005\"\256"
  "\001\n\016PushItemChange\022\"\n\007changes\030\001 \003(\0132\021.Pro"
  "to.ItemChange\022\016\n\006source\030\002 \001(\005\022.\n\004show\030\003 "
  "\003(\0132 .Proto.PushItemChange.ChangeShow\0328\n"
  "\nChangeShow\022\n\n\002id\030\001 \001(\005\022\r\n\005delta\030\002 \001(\005\022\017"
  "\n\007replace\030\003 \001(\005\")\n\016RequestUseItem\022\n\n\002sn\030"
  "\001 \001(\003\022\013\n\003num\030\002 \001(\005\"\021\n\017ResponseUseItem\"\020\n"
  "\016RequestSortBag\";\n\017ResponseSortBag\022\014\n\004ba"
  "gs\030\001 \003(\004\022\032\n\005items\030\002 \003(\0132\013.Proto.Item\"*\n\017"
  "RequestSellItem\022\n\n\002sn\030\001 \001(\003\022\013\n\003num\030\002 \001(\005"
  "\"\022\n\020ResponseSellItem\"D\n\020RequestGachaPull"
  "\022\016\n\006poolId\030\001 \001(\005\022\016\n\006single\030\002 \001(\010\022\020\n\010cost"
  "Type\030\003 \001(\r\"c\n\021ResponseGachaPull\022/\n\005items"
  "\030\001 \003(\0132 .Proto.PushItemChange.ChangeShow"
  "\022\016\n\006poolId\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"A\n\rDBQue"
  "ryPlayer\022\021\n\tserver_id\030\001 \001(\005\022\017\n\007channel\030\002"
  " \001(\t\022\014\n\004uuid\030\003 \001(\t\">\n\020DBQueryPlayerRet\022\013"
  "\n\003ret\030\001 \001(\005\022\035\n\006player\030\002 \001(\0132\r.Proto.Play"
  "er\"a\n\016DBCreatePlayer\022\021\n\tserver_id\030\001 \001(\005\022"
  "\017\n\007channel\030\002 \001(\t\022\014\n\004uuid\030\003 \001(\t\022\035\n\006player"
  "\030\004 \001(\0132\r.Proto.Player\"\?\n\021DBCreatePlayerR"
  "et\022\013\n\003ret\030\001 \001(\005\022\035\n\006player\030\002 \001(\0132\r.Proto."
  "Player\"R\n\014DBSavePlayer\022#\n\tsave_mode\030\001 \001("
  "\0162\020.Proto.ESaveMode\022\035\n\006player\030\002 \001(\0132\r.Pr"
  "oto.Player\"\036\n\017DBSavePlayerRet\022\013\n\003ret\030\001 \001"
  "(\005\"\014\n\nDBSaveList\"@\n\rDBSaveListRet\022\013\n\003ret"
  "\030\001 \001(\005\022\"\n\013player_list\030\002 \003(\0132\r.Proto.Play"
  "er\"/\n\013DBSaveWorld\022 \n\004data\030\001 \001(\0132\022.Proto."
  "DBWorldData\"\035\n\016DBSaveWorldRet\022\013\n\003ret\030\001 \001"
  "(\005\"3\n\014DBQueryWorld\022\021\n\tserver_id\030\001 \001(\005\022\020\n"
  "\010world_id\030\002 \001(\005\"@\n\017DBQueryWorldRet\022\013\n\003re"
  "t\030\001 \001(\005\022 \n\004data\030\002 \001(\0132\022.Proto.DBWorldDat"
  "a\"+\n\014BattleDamage\022\013\n\003pos\030\001 \001(\005\022\016\n\006damage"
  "\030\002 \001(\005\"\222\001\n\014BattleAction\022\020\n\010owner_sn\030\001 \001("
  "\004\022\013\n\003pos\030\002 \001(\005\022\020\n\010skill_id\030\003 \001(\005\022,\n\013acti"
  "on_type\030\004 \001(\0162\027.Proto.BattleActionType\022#"
  "\n\006damage\030\005 \003(\0132\023.Proto.BattleDamage\"8\n\020B"
  "attleActionList\022$\n\007actions\030\001 \003(\0132\023.Proto"
  ".BattleAction\"\037\n\nBattleJoin\022\021\n\tplayer_sn"
  "\030\001 \001(\004\"\'\n\014BattleCreate\022\027\n\017monster_team_i"
  "d\030\001 \001(\005\"\037\n\nBattleView\022\021\n\tplayer_sn\030\001 \001(\004"
  "\".\n\010BattleRs\022\"\n\013return_code\030\001 \001(\0162\r.Prot"
  "o.RsCode\"F\n\nBattleTeam\022\020\n\010owner_sn\030\001 \001(\004"
  "\022\013\n\003pos\030\002 \001(\005\022\031\n\004card\030\003 \001(\0132\013.Proto.Card"
  "\"1\n\016BattleSyncTeam\022\037\n\004team\030\002 \003(\0132\021.Proto"
  ".BattleTeam\"8\n\013BattleBegin\022\020\n\010owner_sn\030\001"
  " \001(\004\022\027\n\017monster_team_id\030\002 \001(\005\"\013\n\tBattleE"
  "nd\"\036\n\020ReqeustSkillLvUp\022\n\n\002id\030\001 \001(\005\".\n\021Re"
  "sponseSkillLvUp\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\002 \001"
  "(\005\"\"\n\024ReqeustEquipmentLvUp\022\n\n\002id\030\001 \001(\005\"2"
  "\n\025ResponseEquipmentLvUp\022\n\n\002id\030\001 \001(\005\022\r\n\005l"
  "evel\030\002 \001(\005\"Q\n\020ReqCardSkillLvUp\022\016\n\006cardID"
  "\030\001 \001(\005\022-\n\014requestSkill\030\002 \001(\0132\027.Proto.Req"
  "eustSkillLvUp\"f\n\020ResCardSkillLvUp\022\017\n\007res"
  "code\030\001 \001(\005\022\021\n\trescardID\030\002 \001(\005\022.\n\014resSkil"
  "lLvUp\030\003 \001(\0132\030.Proto.ResponseSkillLvUp*{\n"
  "\006RsCode\022\006\n\002OK\020\000\022\027\n\022BattleCreateFailed\020\350\007"
  "\022&\n!BattleCreateFailed_PlayerInBattle\020\351\007"
  "\022(\n#BattleBeginFailed_PlayerNotInBattle\020"
  "\352\007*\232\001\n\026AccountCheckReturnCode\022\n\n\006ARC_OK\020"
  "\000\022\017\n\013ARC_UNKONWN\020\001\022\031\n\025ARC_NOT_FOUND_ACCO"
  "UNT\020\002\022\026\n\022ARC_PASSWORD_WRONG\020\003\022\017\n\013ARC_LOG"
  "GING\020\004\022\017\n\013ARC_TIMEOUT\020\005\022\016\n\nARC_ONLINE\020\006*"
  "G\n\023LoginHttpReturnCode\022\013\n\007LHRC_OK\020\000\022\020\n\014L"
  "HRC_TIMEOUT\020\001\022\021\n\rLHRC_NOTFOUND\020\002*\220\001\n\014Log"
  "inRetCode\022\n\n\006LRC_OK\020\000\022\017\n\013LRC_UNKONWN\020\001\022\031"
  "\n\025LRC_NOT_FOUND_ACCOUNT\020\002\022\026\n\022LRC_PASSWOR"
  "D_WRONG\020\003\022\017\n\013LRC_LOGGING\020\004\022\017\n\013LRC_TIMEOU"
  "T\020\005\022\016\n\nLRC_ONLINE\020\006*C\n\rCreateRetCode\022\021\n\r"
  "CRC_Create_OK\020\000\022\017\n\013CRC_Unkonwn\020\001\022\016\n\nCRC_"
  "Rename\020\002*k\n\014eChatChannel\022\016\n\nECC_System\020\000"
  "\022\r\n\tECC_World\020\001\022\r\n\tECC_Guild\020\002\022\014\n\010ECC_Te"
  "am\020\003\022\017\n\013ECC_Private\020\004\022\016\n\nECC_Battle\020\005*<\n"
  "\tESaveMode\022\016\n\nESM_Normal\020\000\022\023\n\017ESM_Immedi"
  "ately\020\001\022\n\n\006ESM_No\020\002*F\n\020BattleActionType\022"
  "\t\n\005Begin\020\000\022\007\n\003Run\020\001\022\n\n\006Attack\020\002\022\010\n\004Back\020"
  "\003\022\010\n\004Anim\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2eproto_deps[2] = {
  &::descriptor_table_db_2eproto,
  &::descriptor_table_x_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2eproto_sccs[159] = {
  &scc_info_AccountCheck_msg_2eproto.base,
  &scc_info_AccountCheckRs_msg_2eproto.base,
  &scc_info_AddExp_msg_2eproto.base,
  &scc_info_AddExpRet_msg_2eproto.base,
  &scc_info_AddFriend_msg_2eproto.base,
  &scc_info_AddFriendRet_msg_2eproto.base,
  &scc_info_AddItem_msg_2eproto.base,
  &scc_info_AddItemRet_msg_2eproto.base,
  &scc_info_AppInfoListSync_msg_2eproto.base,
  &scc_info_AppInfoSync_msg_2eproto.base,
  &scc_info_AppRegister_msg_2eproto.base,
  &scc_info_BattleAction_msg_2eproto.base,
  &scc_info_BattleActionList_msg_2eproto.base,
  &scc_info_BattleBegin_msg_2eproto.base,
  &scc_info_BattleCreate_msg_2eproto.base,
  &scc_info_BattleDamage_msg_2eproto.base,
  &scc_info_BattleEnd_msg_2eproto.base,
  &scc_info_BattleJoin_msg_2eproto.base,
  &scc_info_BattleRs_msg_2eproto.base,
  &scc_info_BattleSyncTeam_msg_2eproto.base,
  &scc_info_BattleTeam_msg_2eproto.base,
  &scc_info_BattleView_msg_2eproto.base,
  &scc_info_BoardcastLogin_msg_2eproto.base,
  &scc_info_BroadcastCreateWorld_msg_2eproto.base,
  &scc_info_BroadcastCreateWorldProxy_msg_2eproto.base,
  &scc_info_Chat_msg_2eproto.base,
  &scc_info_ChatRet_msg_2eproto.base,
  &scc_info_CmdApp_msg_2eproto.base,
  &scc_info_CmdThread_msg_2eproto.base,
  &scc_info_CreateComponent_msg_2eproto.base,
  &scc_info_CreateComponentParam_msg_2eproto.base,
  &scc_info_CreateSystem_msg_2eproto.base,
  &scc_info_CreateWorld_msg_2eproto.base,
  &scc_info_DBCreatePlayer_msg_2eproto.base,
  &scc_info_DBCreatePlayerRet_msg_2eproto.base,
  &scc_info_DBQueryPlayer_msg_2eproto.base,
  &scc_info_DBQueryPlayerRet_msg_2eproto.base,
  &scc_info_DBQueryWorld_msg_2eproto.base,
  &scc_info_DBQueryWorldRet_msg_2eproto.base,
  &scc_info_DBSaveList_msg_2eproto.base,
  &scc_info_DBSaveListRet_msg_2eproto.base,
  &scc_info_DBSavePlayer_msg_2eproto.base,
  &scc_info_DBSavePlayerRet_msg_2eproto.base,
  &scc_info_DBSaveWorld_msg_2eproto.base,
  &scc_info_DBSaveWorldRet_msg_2eproto.base,
  &scc_info_DelFriend_msg_2eproto.base,
  &scc_info_DelFriendRet_msg_2eproto.base,
  &scc_info_DestoryWorld_msg_2eproto.base,
  &scc_info_Dungeon_msg_2eproto.base,
  &scc_info_DungeonRs_msg_2eproto.base,
  &scc_info_Efficiency_msg_2eproto.base,
  &scc_info_EnterHome_msg_2eproto.base,
  &scc_info_EnterWorld_msg_2eproto.base,
  &scc_info_GameToken_msg_2eproto.base,
  &scc_info_GetChatRecord_msg_2eproto.base,
  &scc_info_GetChatRecordRet_msg_2eproto.base,
  &scc_info_GetFriendList_msg_2eproto.base,
  &scc_info_GetFriendListRet_msg_2eproto.base,
  &scc_info_GetTargetInfo_msg_2eproto.base,
  &scc_info_GetTargetInfoRet_msg_2eproto.base,
  &scc_info_Http_msg_2eproto.base,
  &scc_info_ItemChange_msg_2eproto.base,
  &scc_info_JoinGuild_msg_2eproto.base,
  &scc_info_JoinGuildRet_msg_2eproto.base,
  &scc_info_JoinTeam_msg_2eproto.base,
  &scc_info_JoinTeamRet_msg_2eproto.base,
  &scc_info_LoadAllAccount_msg_2eproto.base,
  &scc_info_LoadAllAccountRet_msg_2eproto.base,
  &scc_info_LoadAllPlayer_msg_2eproto.base,
  &scc_info_LoadAllPlayerRet_msg_2eproto.base,
  &scc_info_LoadPlayer_msg_2eproto.base,
  &scc_info_LoadPlayerRet_msg_2eproto.base,
  &scc_info_LoginByToken_msg_2eproto.base,
  &scc_info_LoginByTokenRs_msg_2eproto.base,
  &scc_info_MoveByRotation_msg_2eproto.base,
  &scc_info_Mute_msg_2eproto.base,
  &scc_info_MuteRet_msg_2eproto.base,
  &scc_info_NetworkConnect_msg_2eproto.base,
  &scc_info_NetworkDisconnect_msg_2eproto.base,
  &scc_info_NullMsg_msg_2eproto.base,
  &scc_info_PlayerCreate_msg_2eproto.base,
  &scc_info_PlayerCreateRet_msg_2eproto.base,
  &scc_info_PlayerList_msg_2eproto.base,
  &scc_info_PlayerLittle_msg_2eproto.base,
  &scc_info_PlayerLogin_msg_2eproto.base,
  &scc_info_PlayerLoginRet_msg_2eproto.base,
  &scc_info_PushItemChange_msg_2eproto.base,
  &scc_info_PushItemChange_ChangeShow_msg_2eproto.base,
  &scc_info_QueryAllPlayerName_msg_2eproto.base,
  &scc_info_QueryAllPlayerNameRet_msg_2eproto.base,
  &scc_info_QueryDungeonBySn_msg_2eproto.base,
  &scc_info_QueryDungeonBySnRs_msg_2eproto.base,
  &scc_info_QueryPlayer_msg_2eproto.base,
  &scc_info_QueryPlayerList_msg_2eproto.base,
  &scc_info_QueryPlayerRs_msg_2eproto.base,
  &scc_info_QueryWorldData_msg_2eproto.base,
  &scc_info_QueryWorldDataRet_msg_2eproto.base,
  &scc_info_QuitGuild_msg_2eproto.base,
  &scc_info_QuitGuildRet_msg_2eproto.base,
  &scc_info_QuitTeam_msg_2eproto.base,
  &scc_info_QuitTeamRet_msg_2eproto.base,
  &scc_info_RefreshFriend_msg_2eproto.base,
  &scc_info_RefreshFriendRet_msg_2eproto.base,
  &scc_info_RemoveComponent_msg_2eproto.base,
  &scc_info_RemovePlayer_msg_2eproto.base,
  &scc_info_ReqCardLevelUp_msg_2eproto.base,
  &scc_info_ReqCardQlt_msg_2eproto.base,
  &scc_info_ReqCardSkillLvUp_msg_2eproto.base,
  &scc_info_ReqCardStar_msg_2eproto.base,
  &scc_info_ReqeustEquipmentLvUp_msg_2eproto.base,
  &scc_info_ReqeustSkillLvUp_msg_2eproto.base,
  &scc_info_RequestChangeTeam_msg_2eproto.base,
  &scc_info_RequestCreateWorldProxy_msg_2eproto.base,
  &scc_info_RequestGachaPull_msg_2eproto.base,
  &scc_info_RequestSellItem_msg_2eproto.base,
  &scc_info_RequestSortBag_msg_2eproto.base,
  &scc_info_RequestSyncPlayer_msg_2eproto.base,
  &scc_info_RequestUseItem_msg_2eproto.base,
  &scc_info_RequestWorld_msg_2eproto.base,
  &scc_info_ResCardLevel_msg_2eproto.base,
  &scc_info_ResCardQlt_msg_2eproto.base,
  &scc_info_ResCardSkillLvUp_msg_2eproto.base,
  &scc_info_ResCardStar_msg_2eproto.base,
  &scc_info_ResInten_msg_2eproto.base,
  &scc_info_ReseponseChangeTeam_msg_2eproto.base,
  &scc_info_ResponseEquipmentLvUp_msg_2eproto.base,
  &scc_info_ResponseGachaPull_msg_2eproto.base,
  &scc_info_ResponseSellItem_msg_2eproto.base,
  &scc_info_ResponseSkillLvUp_msg_2eproto.base,
  &scc_info_ResponseSortBag_msg_2eproto.base,
  &scc_info_ResponseUseItem_msg_2eproto.base,
  &scc_info_ReuqestGMAddItem_msg_2eproto.base,
  &scc_info_RobotCreate_msg_2eproto.base,
  &scc_info_RobotState_msg_2eproto.base,
  &scc_info_RobotSyncState_msg_2eproto.base,
  &scc_info_Role_msg_2eproto.base,
  &scc_info_RoleAppear_msg_2eproto.base,
  &scc_info_RoleDisAppear_msg_2eproto.base,
  &scc_info_STChatInfo_msg_2eproto.base,
  &scc_info_STFriendInfo_msg_2eproto.base,
  &scc_info_STPlayerSnName_msg_2eproto.base,
  &scc_info_SavePlayer_msg_2eproto.base,
  &scc_info_SelectPlayer_msg_2eproto.base,
  &scc_info_SelectPlayerRs_msg_2eproto.base,
  &scc_info_SyncChat_msg_2eproto.base,
  &scc_info_SyncPlayer_msg_2eproto.base,
  &scc_info_SyncPlayerProperty_msg_2eproto.base,
  &scc_info_SyncPlayerPropertyList_msg_2eproto.base,
  &scc_info_SyncWorldAction_msg_2eproto.base,
  &scc_info_SyncWorldData_msg_2eproto.base,
  &scc_info_Tag_msg_2eproto.base,
  &scc_info_TagValue_msg_2eproto.base,
  &scc_info_Teleport_msg_2eproto.base,
  &scc_info_TeleportAfter_msg_2eproto.base,
  &scc_info_TokenInfo_msg_2eproto.base,
  &scc_info_WorldAction_msg_2eproto.base,
  &scc_info_WorldActionRet_msg_2eproto.base,
  &scc_info_WorldProxySyncToGather_msg_2eproto.base,
  &scc_info_WorldSyncToGather_msg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
static bool descriptor_table_msg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  &descriptor_table_msg_2eproto_initialized, descriptor_table_protodef_msg_2eproto, "msg.proto", 12019,
  &descriptor_table_msg_2eproto_once, descriptor_table_msg_2eproto_sccs, descriptor_table_msg_2eproto_deps, 159, 2,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, 159, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_msg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_msg_2eproto), true);
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdThread_CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool CmdThread_CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CmdThread_CmdType CmdThread::Entity;
constexpr CmdThread_CmdType CmdThread::Pool;
constexpr CmdThread_CmdType CmdThread::Connect;
constexpr CmdThread_CmdType CmdThread::CmdType_MIN;
constexpr CmdThread_CmdType CmdThread::CmdType_MAX;
constexpr int CmdThread::CmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdApp_CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool CmdApp_CmdType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CmdApp_CmdType CmdApp::Info;
constexpr CmdApp_CmdType CmdApp::CmdType_MIN;
constexpr CmdApp_CmdType CmdApp::CmdType_MAX;
constexpr int CmdApp::CmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateComponentParam_ParamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[2];
}
bool CreateComponentParam_ParamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateComponentParam_ParamType CreateComponentParam::Int;
constexpr CreateComponentParam_ParamType CreateComponentParam::String;
constexpr CreateComponentParam_ParamType CreateComponentParam::UInt64;
constexpr CreateComponentParam_ParamType CreateComponentParam::ParamType_MIN;
constexpr CreateComponentParam_ParamType CreateComponentParam::ParamType_MAX;
constexpr int CreateComponentParam::ParamType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectPlayerRs_SelectPlayerReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[3];
}
bool SelectPlayerRs_SelectPlayerReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::SPRC_OK;
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::SPRC_NotFound;
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::SelectPlayerReturnCode_MIN;
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::SelectPlayerReturnCode_MAX;
constexpr int SelectPlayerRs::SelectPlayerReturnCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameToken_ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[4];
}
bool GameToken_ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameToken_ReturnCode GameToken::GameToken_OK;
constexpr GameToken_ReturnCode GameToken::GameToken_NO_GAME;
constexpr GameToken_ReturnCode GameToken::ReturnCode_MIN;
constexpr GameToken_ReturnCode GameToken::ReturnCode_MAX;
constexpr int GameToken::ReturnCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginByTokenRs_ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[5];
}
bool LoginByTokenRs_ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs::LGRC_OK;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs::LGRC_UNKONWN;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs::LGRC_NOT_FOUND_ACCOUNT;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs::LGRC_TOKEN_WRONG;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs::ReturnCode_MIN;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs::ReturnCode_MAX;
constexpr int LoginByTokenRs::ReturnCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryDungeonBySnRs_ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[6];
}
bool QueryDungeonBySnRs_ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs::QueryWorld_OK;
constexpr QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs::QueryWorld_Failed;
constexpr QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs::ReturnCode_MIN;
constexpr QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs::ReturnCode_MAX;
constexpr int QueryDungeonBySnRs::ReturnCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncPlayerProperty_PlayerPropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[7];
}
bool SyncPlayerProperty_PlayerPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::Level;
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::Exp;
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::Gold;
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::Diamond;
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::PlayerPropertyType_MIN;
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::PlayerPropertyType_MAX;
constexpr int SyncPlayerProperty::PlayerPropertyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCardLevel_ResCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[8];
}
bool ResCardLevel_ResCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResCardLevel_ResCode ResCardLevel::succeed;
constexpr ResCardLevel_ResCode ResCardLevel::playerlevellimit;
constexpr ResCardLevel_ResCode ResCardLevel::noitem;
constexpr ResCardLevel_ResCode ResCardLevel::cardlevelmax;
constexpr ResCardLevel_ResCode ResCardLevel::notReachQlt;
constexpr ResCardLevel_ResCode ResCardLevel::error;
constexpr ResCardLevel_ResCode ResCardLevel::ResCode_MIN;
constexpr ResCardLevel_ResCode ResCardLevel::ResCode_MAX;
constexpr int ResCardLevel::ResCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCardStar_StarResCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[9];
}
bool ResCardStar_StarResCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResCardStar_StarResCode ResCardStar::SUCCED;
constexpr ResCardStar_StarResCode ResCardStar::NOTREACHLV;
constexpr ResCardStar_StarResCode ResCardStar::NOITEM;
constexpr ResCardStar_StarResCode ResCardStar::STARMAX;
constexpr ResCardStar_StarResCode ResCardStar::UNKNOWNERROR;
constexpr ResCardStar_StarResCode ResCardStar::StarResCode_MIN;
constexpr ResCardStar_StarResCode ResCardStar::StarResCode_MAX;
constexpr int ResCardStar::StarResCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCardQlt_ResQltCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[10];
}
bool ResCardQlt_ResQltCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResCardQlt_ResQltCode ResCardQlt::SUCCED;
constexpr ResCardQlt_ResQltCode ResCardQlt::NOTREACHSTAR;
constexpr ResCardQlt_ResQltCode ResCardQlt::NOITEM;
constexpr ResCardQlt_ResQltCode ResCardQlt::QltMAX;
constexpr ResCardQlt_ResQltCode ResCardQlt::UNKNOWNERROR;
constexpr ResCardQlt_ResQltCode ResCardQlt::ResQltCode_MIN;
constexpr ResCardQlt_ResQltCode ResCardQlt::ResQltCode_MAX;
constexpr int ResCardQlt::ResQltCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResInten_ResIntenCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[11];
}
bool ResInten_ResIntenCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResInten_ResIntenCode ResInten::SUCCED;
constexpr ResInten_ResIntenCode ResInten::NOTREACHCONDITION;
constexpr ResInten_ResIntenCode ResInten::NOITEM;
constexpr ResInten_ResIntenCode ResInten::INTENMAX;
constexpr ResInten_ResIntenCode ResInten::UNKNOWNERROR;
constexpr ResInten_ResIntenCode ResInten::ResIntenCode_MIN;
constexpr ResInten_ResIntenCode ResInten::ResIntenCode_MAX;
constexpr int ResInten::ResIntenCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RsCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[12];
}
bool RsCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountCheckReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[13];
}
bool AccountCheckReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginHttpReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[14];
}
bool LoginHttpReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[15];
}
bool LoginRetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateRetCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[16];
}
bool CreateRetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eChatChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[17];
}
bool eChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESaveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[18];
}
bool ESaveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BattleActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[19];
}
bool BattleActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NullMsg::InitAsDefaultInstance() {
}
class NullMsg::_Internal {
 public:
};

NullMsg::NullMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.NullMsg)
}
NullMsg::NullMsg(const NullMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.NullMsg)
}

void NullMsg::SharedCtor() {
}

NullMsg::~NullMsg() {
  // @@protoc_insertion_point(destructor:Proto.NullMsg)
  SharedDtor();
}

void NullMsg::SharedDtor() {
}

void NullMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NullMsg& NullMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NullMsg_msg_2eproto.base);
  return *internal_default_instance();
}


void NullMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.NullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NullMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NullMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.NullMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.NullMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.NullMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NullMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.NullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.NullMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* NullMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.NullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.NullMsg)
  return target;
}

size_t NullMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.NullMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.NullMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NullMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NullMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.NullMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.NullMsg)
    MergeFrom(*source);
  }
}

void NullMsg::MergeFrom(const NullMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.NullMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NullMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.NullMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullMsg::CopyFrom(const NullMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.NullMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullMsg::IsInitialized() const {
  return true;
}

void NullMsg::InternalSwap(NullMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NullMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdThread::InitAsDefaultInstance() {
}
class CmdThread::_Internal {
 public:
};

CmdThread::CmdThread()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CmdThread)
}
CmdThread::CmdThread(const CmdThread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:Proto.CmdThread)
}

void CmdThread::SharedCtor() {
  cmd_type_ = 0;
}

CmdThread::~CmdThread() {
  // @@protoc_insertion_point(destructor:Proto.CmdThread)
  SharedDtor();
}

void CmdThread::SharedDtor() {
}

void CmdThread::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdThread& CmdThread::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdThread_msg_2eproto.base);
  return *internal_default_instance();
}


void CmdThread::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CmdThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CmdThread::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.CmdThread.CmdType cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cmd_type(static_cast<::Proto::CmdThread_CmdType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdThread::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CmdThread)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.CmdThread.CmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::Proto::CmdThread_CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CmdThread)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CmdThread)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CmdThread::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CmdThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CmdThread.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.CmdThread)
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdThread::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CmdThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CmdThread.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.CmdThread)
  return target;
}

size_t CmdThread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CmdThread)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.CmdThread.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdThread::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CmdThread)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdThread* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdThread>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CmdThread)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CmdThread)
    MergeFrom(*source);
  }
}

void CmdThread::MergeFrom(const CmdThread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CmdThread)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void CmdThread::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CmdThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdThread::CopyFrom(const CmdThread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CmdThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdThread::IsInitialized() const {
  return true;
}

void CmdThread::InternalSwap(CmdThread* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmd_type_, other->cmd_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdThread::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdApp::InitAsDefaultInstance() {
}
class CmdApp::_Internal {
 public:
};

CmdApp::CmdApp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CmdApp)
}
CmdApp::CmdApp(const CmdApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:Proto.CmdApp)
}

void CmdApp::SharedCtor() {
  cmd_type_ = 0;
}

CmdApp::~CmdApp() {
  // @@protoc_insertion_point(destructor:Proto.CmdApp)
  SharedDtor();
}

void CmdApp::SharedDtor() {
}

void CmdApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdApp& CmdApp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdApp_msg_2eproto.base);
  return *internal_default_instance();
}


void CmdApp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CmdApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CmdApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.CmdApp.CmdType cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cmd_type(static_cast<::Proto::CmdApp_CmdType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CmdApp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CmdApp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.CmdApp.CmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::Proto::CmdApp_CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CmdApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CmdApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CmdApp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CmdApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CmdApp.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.CmdApp)
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdApp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CmdApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CmdApp.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.CmdApp)
  return target;
}

size_t CmdApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CmdApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.CmdApp.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdApp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CmdApp)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdApp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CmdApp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CmdApp)
    MergeFrom(*source);
  }
}

void CmdApp::MergeFrom(const CmdApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CmdApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void CmdApp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CmdApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdApp::CopyFrom(const CmdApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CmdApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdApp::IsInitialized() const {
  return true;
}

void CmdApp::InternalSwap(CmdApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cmd_type_, other->cmd_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdApp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Efficiency::InitAsDefaultInstance() {
}
class Efficiency::_Internal {
 public:
};

Efficiency::Efficiency()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Efficiency)
}
Efficiency::Efficiency(const Efficiency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.thread_id().empty()) {
    thread_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thread_id_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(thread_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.Efficiency)
}

void Efficiency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Efficiency_msg_2eproto.base);
  thread_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_type_) -
      reinterpret_cast<char*>(&time_)) + sizeof(thread_type_));
}

Efficiency::~Efficiency() {
  // @@protoc_insertion_point(destructor:Proto.Efficiency)
  SharedDtor();
}

void Efficiency::SharedDtor() {
  thread_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Efficiency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Efficiency& Efficiency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Efficiency_msg_2eproto.base);
  return *internal_default_instance();
}


void Efficiency::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Efficiency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_type_) -
      reinterpret_cast<char*>(&time_)) + sizeof(thread_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Efficiency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 thread_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          thread_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thread_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_thread_id(), ptr, ctx, "Proto.Efficiency.thread_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Efficiency::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Efficiency)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 thread_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thread_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_thread_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->thread_id().data(), static_cast<int>(this->thread_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.Efficiency.thread_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Efficiency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Efficiency)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Efficiency::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Efficiency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->thread_type(), output);
  }

  // string thread_id = 2;
  if (this->thread_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->thread_id().data(), static_cast<int>(this->thread_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Efficiency.thread_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thread_id(), output);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Efficiency)
}

::PROTOBUF_NAMESPACE_ID::uint8* Efficiency::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Efficiency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->thread_type(), target);
  }

  // string thread_id = 2;
  if (this->thread_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->thread_id().data(), static_cast<int>(this->thread_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Efficiency.thread_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->thread_id(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Efficiency)
  return target;
}

size_t Efficiency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Efficiency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string thread_id = 2;
  if (this->thread_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->thread_id());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->thread_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Efficiency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Efficiency)
  GOOGLE_DCHECK_NE(&from, this);
  const Efficiency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Efficiency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Efficiency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Efficiency)
    MergeFrom(*source);
  }
}

void Efficiency::MergeFrom(const Efficiency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Efficiency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_id().size() > 0) {

    thread_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thread_id_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.thread_type() != 0) {
    set_thread_type(from.thread_type());
  }
}

void Efficiency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Efficiency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Efficiency::CopyFrom(const Efficiency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Efficiency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Efficiency::IsInitialized() const {
  return true;
}

void Efficiency::InternalSwap(Efficiency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  thread_id_.Swap(&other->thread_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(thread_type_, other->thread_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Efficiency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppRegister::InitAsDefaultInstance() {
}
class AppRegister::_Internal {
 public:
};

AppRegister::AppRegister()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AppRegister)
}
AppRegister::AppRegister(const AppRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Proto.AppRegister)
}

void AppRegister::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

AppRegister::~AppRegister() {
  // @@protoc_insertion_point(destructor:Proto.AppRegister)
  SharedDtor();
}

void AppRegister::SharedDtor() {
}

void AppRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppRegister& AppRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppRegister_msg_2eproto.base);
  return *internal_default_instance();
}


void AppRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppRegister::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AppRegister)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AppRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AppRegister)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppRegister::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AppRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AppRegister)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppRegister::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppRegister)
  return target;
}

size_t AppRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const AppRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppRegister)
    MergeFrom(*source);
  }
}

void AppRegister::MergeFrom(const AppRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AppRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRegister::CopyFrom(const AppRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRegister::IsInitialized() const {
  return true;
}

void AppRegister::InternalSwap(AppRegister* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppInfoSync::InitAsDefaultInstance() {
}
class AppInfoSync::_Internal {
 public:
};

AppInfoSync::AppInfoSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AppInfoSync)
}
AppInfoSync::AppInfoSync(const AppInfoSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:Proto.AppInfoSync)
}

void AppInfoSync::SharedCtor() {
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(online_));
}

AppInfoSync::~AppInfoSync() {
  // @@protoc_insertion_point(destructor:Proto.AppInfoSync)
  SharedDtor();
}

void AppInfoSync::SharedDtor() {
}

void AppInfoSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInfoSync& AppInfoSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInfoSync_msg_2eproto.base);
  return *internal_default_instance();
}


void AppInfoSync::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppInfoSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppInfoSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 app_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          app_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppInfoSync::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AppInfoSync)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 app_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 online = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AppInfoSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AppInfoSync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppInfoSync::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AppInfoSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 app_id = 1;
  if (this->app_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // int32 app_type = 2;
  if (this->app_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->app_type(), output);
  }

  // int32 online = 3;
  if (this->online() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AppInfoSync)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfoSync::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppInfoSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 app_id = 1;
  if (this->app_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->app_id(), target);
  }

  // int32 app_type = 2;
  if (this->app_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->app_type(), target);
  }

  // int32 online = 3;
  if (this->online() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppInfoSync)
  return target;
}

size_t AppInfoSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppInfoSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 app_id = 1;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  // int32 app_type = 2;
  if (this->app_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->app_type());
  }

  // int32 online = 3;
  if (this->online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->online());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInfoSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppInfoSync)
  GOOGLE_DCHECK_NE(&from, this);
  const AppInfoSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppInfoSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppInfoSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppInfoSync)
    MergeFrom(*source);
  }
}

void AppInfoSync::MergeFrom(const AppInfoSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppInfoSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.app_type() != 0) {
    set_app_type(from.app_type());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void AppInfoSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppInfoSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppInfoSync::CopyFrom(const AppInfoSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppInfoSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfoSync::IsInitialized() const {
  return true;
}

void AppInfoSync::InternalSwap(AppInfoSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(app_id_, other->app_id_);
  swap(app_type_, other->app_type_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfoSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppInfoListSync::InitAsDefaultInstance() {
}
class AppInfoListSync::_Internal {
 public:
};

AppInfoListSync::AppInfoListSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AppInfoListSync)
}
AppInfoListSync::AppInfoListSync(const AppInfoListSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.AppInfoListSync)
}

void AppInfoListSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppInfoListSync_msg_2eproto.base);
}

AppInfoListSync::~AppInfoListSync() {
  // @@protoc_insertion_point(destructor:Proto.AppInfoListSync)
  SharedDtor();
}

void AppInfoListSync::SharedDtor() {
}

void AppInfoListSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInfoListSync& AppInfoListSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInfoListSync_msg_2eproto.base);
  return *internal_default_instance();
}


void AppInfoListSync::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AppInfoListSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppInfoListSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.AppInfoSync apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppInfoListSync::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AppInfoListSync)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.AppInfoSync apps = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AppInfoListSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AppInfoListSync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppInfoListSync::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AppInfoListSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.AppInfoSync apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->apps(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AppInfoListSync)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfoListSync::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AppInfoListSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.AppInfoSync apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->apps(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AppInfoListSync)
  return target;
}

size_t AppInfoListSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AppInfoListSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.AppInfoSync apps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->apps(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInfoListSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AppInfoListSync)
  GOOGLE_DCHECK_NE(&from, this);
  const AppInfoListSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppInfoListSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AppInfoListSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AppInfoListSync)
    MergeFrom(*source);
  }
}

void AppInfoListSync::MergeFrom(const AppInfoListSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AppInfoListSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
}

void AppInfoListSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AppInfoListSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppInfoListSync::CopyFrom(const AppInfoListSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AppInfoListSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfoListSync::IsInitialized() const {
  return true;
}

void AppInfoListSync::InternalSwap(AppInfoListSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&apps_)->InternalSwap(CastToBase(&other->apps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfoListSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkDisconnect::InitAsDefaultInstance() {
}
class NetworkDisconnect::_Internal {
 public:
};

NetworkDisconnect::NetworkDisconnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.NetworkDisconnect)
}
NetworkDisconnect::NetworkDisconnect(const NetworkDisconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&network_type_, &from.network_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_) -
    reinterpret_cast<char*>(&network_type_)) + sizeof(socket_));
  // @@protoc_insertion_point(copy_constructor:Proto.NetworkDisconnect)
}

void NetworkDisconnect::SharedCtor() {
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(socket_));
}

NetworkDisconnect::~NetworkDisconnect() {
  // @@protoc_insertion_point(destructor:Proto.NetworkDisconnect)
  SharedDtor();
}

void NetworkDisconnect::SharedDtor() {
}

void NetworkDisconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkDisconnect& NetworkDisconnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkDisconnect_msg_2eproto.base);
  return *internal_default_instance();
}


void NetworkDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.NetworkDisconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(socket_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkDisconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 network_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkDisconnect::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.NetworkDisconnect)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 network_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 socket = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.NetworkDisconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.NetworkDisconnect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkDisconnect::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.NetworkDisconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 network_type = 1;
  if (this->network_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->network_type(), output);
  }

  // int32 socket = 2;
  if (this->socket() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->socket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.NetworkDisconnect)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkDisconnect::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.NetworkDisconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 network_type = 1;
  if (this->network_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->network_type(), target);
  }

  // int32 socket = 2;
  if (this->socket() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->socket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.NetworkDisconnect)
  return target;
}

size_t NetworkDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.NetworkDisconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 network_type = 1;
  if (this->network_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->network_type());
  }

  // int32 socket = 2;
  if (this->socket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->socket());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkDisconnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.NetworkDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkDisconnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkDisconnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.NetworkDisconnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.NetworkDisconnect)
    MergeFrom(*source);
  }
}

void NetworkDisconnect::MergeFrom(const NetworkDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.NetworkDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.network_type() != 0) {
    set_network_type(from.network_type());
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void NetworkDisconnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.NetworkDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkDisconnect::CopyFrom(const NetworkDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.NetworkDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkDisconnect::IsInitialized() const {
  return true;
}

void NetworkDisconnect::InternalSwap(NetworkDisconnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(network_type_, other->network_type_);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkDisconnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TagValue::InitAsDefaultInstance() {
}
class TagValue::_Internal {
 public:
};

TagValue::TagValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TagValue)
}
TagValue::TagValue(const TagValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value_str().empty()) {
    value_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str_);
  }
  value_int64_ = from.value_int64_;
  // @@protoc_insertion_point(copy_constructor:Proto.TagValue)
}

void TagValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TagValue_msg_2eproto.base);
  value_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_int64_ = PROTOBUF_ULONGLONG(0);
}

TagValue::~TagValue() {
  // @@protoc_insertion_point(destructor:Proto.TagValue)
  SharedDtor();
}

void TagValue::SharedDtor() {
  value_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TagValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagValue& TagValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TagValue_msg_2eproto.base);
  return *internal_default_instance();
}


void TagValue::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_int64_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TagValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value_int64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value_str(), ptr, ctx, "Proto.TagValue.value_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TagValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TagValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 value_int64 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value_str().data(), static_cast<int>(this->value_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.TagValue.value_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TagValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TagValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TagValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value_int64 = 1;
  if (this->value_int64() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->value_int64(), output);
  }

  // string value_str = 2;
  if (this->value_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value_str().data(), static_cast<int>(this->value_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.TagValue.value_str");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.TagValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* TagValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TagValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value_int64 = 1;
  if (this->value_int64() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->value_int64(), target);
  }

  // string value_str = 2;
  if (this->value_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value_str().data(), static_cast<int>(this->value_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.TagValue.value_str");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TagValue)
  return target;
}

size_t TagValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TagValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value_str = 2;
  if (this->value_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value_str());
  }

  // uint64 value_int64 = 1;
  if (this->value_int64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->value_int64());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TagValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TagValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TagValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TagValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TagValue)
    MergeFrom(*source);
  }
}

void TagValue::MergeFrom(const TagValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TagValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value_str().size() > 0) {

    value_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_str_);
  }
  if (from.value_int64() != 0) {
    set_value_int64(from.value_int64());
  }
}

void TagValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagValue::CopyFrom(const TagValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagValue::IsInitialized() const {
  return true;
}

void TagValue::InternalSwap(TagValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_str_.Swap(&other->value_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_int64_, other->value_int64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tag::InitAsDefaultInstance() {
  ::Proto::_Tag_default_instance_._instance.get_mutable()->tag_value_ = const_cast< ::Proto::TagValue*>(
      ::Proto::TagValue::internal_default_instance());
}
class Tag::_Internal {
 public:
  static const ::Proto::TagValue& tag_value(const Tag* msg);
};

const ::Proto::TagValue&
Tag::_Internal::tag_value(const Tag* msg) {
  return *msg->tag_value_;
}
Tag::Tag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Tag)
}
Tag::Tag(const Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag_value()) {
    tag_value_ = new ::Proto::TagValue(*from.tag_value_);
  } else {
    tag_value_ = nullptr;
  }
  tag_type_ = from.tag_type_;
  // @@protoc_insertion_point(copy_constructor:Proto.Tag)
}

void Tag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tag_msg_2eproto.base);
  ::memset(&tag_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_type_) -
      reinterpret_cast<char*>(&tag_value_)) + sizeof(tag_type_));
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:Proto.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  if (this != internal_default_instance()) delete tag_value_;
}

void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tag& Tag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tag_msg_2eproto.base);
  return *internal_default_instance();
}


void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tag_value_ != nullptr) {
    delete tag_value_;
  }
  tag_value_ = nullptr;
  tag_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tag_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tag_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.TagValue tag_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_tag_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Tag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 tag_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.TagValue tag_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tag_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tag_type = 1;
  if (this->tag_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->tag_type(), output);
  }

  // .Proto.TagValue tag_value = 2;
  if (this->has_tag_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::tag_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Tag)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tag::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tag_type = 1;
  if (this->tag_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->tag_type(), target);
  }

  // .Proto.TagValue tag_value = 2;
  if (this->has_tag_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::tag_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.TagValue tag_value = 2;
  if (this->has_tag_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_value_);
  }

  // int32 tag_type = 1;
  if (this->tag_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->tag_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Tag)
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag_value()) {
    mutable_tag_value()->::Proto::TagValue::MergeFrom(from.tag_value());
  }
  if (from.tag_type() != 0) {
    set_tag_type(from.tag_type());
  }
}

void Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  return true;
}

void Tag::InternalSwap(Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tag_value_, other->tag_value_);
  swap(tag_type_, other->tag_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkConnect::InitAsDefaultInstance() {
}
class NetworkConnect::_Internal {
 public:
};

NetworkConnect::NetworkConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.NetworkConnect)
}
NetworkConnect::NetworkConnect(const NetworkConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&network_type_, &from.network_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&network_type_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:Proto.NetworkConnect)
}

void NetworkConnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkConnect_msg_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(port_));
}

NetworkConnect::~NetworkConnect() {
  // @@protoc_insertion_point(destructor:Proto.NetworkConnect)
  SharedDtor();
}

void NetworkConnect::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkConnect& NetworkConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkConnect_msg_2eproto.base);
  return *internal_default_instance();
}


void NetworkConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.NetworkConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 network_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Tag tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "Proto.NetworkConnect.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkConnect::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.NetworkConnect)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 network_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.Tag tag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.NetworkConnect.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.NetworkConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.NetworkConnect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkConnect::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.NetworkConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 network_type = 1;
  if (this->network_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->network_type(), output);
  }

  // repeated .Proto.Tag tag = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tag_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tag(static_cast<int>(i)),
      output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.NetworkConnect.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.NetworkConnect)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkConnect::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.NetworkConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 network_type = 1;
  if (this->network_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->network_type(), target);
  }

  // repeated .Proto.Tag tag = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tag_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tag(static_cast<int>(i)), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.NetworkConnect.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.NetworkConnect)
  return target;
}

size_t NetworkConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.NetworkConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Tag tag = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tag_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tag(static_cast<int>(i)));
    }
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 network_type = 1;
  if (this->network_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->network_type());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.NetworkConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.NetworkConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.NetworkConnect)
    MergeFrom(*source);
  }
}

void NetworkConnect::MergeFrom(const NetworkConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.NetworkConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.network_type() != 0) {
    set_network_type(from.network_type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void NetworkConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.NetworkConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConnect::CopyFrom(const NetworkConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.NetworkConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConnect::IsInitialized() const {
  return true;
}

void NetworkConnect::InternalSwap(NetworkConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tag_)->InternalSwap(CastToBase(&other->tag_));
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(network_type_, other->network_type_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Http::InitAsDefaultInstance() {
}
class Http::_Internal {
 public:
};

Http::Http()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Http)
}
Http::Http(const Http& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.body().empty()) {
    body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:Proto.Http)
}

void Http::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Http_msg_2eproto.base);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
}

Http::~Http() {
  // @@protoc_insertion_point(destructor:Proto.Http)
  SharedDtor();
}

void Http::SharedDtor() {
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Http::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Http& Http::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Http_msg_2eproto.base);
  return *internal_default_instance();
}


void Http::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Http)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Http::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_body(), ptr, ctx, "Proto.Http.body");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Http::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Http)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string body = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), static_cast<int>(this->body().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.Http.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Http)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Http)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Http::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Http)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string body = 1;
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Http.body");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->body(), output);
  }

  // int32 status_code = 2;
  if (this->status_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->status_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Http)
}

::PROTOBUF_NAMESPACE_ID::uint8* Http::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Http)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string body = 1;
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Http.body");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->body(), target);
  }

  // int32 status_code = 2;
  if (this->status_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->status_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Http)
  return target;
}

size_t Http::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Http)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string body = 1;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->body());
  }

  // int32 status_code = 2;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Http::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Http)
  GOOGLE_DCHECK_NE(&from, this);
  const Http* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Http>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Http)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Http)
    MergeFrom(*source);
  }
}

void Http::MergeFrom(const Http& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Http)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.status_code() != 0) {
    set_status_code(from.status_code());
  }
}

void Http::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Http)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Http::CopyFrom(const Http& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Http)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Http::IsInitialized() const {
  return true;
}

void Http::InternalSwap(Http* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Http::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateComponentParam::InitAsDefaultInstance() {
}
class CreateComponentParam::_Internal {
 public:
};

CreateComponentParam::CreateComponentParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CreateComponentParam)
}
CreateComponentParam::CreateComponentParam(const CreateComponentParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.string_param().empty()) {
    string_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_param_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint64_param_) -
    reinterpret_cast<char*>(&type_)) + sizeof(uint64_param_));
  // @@protoc_insertion_point(copy_constructor:Proto.CreateComponentParam)
}

void CreateComponentParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateComponentParam_msg_2eproto.base);
  string_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint64_param_) -
      reinterpret_cast<char*>(&type_)) + sizeof(uint64_param_));
}

CreateComponentParam::~CreateComponentParam() {
  // @@protoc_insertion_point(destructor:Proto.CreateComponentParam)
  SharedDtor();
}

void CreateComponentParam::SharedDtor() {
  string_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateComponentParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateComponentParam& CreateComponentParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateComponentParam_msg_2eproto.base);
  return *internal_default_instance();
}


void CreateComponentParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CreateComponentParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint64_param_) -
      reinterpret_cast<char*>(&type_)) + sizeof(uint64_param_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateComponentParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.CreateComponentParam.ParamType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::Proto::CreateComponentParam_ParamType>(val));
        } else goto handle_unusual;
        continue;
      // int32 int_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          int_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_string_param(), ptr, ctx, "Proto.CreateComponentParam.string_param");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uint64_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateComponentParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CreateComponentParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.CreateComponentParam.ParamType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Proto::CreateComponentParam_ParamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int_param = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_param = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_string_param()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->string_param().data(), static_cast<int>(this->string_param().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.CreateComponentParam.string_param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uint64_param = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CreateComponentParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CreateComponentParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateComponentParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CreateComponentParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CreateComponentParam.ParamType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 int_param = 2;
  if (this->int_param() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->int_param(), output);
  }

  // string string_param = 3;
  if (this->string_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->string_param().data(), static_cast<int>(this->string_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.CreateComponentParam.string_param");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->string_param(), output);
  }

  // uint64 uint64_param = 4;
  if (this->uint64_param() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->uint64_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.CreateComponentParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateComponentParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CreateComponentParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CreateComponentParam.ParamType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 int_param = 2;
  if (this->int_param() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->int_param(), target);
  }

  // string string_param = 3;
  if (this->string_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->string_param().data(), static_cast<int>(this->string_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.CreateComponentParam.string_param");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->string_param(), target);
  }

  // uint64 uint64_param = 4;
  if (this->uint64_param() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->uint64_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.CreateComponentParam)
  return target;
}

size_t CreateComponentParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CreateComponentParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_param = 3;
  if (this->string_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->string_param());
  }

  // .Proto.CreateComponentParam.ParamType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 int_param = 2;
  if (this->int_param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->int_param());
  }

  // uint64 uint64_param = 4;
  if (this->uint64_param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->uint64_param());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateComponentParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CreateComponentParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateComponentParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateComponentParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CreateComponentParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CreateComponentParam)
    MergeFrom(*source);
  }
}

void CreateComponentParam::MergeFrom(const CreateComponentParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CreateComponentParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_param().size() > 0) {

    string_param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_param_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.int_param() != 0) {
    set_int_param(from.int_param());
  }
  if (from.uint64_param() != 0) {
    set_uint64_param(from.uint64_param());
  }
}

void CreateComponentParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CreateComponentParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateComponentParam::CopyFrom(const CreateComponentParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CreateComponentParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateComponentParam::IsInitialized() const {
  return true;
}

void CreateComponentParam::InternalSwap(CreateComponentParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  string_param_.Swap(&other->string_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(int_param_, other->int_param_);
  swap(uint64_param_, other->uint64_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateComponentParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateComponent::InitAsDefaultInstance() {
}
class CreateComponent::_Internal {
 public:
};

CreateComponent::CreateComponent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CreateComponent)
}
CreateComponent::CreateComponent(const CreateComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.class_name().empty()) {
    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&thread_type_, &from.thread_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sn_) -
    reinterpret_cast<char*>(&thread_type_)) + sizeof(sn_));
  // @@protoc_insertion_point(copy_constructor:Proto.CreateComponent)
}

void CreateComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateComponent_msg_2eproto.base);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&thread_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sn_) -
      reinterpret_cast<char*>(&thread_type_)) + sizeof(sn_));
}

CreateComponent::~CreateComponent() {
  // @@protoc_insertion_point(destructor:Proto.CreateComponent)
  SharedDtor();
}

void CreateComponent::SharedDtor() {
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateComponent& CreateComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateComponent_msg_2eproto.base);
  return *internal_default_instance();
}


void CreateComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CreateComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&thread_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sn_) -
      reinterpret_cast<char*>(&thread_type_)) + sizeof(sn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 thread_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          thread_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_class_name(), ptr, ctx, "Proto.CreateComponent.class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.CreateComponentParam params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // uint64 sn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_to_all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_to_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateComponent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CreateComponent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 thread_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.CreateComponent.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.CreateComponentParam params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sn = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_to_all = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_to_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CreateComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CreateComponent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateComponent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CreateComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->thread_type(), output);
  }

  // string class_name = 2;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.CreateComponent.class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_name(), output);
  }

  // repeated .Proto.CreateComponentParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->params(static_cast<int>(i)),
      output);
  }

  // uint64 sn = 4;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->sn(), output);
  }

  // bool is_to_all = 5;
  if (this->is_to_all() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_to_all(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.CreateComponent)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateComponent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CreateComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->thread_type(), target);
  }

  // string class_name = 2;
  if (this->class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.CreateComponent.class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->class_name(), target);
  }

  // repeated .Proto.CreateComponentParam params = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->params_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->params(static_cast<int>(i)), target);
  }

  // uint64 sn = 4;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->sn(), target);
  }

  // bool is_to_all = 5;
  if (this->is_to_all() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_to_all(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.CreateComponent)
  return target;
}

size_t CreateComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CreateComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.CreateComponentParam params = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->params(static_cast<int>(i)));
    }
  }

  // string class_name = 2;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->thread_type());
  }

  // bool is_to_all = 5;
  if (this->is_to_all() != 0) {
    total_size += 1 + 1;
  }

  // uint64 sn = 4;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CreateComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CreateComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CreateComponent)
    MergeFrom(*source);
  }
}

void CreateComponent::MergeFrom(const CreateComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CreateComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.thread_type() != 0) {
    set_thread_type(from.thread_type());
  }
  if (from.is_to_all() != 0) {
    set_is_to_all(from.is_to_all());
  }
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
}

void CreateComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CreateComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateComponent::CopyFrom(const CreateComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CreateComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateComponent::IsInitialized() const {
  return true;
}

void CreateComponent::InternalSwap(CreateComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&params_)->InternalSwap(CastToBase(&other->params_));
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thread_type_, other->thread_type_);
  swap(is_to_all_, other->is_to_all_);
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveComponent::InitAsDefaultInstance() {
}
class RemoveComponent::_Internal {
 public:
};

RemoveComponent::RemoveComponent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RemoveComponent)
}
RemoveComponent::RemoveComponent(const RemoveComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_ = from.sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.RemoveComponent)
}

void RemoveComponent::SharedCtor() {
  sn_ = PROTOBUF_ULONGLONG(0);
}

RemoveComponent::~RemoveComponent() {
  // @@protoc_insertion_point(destructor:Proto.RemoveComponent)
  SharedDtor();
}

void RemoveComponent::SharedDtor() {
}

void RemoveComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveComponent& RemoveComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveComponent_msg_2eproto.base);
  return *internal_default_instance();
}


void RemoveComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RemoveComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveComponent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RemoveComponent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RemoveComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RemoveComponent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveComponent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RemoveComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RemoveComponent)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveComponent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RemoveComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RemoveComponent)
  return target;
}

size_t RemoveComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RemoveComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RemoveComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RemoveComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RemoveComponent)
    MergeFrom(*source);
  }
}

void RemoveComponent::MergeFrom(const RemoveComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RemoveComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    set_sn(from.sn());
  }
}

void RemoveComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RemoveComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveComponent::CopyFrom(const RemoveComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RemoveComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveComponent::IsInitialized() const {
  return true;
}

void RemoveComponent::InternalSwap(RemoveComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSystem::InitAsDefaultInstance() {
}
class CreateSystem::_Internal {
 public:
};

CreateSystem::CreateSystem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CreateSystem)
}
CreateSystem::CreateSystem(const CreateSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.system_name().empty()) {
    system_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  thread_type_ = from.thread_type_;
  // @@protoc_insertion_point(copy_constructor:Proto.CreateSystem)
}

void CreateSystem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSystem_msg_2eproto.base);
  system_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thread_type_ = 0;
}

CreateSystem::~CreateSystem() {
  // @@protoc_insertion_point(destructor:Proto.CreateSystem)
  SharedDtor();
}

void CreateSystem::SharedDtor() {
  system_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSystem& CreateSystem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSystem_msg_2eproto.base);
  return *internal_default_instance();
}


void CreateSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CreateSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thread_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 thread_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          thread_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_system_name(), ptr, ctx, "Proto.CreateSystem.system_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateSystem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CreateSystem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 thread_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.CreateSystem.system_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CreateSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CreateSystem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateSystem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CreateSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->thread_type(), output);
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.CreateSystem.system_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->system_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.CreateSystem)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSystem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CreateSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->thread_type(), target);
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.CreateSystem.system_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->system_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.CreateSystem)
  return target;
}

size_t CreateSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CreateSystem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->system_name());
  }

  // int32 thread_type = 1;
  if (this->thread_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->thread_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CreateSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CreateSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CreateSystem)
    MergeFrom(*source);
  }
}

void CreateSystem::MergeFrom(const CreateSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CreateSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system_name().size() > 0) {

    system_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  if (from.thread_type() != 0) {
    set_thread_type(from.thread_type());
  }
}

void CreateSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CreateSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSystem::CopyFrom(const CreateSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CreateSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSystem::IsInitialized() const {
  return true;
}

void CreateSystem::InternalSwap(CreateSystem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  system_name_.Swap(&other->system_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thread_type_, other->thread_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountCheck::InitAsDefaultInstance() {
}
class AccountCheck::_Internal {
 public:
};

AccountCheck::AccountCheck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AccountCheck)
}
AccountCheck::AccountCheck(const AccountCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.AccountCheck)
}

void AccountCheck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountCheck_msg_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
}

AccountCheck::~AccountCheck() {
  // @@protoc_insertion_point(destructor:Proto.AccountCheck)
  SharedDtor();
}

void AccountCheck::SharedDtor() {
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountCheck& AccountCheck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountCheck_msg_2eproto.base);
  return *internal_default_instance();
}


void AccountCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AccountCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Proto.AccountCheck.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "Proto.AccountCheck.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountCheck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AccountCheck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.AccountCheck.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.AccountCheck.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AccountCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AccountCheck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountCheck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AccountCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.AccountCheck.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.AccountCheck.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AccountCheck)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCheck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AccountCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.AccountCheck.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.AccountCheck.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AccountCheck)
  return target;
}

size_t AccountCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AccountCheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountCheck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AccountCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountCheck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AccountCheck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AccountCheck)
    MergeFrom(*source);
  }
}

void AccountCheck::MergeFrom(const AccountCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AccountCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void AccountCheck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AccountCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCheck::CopyFrom(const AccountCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AccountCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCheck::IsInitialized() const {
  return true;
}

void AccountCheck::InternalSwap(AccountCheck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCheck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountCheckRs::InitAsDefaultInstance() {
}
class AccountCheckRs::_Internal {
 public:
};

AccountCheckRs::AccountCheckRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AccountCheckRs)
}
AccountCheckRs::AccountCheckRs(const AccountCheckRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:Proto.AccountCheckRs)
}

void AccountCheckRs::SharedCtor() {
  return_code_ = 0;
}

AccountCheckRs::~AccountCheckRs() {
  // @@protoc_insertion_point(destructor:Proto.AccountCheckRs)
  SharedDtor();
}

void AccountCheckRs::SharedDtor() {
}

void AccountCheckRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountCheckRs& AccountCheckRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountCheckRs_msg_2eproto.base);
  return *internal_default_instance();
}


void AccountCheckRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AccountCheckRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountCheckRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.AccountCheckReturnCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_code(static_cast<::Proto::AccountCheckReturnCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountCheckRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AccountCheckRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.AccountCheckReturnCode return_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_code(static_cast< ::Proto::AccountCheckReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AccountCheckRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AccountCheckRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountCheckRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AccountCheckRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.AccountCheckReturnCode return_code = 1;
  if (this->return_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->return_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AccountCheckRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCheckRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AccountCheckRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.AccountCheckReturnCode return_code = 1;
  if (this->return_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->return_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AccountCheckRs)
  return target;
}

size_t AccountCheckRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AccountCheckRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.AccountCheckReturnCode return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountCheckRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AccountCheckRs)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountCheckRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountCheckRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AccountCheckRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AccountCheckRs)
    MergeFrom(*source);
  }
}

void AccountCheckRs::MergeFrom(const AccountCheckRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AccountCheckRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
}

void AccountCheckRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AccountCheckRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCheckRs::CopyFrom(const AccountCheckRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AccountCheckRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCheckRs::IsInitialized() const {
  return true;
}

void AccountCheckRs::InternalSwap(AccountCheckRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCheckRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotState::InitAsDefaultInstance() {
}
class RobotState::_Internal {
 public:
};

RobotState::RobotState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RobotState)
}
RobotState::RobotState(const RobotState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:Proto.RobotState)
}

void RobotState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotState_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:Proto.RobotState)
  SharedDtor();
}

void RobotState::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RobotState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotState& RobotState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotState_msg_2eproto.base);
  return *internal_default_instance();
}


void RobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.RobotState.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RobotState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.RobotState.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RobotState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RobotState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.RobotState.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RobotState)
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.RobotState.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RobotState)
  return target;
}

size_t RobotState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RobotState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RobotState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RobotState)
    MergeFrom(*source);
  }
}

void RobotState::MergeFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void RobotState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotState::CopyFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {
  return true;
}

void RobotState::InternalSwap(RobotState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotSyncState::InitAsDefaultInstance() {
}
class RobotSyncState::_Internal {
 public:
};

RobotSyncState::RobotSyncState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RobotSyncState)
}
RobotSyncState::RobotSyncState(const RobotSyncState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      states_(from.states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.RobotSyncState)
}

void RobotSyncState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotSyncState_msg_2eproto.base);
}

RobotSyncState::~RobotSyncState() {
  // @@protoc_insertion_point(destructor:Proto.RobotSyncState)
  SharedDtor();
}

void RobotSyncState::SharedDtor() {
}

void RobotSyncState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotSyncState& RobotSyncState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotSyncState_msg_2eproto.base);
  return *internal_default_instance();
}


void RobotSyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RobotSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotSyncState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.RobotState states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotSyncState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RobotSyncState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.RobotState states = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RobotSyncState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RobotSyncState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotSyncState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RobotSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.RobotState states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RobotSyncState)
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotSyncState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RobotSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.RobotState states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->states(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RobotSyncState)
  return target;
}

size_t RobotSyncState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RobotSyncState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.RobotState states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->states(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotSyncState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RobotSyncState)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotSyncState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotSyncState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RobotSyncState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RobotSyncState)
    MergeFrom(*source);
  }
}

void RobotSyncState::MergeFrom(const RobotSyncState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RobotSyncState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
}

void RobotSyncState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RobotSyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotSyncState::CopyFrom(const RobotSyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RobotSyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotSyncState::IsInitialized() const {
  return true;
}

void RobotSyncState::InternalSwap(RobotSyncState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&states_)->InternalSwap(CastToBase(&other->states_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotSyncState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotCreate::InitAsDefaultInstance() {
}
class RobotCreate::_Internal {
 public:
};

RobotCreate::RobotCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RobotCreate)
}
RobotCreate::RobotCreate(const RobotCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:Proto.RobotCreate)
}

void RobotCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCreate_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RobotCreate::~RobotCreate() {
  // @@protoc_insertion_point(destructor:Proto.RobotCreate)
  SharedDtor();
}

void RobotCreate::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RobotCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCreate& RobotCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCreate_msg_2eproto.base);
  return *internal_default_instance();
}


void RobotCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RobotCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.RobotCreate.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RobotCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.RobotCreate.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RobotCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RobotCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RobotCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.RobotCreate.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RobotCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RobotCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.RobotCreate.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RobotCreate)
  return target;
}

size_t RobotCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RobotCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RobotCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RobotCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RobotCreate)
    MergeFrom(*source);
  }
}

void RobotCreate::MergeFrom(const RobotCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RobotCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void RobotCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RobotCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCreate::CopyFrom(const RobotCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RobotCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCreate::IsInitialized() const {
  return true;
}

void RobotCreate::InternalSwap(RobotCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerLittle::InitAsDefaultInstance() {
}
class PlayerLittle::_Internal {
 public:
};

PlayerLittle::PlayerLittle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerLittle)
}
PlayerLittle::PlayerLittle(const PlayerLittle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&template_id_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(template_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerLittle)
}

void PlayerLittle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerLittle_msg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&template_id_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(template_id_));
}

PlayerLittle::~PlayerLittle() {
  // @@protoc_insertion_point(destructor:Proto.PlayerLittle)
  SharedDtor();
}

void PlayerLittle::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerLittle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLittle& PlayerLittle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerLittle_msg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLittle::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerLittle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&template_id_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(template_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLittle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Proto.PlayerLittle.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 template_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLittle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerLittle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.PlayerLittle.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 template_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerLittle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerLittle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLittle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerLittle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sn(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerLittle.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // int32 template_id = 5;
  if (this->template_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->template_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PlayerLittle)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLittle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerLittle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sn(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerLittle.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // int32 template_id = 5;
  if (this->template_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->template_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerLittle)
  return target;
}

size_t PlayerLittle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerLittle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 template_id = 5;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->template_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLittle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerLittle)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLittle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerLittle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerLittle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerLittle)
    MergeFrom(*source);
  }
}

void PlayerLittle::MergeFrom(const PlayerLittle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerLittle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.template_id() != 0) {
    set_template_id(from.template_id());
  }
}

void PlayerLittle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerLittle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLittle::CopyFrom(const PlayerLittle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerLittle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLittle::IsInitialized() const {
  return true;
}

void PlayerLittle::InternalSwap(PlayerLittle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sn_, other->sn_);
  swap(level_, other->level_);
  swap(template_id_, other->template_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLittle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerList::InitAsDefaultInstance() {
}
class PlayerList::_Internal {
 public:
};

PlayerList::PlayerList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerList)
}
PlayerList::PlayerList(const PlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      player_(from.player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerList)
}

void PlayerList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerList_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerList::~PlayerList() {
  // @@protoc_insertion_point(destructor:Proto.PlayerList)
  SharedDtor();
}

void PlayerList::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerList& PlayerList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerList_msg_2eproto.base);
  return *internal_default_instance();
}


void PlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.PlayerList.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.PlayerLittle player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.PlayerList.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.PlayerLittle player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerList.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // repeated .Proto.PlayerLittle player = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->player(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PlayerList)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerList.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // repeated .Proto.PlayerLittle player = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->player(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerList)
  return target;
}

size_t PlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.PlayerLittle player = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->player_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->player(static_cast<int>(i)));
    }
  }

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerList)
    MergeFrom(*source);
  }
}

void PlayerList::MergeFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void PlayerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerList::CopyFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerList::IsInitialized() const {
  return true;
}

void PlayerList::InternalSwap(PlayerList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&player_)->InternalSwap(CastToBase(&other->player_));
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryPlayerList::InitAsDefaultInstance() {
}
class QueryPlayerList::_Internal {
 public:
};

QueryPlayerList::QueryPlayerList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryPlayerList)
}
QueryPlayerList::QueryPlayerList(const QueryPlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:Proto.QueryPlayerList)
}

void QueryPlayerList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryPlayerList_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryPlayerList::~QueryPlayerList() {
  // @@protoc_insertion_point(destructor:Proto.QueryPlayerList)
  SharedDtor();
}

void QueryPlayerList::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryPlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPlayerList& QueryPlayerList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPlayerList_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryPlayerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.QueryPlayerList.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryPlayerList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryPlayerList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.QueryPlayerList.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryPlayerList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryPlayerList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryPlayerList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.QueryPlayerList.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryPlayerList)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPlayerList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.QueryPlayerList.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryPlayerList)
  return target;
}

size_t QueryPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryPlayerList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPlayerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlayerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryPlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryPlayerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryPlayerList)
    MergeFrom(*source);
  }
}

void QueryPlayerList::MergeFrom(const QueryPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void QueryPlayerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlayerList::CopyFrom(const QueryPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlayerList::IsInitialized() const {
  return true;
}

void QueryPlayerList::InternalSwap(QueryPlayerList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPlayerList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryPlayer::InitAsDefaultInstance() {
}
class QueryPlayer::_Internal {
 public:
};

QueryPlayer::QueryPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryPlayer)
}
QueryPlayer::QueryPlayer(const QueryPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.QueryPlayer)
}

void QueryPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryPlayer_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

QueryPlayer::~QueryPlayer() {
  // @@protoc_insertion_point(destructor:Proto.QueryPlayer)
  SharedDtor();
}

void QueryPlayer::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPlayer& QueryPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.QueryPlayer.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 player_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.QueryPlayer.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.QueryPlayer.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.QueryPlayer.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryPlayer)
  return target;
}

size_t QueryPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryPlayer)
    MergeFrom(*source);
  }
}

void QueryPlayer::MergeFrom(const QueryPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void QueryPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlayer::CopyFrom(const QueryPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlayer::IsInitialized() const {
  return true;
}

void QueryPlayer::InternalSwap(QueryPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryPlayerRs::InitAsDefaultInstance() {
  ::Proto::_QueryPlayerRs_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class QueryPlayerRs::_Internal {
 public:
  static const ::Proto::Player& player(const QueryPlayerRs* msg);
};

const ::Proto::Player&
QueryPlayerRs::_Internal::player(const QueryPlayerRs* msg) {
  return *msg->player_;
}
void QueryPlayerRs::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
QueryPlayerRs::QueryPlayerRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryPlayerRs)
}
QueryPlayerRs::QueryPlayerRs(const QueryPlayerRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.QueryPlayerRs)
}

void QueryPlayerRs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryPlayerRs_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ = nullptr;
}

QueryPlayerRs::~QueryPlayerRs() {
  // @@protoc_insertion_point(destructor:Proto.QueryPlayerRs)
  SharedDtor();
}

void QueryPlayerRs::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void QueryPlayerRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPlayerRs& QueryPlayerRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPlayerRs_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryPlayerRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryPlayerRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryPlayerRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.QueryPlayerRs.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryPlayerRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryPlayerRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.QueryPlayerRs.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryPlayerRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryPlayerRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryPlayerRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryPlayerRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.QueryPlayerRs.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryPlayerRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPlayerRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryPlayerRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.QueryPlayerRs.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryPlayerRs)
  return target;
}

size_t QueryPlayerRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryPlayerRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPlayerRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryPlayerRs)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlayerRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryPlayerRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryPlayerRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryPlayerRs)
    MergeFrom(*source);
  }
}

void QueryPlayerRs::MergeFrom(const QueryPlayerRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryPlayerRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
}

void QueryPlayerRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryPlayerRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlayerRs::CopyFrom(const QueryPlayerRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryPlayerRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlayerRs::IsInitialized() const {
  return true;
}

void QueryPlayerRs::InternalSwap(QueryPlayerRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPlayerRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadAllAccount::InitAsDefaultInstance() {
}
class LoadAllAccount::_Internal {
 public:
};

LoadAllAccount::LoadAllAccount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoadAllAccount)
}
LoadAllAccount::LoadAllAccount(const LoadAllAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      server_id_(from.server_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.LoadAllAccount)
}

void LoadAllAccount::SharedCtor() {
}

LoadAllAccount::~LoadAllAccount() {
  // @@protoc_insertion_point(destructor:Proto.LoadAllAccount)
  SharedDtor();
}

void LoadAllAccount::SharedDtor() {
}

void LoadAllAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadAllAccount& LoadAllAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadAllAccount_msg_2eproto.base);
  return *internal_default_instance();
}


void LoadAllAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoadAllAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadAllAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_server_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_server_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadAllAccount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoadAllAccount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_server_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoadAllAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoadAllAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadAllAccount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoadAllAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 server_id = 1;
  if (this->server_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_server_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->server_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->server_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoadAllAccount)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadAllAccount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoadAllAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 server_id = 1;
  if (this->server_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _server_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->server_id_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoadAllAccount)
  return target;
}

size_t LoadAllAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoadAllAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 server_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->server_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _server_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadAllAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoadAllAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadAllAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadAllAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoadAllAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoadAllAccount)
    MergeFrom(*source);
  }
}

void LoadAllAccount::MergeFrom(const LoadAllAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoadAllAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_id_.MergeFrom(from.server_id_);
}

void LoadAllAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoadAllAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadAllAccount::CopyFrom(const LoadAllAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoadAllAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadAllAccount::IsInitialized() const {
  return true;
}

void LoadAllAccount::InternalSwap(LoadAllAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_id_.InternalSwap(&other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadAllAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadAllAccountRet::InitAsDefaultInstance() {
}
class LoadAllAccountRet::_Internal {
 public:
};

void LoadAllAccountRet::clear_account_list() {
  account_list_.Clear();
}
LoadAllAccountRet::LoadAllAccountRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoadAllAccountRet)
}
LoadAllAccountRet::LoadAllAccountRet(const LoadAllAccountRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      account_list_(from.account_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.LoadAllAccountRet)
}

void LoadAllAccountRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadAllAccountRet_msg_2eproto.base);
}

LoadAllAccountRet::~LoadAllAccountRet() {
  // @@protoc_insertion_point(destructor:Proto.LoadAllAccountRet)
  SharedDtor();
}

void LoadAllAccountRet::SharedDtor() {
}

void LoadAllAccountRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadAllAccountRet& LoadAllAccountRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadAllAccountRet_msg_2eproto.base);
  return *internal_default_instance();
}


void LoadAllAccountRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoadAllAccountRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadAllAccountRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.DBAccount account_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_account_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadAllAccountRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoadAllAccountRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.DBAccount account_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_account_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoadAllAccountRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoadAllAccountRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadAllAccountRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoadAllAccountRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.DBAccount account_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->account_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoadAllAccountRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadAllAccountRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoadAllAccountRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.DBAccount account_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->account_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->account_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoadAllAccountRet)
  return target;
}

size_t LoadAllAccountRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoadAllAccountRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.DBAccount account_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->account_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->account_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadAllAccountRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoadAllAccountRet)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadAllAccountRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadAllAccountRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoadAllAccountRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoadAllAccountRet)
    MergeFrom(*source);
  }
}

void LoadAllAccountRet::MergeFrom(const LoadAllAccountRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoadAllAccountRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_list_.MergeFrom(from.account_list_);
}

void LoadAllAccountRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoadAllAccountRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadAllAccountRet::CopyFrom(const LoadAllAccountRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoadAllAccountRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadAllAccountRet::IsInitialized() const {
  return true;
}

void LoadAllAccountRet::InternalSwap(LoadAllAccountRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&account_list_)->InternalSwap(CastToBase(&other->account_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadAllAccountRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadAllPlayer::InitAsDefaultInstance() {
}
class LoadAllPlayer::_Internal {
 public:
};

LoadAllPlayer::LoadAllPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoadAllPlayer)
}
LoadAllPlayer::LoadAllPlayer(const LoadAllPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      server_id_(from.server_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.LoadAllPlayer)
}

void LoadAllPlayer::SharedCtor() {
}

LoadAllPlayer::~LoadAllPlayer() {
  // @@protoc_insertion_point(destructor:Proto.LoadAllPlayer)
  SharedDtor();
}

void LoadAllPlayer::SharedDtor() {
}

void LoadAllPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadAllPlayer& LoadAllPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadAllPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void LoadAllPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoadAllPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadAllPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_server_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_server_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadAllPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoadAllPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_server_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_server_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoadAllPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoadAllPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadAllPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoadAllPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 server_id = 1;
  if (this->server_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_server_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->server_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->server_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoadAllPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadAllPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoadAllPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 server_id = 1;
  if (this->server_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _server_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->server_id_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoadAllPlayer)
  return target;
}

size_t LoadAllPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoadAllPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 server_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->server_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _server_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadAllPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoadAllPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadAllPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadAllPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoadAllPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoadAllPlayer)
    MergeFrom(*source);
  }
}

void LoadAllPlayer::MergeFrom(const LoadAllPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoadAllPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_id_.MergeFrom(from.server_id_);
}

void LoadAllPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoadAllPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadAllPlayer::CopyFrom(const LoadAllPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoadAllPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadAllPlayer::IsInitialized() const {
  return true;
}

void LoadAllPlayer::InternalSwap(LoadAllPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_id_.InternalSwap(&other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadAllPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadAllPlayerRet::InitAsDefaultInstance() {
}
class LoadAllPlayerRet::_Internal {
 public:
};

void LoadAllPlayerRet::clear_player_list() {
  player_list_.Clear();
}
LoadAllPlayerRet::LoadAllPlayerRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoadAllPlayerRet)
}
LoadAllPlayerRet::LoadAllPlayerRet(const LoadAllPlayerRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      player_list_(from.player_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.LoadAllPlayerRet)
}

void LoadAllPlayerRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadAllPlayerRet_msg_2eproto.base);
}

LoadAllPlayerRet::~LoadAllPlayerRet() {
  // @@protoc_insertion_point(destructor:Proto.LoadAllPlayerRet)
  SharedDtor();
}

void LoadAllPlayerRet::SharedDtor() {
}

void LoadAllPlayerRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadAllPlayerRet& LoadAllPlayerRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadAllPlayerRet_msg_2eproto.base);
  return *internal_default_instance();
}


void LoadAllPlayerRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoadAllPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadAllPlayerRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.Player player_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_player_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadAllPlayerRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoadAllPlayerRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.Player player_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoadAllPlayerRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoadAllPlayerRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadAllPlayerRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoadAllPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Player player_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->player_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoadAllPlayerRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadAllPlayerRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoadAllPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Player player_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->player_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoadAllPlayerRet)
  return target;
}

size_t LoadAllPlayerRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoadAllPlayerRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Player player_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadAllPlayerRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoadAllPlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadAllPlayerRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadAllPlayerRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoadAllPlayerRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoadAllPlayerRet)
    MergeFrom(*source);
  }
}

void LoadAllPlayerRet::MergeFrom(const LoadAllPlayerRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoadAllPlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
}

void LoadAllPlayerRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoadAllPlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadAllPlayerRet::CopyFrom(const LoadAllPlayerRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoadAllPlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadAllPlayerRet::IsInitialized() const {
  return true;
}

void LoadAllPlayerRet::InternalSwap(LoadAllPlayerRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&player_list_)->InternalSwap(CastToBase(&other->player_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadAllPlayerRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadPlayer::InitAsDefaultInstance() {
}
class LoadPlayer::_Internal {
 public:
};

LoadPlayer::LoadPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoadPlayer)
}
LoadPlayer::LoadPlayer(const LoadPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.LoadPlayer)
}

void LoadPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadPlayer_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_sn_ = PROTOBUF_LONGLONG(0);
}

LoadPlayer::~LoadPlayer() {
  // @@protoc_insertion_point(destructor:Proto.LoadPlayer)
  SharedDtor();
}

void LoadPlayer::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPlayer& LoadPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void LoadPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoadPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.LoadPlayer.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoadPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.LoadPlayer.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoadPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoadPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoadPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->player_sn(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoadPlayer.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoadPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoadPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->player_sn(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoadPlayer.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoadPlayer)
  return target;
}

size_t LoadPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoadPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // int64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoadPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoadPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoadPlayer)
    MergeFrom(*source);
  }
}

void LoadPlayer::MergeFrom(const LoadPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoadPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void LoadPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoadPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlayer::CopyFrom(const LoadPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoadPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlayer::IsInitialized() const {
  return true;
}

void LoadPlayer::InternalSwap(LoadPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadPlayerRet::InitAsDefaultInstance() {
  ::Proto::_LoadPlayerRet_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class LoadPlayerRet::_Internal {
 public:
  static const ::Proto::Player& player_info(const LoadPlayerRet* msg);
};

const ::Proto::Player&
LoadPlayerRet::_Internal::player_info(const LoadPlayerRet* msg) {
  return *msg->player_info_;
}
void LoadPlayerRet::clear_player_info() {
  if (GetArenaNoVirtual() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
LoadPlayerRet::LoadPlayerRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoadPlayerRet)
}
LoadPlayerRet::LoadPlayerRet(const LoadPlayerRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::Proto::Player(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.LoadPlayerRet)
}

void LoadPlayerRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadPlayerRet_msg_2eproto.base);
  player_info_ = nullptr;
}

LoadPlayerRet::~LoadPlayerRet() {
  // @@protoc_insertion_point(destructor:Proto.LoadPlayerRet)
  SharedDtor();
}

void LoadPlayerRet::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void LoadPlayerRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPlayerRet& LoadPlayerRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPlayerRet_msg_2eproto.base);
  return *internal_default_instance();
}


void LoadPlayerRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoadPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadPlayerRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.Player player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadPlayerRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoadPlayerRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.Player player_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoadPlayerRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoadPlayerRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadPlayerRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoadPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Player player_info = 1;
  if (this->has_player_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::player_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoadPlayerRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPlayerRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoadPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Player player_info = 1;
  if (this->has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoadPlayerRet)
  return target;
}

size_t LoadPlayerRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoadPlayerRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player_info = 1;
  if (this->has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPlayerRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoadPlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPlayerRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPlayerRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoadPlayerRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoadPlayerRet)
    MergeFrom(*source);
  }
}

void LoadPlayerRet::MergeFrom(const LoadPlayerRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoadPlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    mutable_player_info()->::Proto::Player::MergeFrom(from.player_info());
  }
}

void LoadPlayerRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoadPlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlayerRet::CopyFrom(const LoadPlayerRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoadPlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlayerRet::IsInitialized() const {
  return true;
}

void LoadPlayerRet::InternalSwap(LoadPlayerRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_info_, other->player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPlayerRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerLogin::InitAsDefaultInstance() {
}
class PlayerLogin::_Internal {
 public:
};

PlayerLogin::PlayerLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerLogin)
}
PlayerLogin::PlayerLogin(const PlayerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerLogin)
}

void PlayerLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerLogin_msg_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
}

PlayerLogin::~PlayerLogin() {
  // @@protoc_insertion_point(destructor:Proto.PlayerLogin)
  SharedDtor();
}

void PlayerLogin::SharedDtor() {
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLogin& PlayerLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerLogin_msg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Proto.PlayerLogin.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "Proto.PlayerLogin.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLogin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerLogin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.PlayerLogin.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.PlayerLogin.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLogin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerLogin.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerLogin.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PlayerLogin)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerLogin.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerLogin.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerLogin)
  return target;
}

size_t PlayerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerLogin)
    MergeFrom(*source);
  }
}

void PlayerLogin::MergeFrom(const PlayerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void PlayerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogin::CopyFrom(const PlayerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogin::IsInitialized() const {
  return true;
}

void PlayerLogin::InternalSwap(PlayerLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerLoginRet::InitAsDefaultInstance() {
  ::Proto::_PlayerLoginRet_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class PlayerLoginRet::_Internal {
 public:
  static const ::Proto::Player& player(const PlayerLoginRet* msg);
};

const ::Proto::Player&
PlayerLoginRet::_Internal::player(const PlayerLoginRet* msg) {
  return *msg->player_;
}
void PlayerLoginRet::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
PlayerLoginRet::PlayerLoginRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerLoginRet)
}
PlayerLoginRet::PlayerLoginRet(const PlayerLoginRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerLoginRet)
}

void PlayerLoginRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerLoginRet_msg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ret_));
}

PlayerLoginRet::~PlayerLoginRet() {
  // @@protoc_insertion_point(destructor:Proto.PlayerLoginRet)
  SharedDtor();
}

void PlayerLoginRet::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void PlayerLoginRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoginRet& PlayerLoginRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerLoginRet_msg_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoginRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerLoginRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerLoginRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.LoginRetCode ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret(static_cast<::Proto::LoginRetCode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerLoginRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerLoginRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.LoginRetCode ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::Proto::LoginRetCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerLoginRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerLoginRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerLoginRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerLoginRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.LoginRetCode ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PlayerLoginRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLoginRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerLoginRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.LoginRetCode ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerLoginRet)
  return target;
}

size_t PlayerLoginRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerLoginRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Proto.LoginRetCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoginRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerLoginRet)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLoginRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerLoginRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerLoginRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerLoginRet)
    MergeFrom(*source);
  }
}

void PlayerLoginRet::MergeFrom(const PlayerLoginRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerLoginRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void PlayerLoginRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerLoginRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginRet::CopyFrom(const PlayerLoginRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerLoginRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginRet::IsInitialized() const {
  return true;
}

void PlayerLoginRet::InternalSwap(PlayerLoginRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLoginRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerCreate::InitAsDefaultInstance() {
}
class PlayerCreate::_Internal {
 public:
};

PlayerCreate::PlayerCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerCreate)
}
PlayerCreate::PlayerCreate(const PlayerCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  template_id_ = from.template_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerCreate)
}

void PlayerCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerCreate_msg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_id_ = 0;
}

PlayerCreate::~PlayerCreate() {
  // @@protoc_insertion_point(destructor:Proto.PlayerCreate)
  SharedDtor();
}

void PlayerCreate::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCreate& PlayerCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerCreate_msg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Proto.PlayerCreate.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 template_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.PlayerCreate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 template_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerCreate.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PlayerCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerCreate.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerCreate)
  return target;
}

size_t PlayerCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->template_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerCreate)
    MergeFrom(*source);
  }
}

void PlayerCreate::MergeFrom(const PlayerCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.template_id() != 0) {
    set_template_id(from.template_id());
  }
}

void PlayerCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCreate::CopyFrom(const PlayerCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCreate::IsInitialized() const {
  return true;
}

void PlayerCreate::InternalSwap(PlayerCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(template_id_, other->template_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerCreateRet::InitAsDefaultInstance() {
  ::Proto::_PlayerCreateRet_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class PlayerCreateRet::_Internal {
 public:
  static const ::Proto::Player& player(const PlayerCreateRet* msg);
};

const ::Proto::Player&
PlayerCreateRet::_Internal::player(const PlayerCreateRet* msg) {
  return *msg->player_;
}
void PlayerCreateRet::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
PlayerCreateRet::PlayerCreateRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerCreateRet)
}
PlayerCreateRet::PlayerCreateRet(const PlayerCreateRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerCreateRet)
}

void PlayerCreateRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerCreateRet_msg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ret_));
}

PlayerCreateRet::~PlayerCreateRet() {
  // @@protoc_insertion_point(destructor:Proto.PlayerCreateRet)
  SharedDtor();
}

void PlayerCreateRet::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void PlayerCreateRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerCreateRet& PlayerCreateRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerCreateRet_msg_2eproto.base);
  return *internal_default_instance();
}


void PlayerCreateRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerCreateRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerCreateRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.CreateRetCode ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret(static_cast<::Proto::CreateRetCode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerCreateRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerCreateRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.CreateRetCode ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::Proto::CreateRetCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerCreateRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerCreateRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerCreateRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerCreateRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CreateRetCode ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PlayerCreateRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerCreateRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerCreateRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.CreateRetCode ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerCreateRet)
  return target;
}

size_t PlayerCreateRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerCreateRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Proto.CreateRetCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCreateRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerCreateRet)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCreateRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerCreateRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerCreateRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerCreateRet)
    MergeFrom(*source);
  }
}

void PlayerCreateRet::MergeFrom(const PlayerCreateRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerCreateRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void PlayerCreateRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerCreateRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCreateRet::CopyFrom(const PlayerCreateRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerCreateRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCreateRet::IsInitialized() const {
  return true;
}

void PlayerCreateRet::InternalSwap(PlayerCreateRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCreateRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectPlayer::InitAsDefaultInstance() {
}
class SelectPlayer::_Internal {
 public:
};

SelectPlayer::SelectPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SelectPlayer)
}
SelectPlayer::SelectPlayer(const SelectPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.SelectPlayer)
}

void SelectPlayer::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

SelectPlayer::~SelectPlayer() {
  // @@protoc_insertion_point(destructor:Proto.SelectPlayer)
  SharedDtor();
}

void SelectPlayer::SharedDtor() {
}

void SelectPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPlayer& SelectPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void SelectPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SelectPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SelectPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SelectPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SelectPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SelectPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SelectPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SelectPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SelectPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SelectPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SelectPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SelectPlayer)
  return target;
}

size_t SelectPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SelectPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SelectPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SelectPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SelectPlayer)
    MergeFrom(*source);
  }
}

void SelectPlayer::MergeFrom(const SelectPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SelectPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void SelectPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SelectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectPlayer::CopyFrom(const SelectPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SelectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPlayer::IsInitialized() const {
  return true;
}

void SelectPlayer::InternalSwap(SelectPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectPlayerRs::InitAsDefaultInstance() {
}
class SelectPlayerRs::_Internal {
 public:
};

SelectPlayerRs::SelectPlayerRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SelectPlayerRs)
}
SelectPlayerRs::SelectPlayerRs(const SelectPlayerRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:Proto.SelectPlayerRs)
}

void SelectPlayerRs::SharedCtor() {
  return_code_ = 0;
}

SelectPlayerRs::~SelectPlayerRs() {
  // @@protoc_insertion_point(destructor:Proto.SelectPlayerRs)
  SharedDtor();
}

void SelectPlayerRs::SharedDtor() {
}

void SelectPlayerRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPlayerRs& SelectPlayerRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPlayerRs_msg_2eproto.base);
  return *internal_default_instance();
}


void SelectPlayerRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SelectPlayerRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SelectPlayerRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_code(static_cast<::Proto::SelectPlayerRs_SelectPlayerReturnCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SelectPlayerRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SelectPlayerRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_code(static_cast< ::Proto::SelectPlayerRs_SelectPlayerReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SelectPlayerRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SelectPlayerRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SelectPlayerRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SelectPlayerRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
  if (this->return_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->return_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SelectPlayerRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPlayerRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SelectPlayerRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
  if (this->return_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->return_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SelectPlayerRs)
  return target;
}

size_t SelectPlayerRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SelectPlayerRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPlayerRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SelectPlayerRs)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectPlayerRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectPlayerRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SelectPlayerRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SelectPlayerRs)
    MergeFrom(*source);
  }
}

void SelectPlayerRs::MergeFrom(const SelectPlayerRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SelectPlayerRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
}

void SelectPlayerRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SelectPlayerRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectPlayerRs::CopyFrom(const SelectPlayerRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SelectPlayerRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPlayerRs::IsInitialized() const {
  return true;
}

void SelectPlayerRs::InternalSwap(SelectPlayerRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectPlayerRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SavePlayer::InitAsDefaultInstance() {
  ::Proto::_SavePlayer_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class SavePlayer::_Internal {
 public:
  static const ::Proto::Player& player(const SavePlayer* msg);
};

const ::Proto::Player&
SavePlayer::_Internal::player(const SavePlayer* msg) {
  return *msg->player_;
}
void SavePlayer::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
SavePlayer::SavePlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SavePlayer)
}
SavePlayer::SavePlayer(const SavePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  save_mode_ = from.save_mode_;
  // @@protoc_insertion_point(copy_constructor:Proto.SavePlayer)
}

void SavePlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SavePlayer_msg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_mode_) -
      reinterpret_cast<char*>(&player_)) + sizeof(save_mode_));
}

SavePlayer::~SavePlayer() {
  // @@protoc_insertion_point(destructor:Proto.SavePlayer)
  SharedDtor();
}

void SavePlayer::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void SavePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavePlayer& SavePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavePlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void SavePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SavePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  save_mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SavePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.ESaveMode save_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_save_mode(static_cast<::Proto::ESaveMode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SavePlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SavePlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.ESaveMode save_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_save_mode(static_cast< ::Proto::ESaveMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SavePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SavePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SavePlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SavePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ESaveMode save_mode = 1;
  if (this->save_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->save_mode(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SavePlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* SavePlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SavePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ESaveMode save_mode = 1;
  if (this->save_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->save_mode(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SavePlayer)
  return target;
}

size_t SavePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SavePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Proto.ESaveMode save_mode = 1;
  if (this->save_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->save_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SavePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SavePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SavePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SavePlayer)
    MergeFrom(*source);
  }
}

void SavePlayer::MergeFrom(const SavePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SavePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.save_mode() != 0) {
    set_save_mode(from.save_mode());
  }
}

void SavePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SavePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavePlayer::CopyFrom(const SavePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SavePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavePlayer::IsInitialized() const {
  return true;
}

void SavePlayer::InternalSwap(SavePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(save_mode_, other->save_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldSyncToGather::InitAsDefaultInstance() {
}
class WorldSyncToGather::_Internal {
 public:
};

WorldSyncToGather::WorldSyncToGather()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.WorldSyncToGather)
}
WorldSyncToGather::WorldSyncToGather(const WorldSyncToGather& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_remove_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(is_remove_));
  // @@protoc_insertion_point(copy_constructor:Proto.WorldSyncToGather)
}

void WorldSyncToGather::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_remove_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(is_remove_));
}

WorldSyncToGather::~WorldSyncToGather() {
  // @@protoc_insertion_point(destructor:Proto.WorldSyncToGather)
  SharedDtor();
}

void WorldSyncToGather::SharedDtor() {
}

void WorldSyncToGather::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldSyncToGather& WorldSyncToGather::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldSyncToGather_msg_2eproto.base);
  return *internal_default_instance();
}


void WorldSyncToGather::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.WorldSyncToGather)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_remove_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(is_remove_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorldSyncToGather::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 world_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_remove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorldSyncToGather::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.WorldSyncToGather)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 world_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 world_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 online = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_remove = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_remove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.WorldSyncToGather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.WorldSyncToGather)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorldSyncToGather::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.WorldSyncToGather)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->world_sn(), output);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->world_id(), output);
  }

  // int32 online = 3;
  if (this->online() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->online(), output);
  }

  // bool is_remove = 4;
  if (this->is_remove() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_remove(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.WorldSyncToGather)
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldSyncToGather::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.WorldSyncToGather)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->world_sn(), target);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->world_id(), target);
  }

  // int32 online = 3;
  if (this->online() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->online(), target);
  }

  // bool is_remove = 4;
  if (this->is_remove() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_remove(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.WorldSyncToGather)
  return target;
}

size_t WorldSyncToGather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.WorldSyncToGather)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 online = 3;
  if (this->online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->online());
  }

  // bool is_remove = 4;
  if (this->is_remove() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldSyncToGather::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.WorldSyncToGather)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldSyncToGather* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldSyncToGather>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.WorldSyncToGather)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.WorldSyncToGather)
    MergeFrom(*source);
  }
}

void WorldSyncToGather::MergeFrom(const WorldSyncToGather& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.WorldSyncToGather)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
  if (from.is_remove() != 0) {
    set_is_remove(from.is_remove());
  }
}

void WorldSyncToGather::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.WorldSyncToGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldSyncToGather::CopyFrom(const WorldSyncToGather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.WorldSyncToGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldSyncToGather::IsInitialized() const {
  return true;
}

void WorldSyncToGather::InternalSwap(WorldSyncToGather* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(world_id_, other->world_id_);
  swap(online_, other->online_);
  swap(is_remove_, other->is_remove_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldSyncToGather::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldProxySyncToGather::InitAsDefaultInstance() {
}
class WorldProxySyncToGather::_Internal {
 public:
};

WorldProxySyncToGather::WorldProxySyncToGather()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.WorldProxySyncToGather)
}
WorldProxySyncToGather::WorldProxySyncToGather(const WorldProxySyncToGather& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:Proto.WorldProxySyncToGather)
}

void WorldProxySyncToGather::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(online_));
}

WorldProxySyncToGather::~WorldProxySyncToGather() {
  // @@protoc_insertion_point(destructor:Proto.WorldProxySyncToGather)
  SharedDtor();
}

void WorldProxySyncToGather::SharedDtor() {
}

void WorldProxySyncToGather::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldProxySyncToGather& WorldProxySyncToGather::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldProxySyncToGather_msg_2eproto.base);
  return *internal_default_instance();
}


void WorldProxySyncToGather::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.WorldProxySyncToGather)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorldProxySyncToGather::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 world_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_remove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorldProxySyncToGather::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.WorldProxySyncToGather)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 world_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_remove = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_remove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 world_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 online = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.WorldProxySyncToGather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.WorldProxySyncToGather)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorldProxySyncToGather::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.WorldProxySyncToGather)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->world_sn(), output);
  }

  // bool is_remove = 2;
  if (this->is_remove() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_remove(), output);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->world_id(), output);
  }

  // int32 online = 4;
  if (this->online() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.WorldProxySyncToGather)
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldProxySyncToGather::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.WorldProxySyncToGather)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->world_sn(), target);
  }

  // bool is_remove = 2;
  if (this->is_remove() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_remove(), target);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->world_id(), target);
  }

  // int32 online = 4;
  if (this->online() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.WorldProxySyncToGather)
  return target;
}

size_t WorldProxySyncToGather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.WorldProxySyncToGather)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // bool is_remove = 2;
  if (this->is_remove() != 0) {
    total_size += 1 + 1;
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 online = 4;
  if (this->online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->online());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldProxySyncToGather::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.WorldProxySyncToGather)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldProxySyncToGather* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldProxySyncToGather>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.WorldProxySyncToGather)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.WorldProxySyncToGather)
    MergeFrom(*source);
  }
}

void WorldProxySyncToGather::MergeFrom(const WorldProxySyncToGather& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.WorldProxySyncToGather)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.is_remove() != 0) {
    set_is_remove(from.is_remove());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void WorldProxySyncToGather::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.WorldProxySyncToGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldProxySyncToGather::CopyFrom(const WorldProxySyncToGather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.WorldProxySyncToGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldProxySyncToGather::IsInitialized() const {
  return true;
}

void WorldProxySyncToGather::InternalSwap(WorldProxySyncToGather* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(is_remove_, other->is_remove_);
  swap(world_id_, other->world_id_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldProxySyncToGather::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameToken::InitAsDefaultInstance() {
}
class GameToken::_Internal {
 public:
};

GameToken::GameToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameToken)
}
GameToken::GameToken(const GameToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&return_code_, &from.return_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&return_code_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.GameToken)
}

void GameToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToken_msg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(server_id_));
}

GameToken::~GameToken() {
  // @@protoc_insertion_point(destructor:Proto.GameToken)
  SharedDtor();
}

void GameToken::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameToken& GameToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToken_msg_2eproto.base);
  return *internal_default_instance();
}


void GameToken::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&return_code_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.GameToken.ReturnCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_code(static_cast<::Proto::GameToken_ReturnCode>(val));
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "Proto.GameToken.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "Proto.GameToken.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Proto.GameToken.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "Proto.GameToken.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameToken::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameToken)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.GameToken.ReturnCode return_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_code(static_cast< ::Proto::GameToken_ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.GameToken.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.GameToken.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.GameToken.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.GameToken.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameToken::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.GameToken.ReturnCode return_code = 1;
  if (this->return_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->return_code(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->server_id(), output);
  }

  // string channel = 6;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->channel(), output);
  }

  // string uuid = 7;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GameToken)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToken::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.GameToken.ReturnCode return_code = 1;
  if (this->return_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->return_code(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->server_id(), target);
  }

  // string channel = 6;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // string uuid = 7;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.GameToken.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameToken)
  return target;
}

size_t GameToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string channel = 6;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string uuid = 7;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .Proto.GameToken.ReturnCode return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_code());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameToken)
  GOOGLE_DCHECK_NE(&from, this);
  const GameToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameToken)
    MergeFrom(*source);
  }
}

void GameToken::MergeFrom(const GameToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void GameToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToken::CopyFrom(const GameToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToken::IsInitialized() const {
  return true;
}

void GameToken::InternalSwap(GameToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_code_, other->return_code_);
  swap(port_, other->port_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginByToken::InitAsDefaultInstance() {
}
class LoginByToken::_Internal {
 public:
};

LoginByToken::LoginByToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoginByToken)
}
LoginByToken::LoginByToken(const LoginByToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.LoginByToken)
}

void LoginByToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginByToken_msg_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
}

LoginByToken::~LoginByToken() {
  // @@protoc_insertion_point(destructor:Proto.LoginByToken)
  SharedDtor();
}

void LoginByToken::SharedDtor() {
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginByToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginByToken& LoginByToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginByToken_msg_2eproto.base);
  return *internal_default_instance();
}


void LoginByToken::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoginByToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginByToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Proto.LoginByToken.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "Proto.LoginByToken.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.LoginByToken.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "Proto.LoginByToken.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginByToken::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoginByToken)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.LoginByToken.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.LoginByToken.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.LoginByToken.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.LoginByToken.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoginByToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoginByToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginByToken::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoginByToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoginByToken)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginByToken::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoginByToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.LoginByToken.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoginByToken)
  return target;
}

size_t LoginByToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoginByToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginByToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoginByToken)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginByToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginByToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoginByToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoginByToken)
    MergeFrom(*source);
  }
}

void LoginByToken::MergeFrom(const LoginByToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoginByToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void LoginByToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoginByToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginByToken::CopyFrom(const LoginByToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoginByToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginByToken::IsInitialized() const {
  return true;
}

void LoginByToken::InternalSwap(LoginByToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginByToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginByTokenRs::InitAsDefaultInstance() {
}
class LoginByTokenRs::_Internal {
 public:
};

LoginByTokenRs::LoginByTokenRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.LoginByTokenRs)
}
LoginByTokenRs::LoginByTokenRs(const LoginByTokenRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:Proto.LoginByTokenRs)
}

void LoginByTokenRs::SharedCtor() {
  return_code_ = 0;
}

LoginByTokenRs::~LoginByTokenRs() {
  // @@protoc_insertion_point(destructor:Proto.LoginByTokenRs)
  SharedDtor();
}

void LoginByTokenRs::SharedDtor() {
}

void LoginByTokenRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginByTokenRs& LoginByTokenRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginByTokenRs_msg_2eproto.base);
  return *internal_default_instance();
}


void LoginByTokenRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.LoginByTokenRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginByTokenRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_code(static_cast<::Proto::LoginByTokenRs_ReturnCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginByTokenRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.LoginByTokenRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_code(static_cast< ::Proto::LoginByTokenRs_ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.LoginByTokenRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.LoginByTokenRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginByTokenRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.LoginByTokenRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
  if (this->return_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->return_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.LoginByTokenRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginByTokenRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.LoginByTokenRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
  if (this->return_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->return_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.LoginByTokenRs)
  return target;
}

size_t LoginByTokenRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.LoginByTokenRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginByTokenRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.LoginByTokenRs)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginByTokenRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginByTokenRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.LoginByTokenRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.LoginByTokenRs)
    MergeFrom(*source);
  }
}

void LoginByTokenRs::MergeFrom(const LoginByTokenRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.LoginByTokenRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
}

void LoginByTokenRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.LoginByTokenRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginByTokenRs::CopyFrom(const LoginByTokenRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.LoginByTokenRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginByTokenRs::IsInitialized() const {
  return true;
}

void LoginByTokenRs::InternalSwap(LoginByTokenRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginByTokenRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenInfo::InitAsDefaultInstance() {
}
class TokenInfo::_Internal {
 public:
};

TokenInfo::TokenInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TokenInfo)
}
TokenInfo::TokenInfo(const TokenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.TokenInfo)
}

void TokenInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenInfo_msg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

TokenInfo::~TokenInfo() {
  // @@protoc_insertion_point(destructor:Proto.TokenInfo)
  SharedDtor();
}

void TokenInfo::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenInfo& TokenInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenInfo_msg_2eproto.base);
  return *internal_default_instance();
}


void TokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TokenInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "Proto.TokenInfo.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 player_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TokenInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TokenInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.TokenInfo.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TokenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TokenInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TokenInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.TokenInfo.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.TokenInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.TokenInfo.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TokenInfo)
  return target;
}

size_t TokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TokenInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TokenInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TokenInfo)
    MergeFrom(*source);
  }
}

void TokenInfo::MergeFrom(const TokenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void TokenInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenInfo::CopyFrom(const TokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenInfo::IsInitialized() const {
  return true;
}

void TokenInfo::InternalSwap(TokenInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncPlayer::InitAsDefaultInstance() {
  ::Proto::_SyncPlayer_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class SyncPlayer::_Internal {
 public:
  static const ::Proto::Player& player(const SyncPlayer* msg);
};

const ::Proto::Player&
SyncPlayer::_Internal::player(const SyncPlayer* msg) {
  return *msg->player_;
}
void SyncPlayer::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
SyncPlayer::SyncPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SyncPlayer)
}
SyncPlayer::SyncPlayer(const SyncPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.SyncPlayer)
}

void SyncPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncPlayer_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(app_id_));
}

SyncPlayer::~SyncPlayer() {
  // @@protoc_insertion_point(destructor:Proto.SyncPlayer)
  SharedDtor();
}

void SyncPlayer::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void SyncPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPlayer& SyncPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void SyncPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SyncPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  app_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.SyncPlayer.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SyncPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.SyncPlayer.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SyncPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SyncPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SyncPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 app_id = 1;
  if (this->app_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.SyncPlayer.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // .Proto.Player player = 3;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SyncPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SyncPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 app_id = 1;
  if (this->app_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->app_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.SyncPlayer.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // .Proto.Player player = 3;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SyncPlayer)
  return target;
}

size_t SyncPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SyncPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // .Proto.Player player = 3;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 app_id = 1;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SyncPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SyncPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SyncPlayer)
    MergeFrom(*source);
  }
}

void SyncPlayer::MergeFrom(const SyncPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SyncPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
}

void SyncPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SyncPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayer::CopyFrom(const SyncPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SyncPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayer::IsInitialized() const {
  return true;
}

void SyncPlayer::InternalSwap(SyncPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterWorld::InitAsDefaultInstance() {
  ::Proto::_EnterWorld_default_instance_._instance.get_mutable()->position_ = const_cast< ::Proto::Vector3*>(
      ::Proto::Vector3::internal_default_instance());
  ::Proto::_EnterWorld_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::Proto::Vector3*>(
      ::Proto::Vector3::internal_default_instance());
  ::Proto::_EnterWorld_default_instance_._instance.get_mutable()->world_data_ = const_cast< ::Proto::DBWorldData*>(
      ::Proto::DBWorldData::internal_default_instance());
}
class EnterWorld::_Internal {
 public:
  static const ::Proto::Vector3& position(const EnterWorld* msg);
  static const ::Proto::Vector3& rotation(const EnterWorld* msg);
  static const ::Proto::DBWorldData& world_data(const EnterWorld* msg);
};

const ::Proto::Vector3&
EnterWorld::_Internal::position(const EnterWorld* msg) {
  return *msg->position_;
}
const ::Proto::Vector3&
EnterWorld::_Internal::rotation(const EnterWorld* msg) {
  return *msg->rotation_;
}
const ::Proto::DBWorldData&
EnterWorld::_Internal::world_data(const EnterWorld* msg) {
  return *msg->world_data_;
}
void EnterWorld::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void EnterWorld::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
void EnterWorld::clear_world_data() {
  if (GetArenaNoVirtual() == nullptr && world_data_ != nullptr) {
    delete world_data_;
  }
  world_data_ = nullptr;
}
EnterWorld::EnterWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.EnterWorld)
}
EnterWorld::EnterWorld(const EnterWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::Proto::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::Proto::Vector3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from.has_world_data()) {
    world_data_ = new ::Proto::DBWorldData(*from.world_data_);
  } else {
    world_data_ = nullptr;
  }
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.EnterWorld)
}

void EnterWorld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterWorld_msg_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(world_id_));
}

EnterWorld::~EnterWorld() {
  // @@protoc_insertion_point(destructor:Proto.EnterWorld)
  SharedDtor();
}

void EnterWorld::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete world_data_;
}

void EnterWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterWorld& EnterWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void EnterWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.EnterWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && world_data_ != nullptr) {
    delete world_data_;
  }
  world_data_ = nullptr;
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnterWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 world_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Vector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Vector3 rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.DBWorldData world_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_world_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnterWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.EnterWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 world_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Vector3 position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Vector3 rotation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.DBWorldData world_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_world_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.EnterWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.EnterWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnterWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.EnterWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->world_sn(), output);
  }

  // .Proto.Vector3 position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::position(this), output);
  }

  // .Proto.Vector3 rotation = 4;
  if (this->has_rotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::rotation(this), output);
  }

  // .Proto.DBWorldData world_data = 5;
  if (this->has_world_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::world_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.EnterWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.EnterWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->world_sn(), target);
  }

  // .Proto.Vector3 position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::position(this), target);
  }

  // .Proto.Vector3 rotation = 4;
  if (this->has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::rotation(this), target);
  }

  // .Proto.DBWorldData world_data = 5;
  if (this->has_world_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::world_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.EnterWorld)
  return target;
}

size_t EnterWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.EnterWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Vector3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Proto.Vector3 rotation = 4;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .Proto.DBWorldData world_data = 5;
  if (this->has_world_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_data_);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.EnterWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.EnterWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.EnterWorld)
    MergeFrom(*source);
  }
}

void EnterWorld::MergeFrom(const EnterWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.EnterWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::Proto::Vector3::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::Proto::Vector3::MergeFrom(from.rotation());
  }
  if (from.has_world_data()) {
    mutable_world_data()->::Proto::DBWorldData::MergeFrom(from.world_data());
  }
  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void EnterWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.EnterWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWorld::CopyFrom(const EnterWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.EnterWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWorld::IsInitialized() const {
  return true;
}

void EnterWorld::InternalSwap(EnterWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(world_data_, other->world_data_);
  swap(world_sn_, other->world_sn_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterHome::InitAsDefaultInstance() {
}
class EnterHome::_Internal {
 public:
};

EnterHome::EnterHome()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.EnterHome)
}
EnterHome::EnterHome(const EnterHome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.EnterHome)
}

void EnterHome::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

EnterHome::~EnterHome() {
  // @@protoc_insertion_point(destructor:Proto.EnterHome)
  SharedDtor();
}

void EnterHome::SharedDtor() {
}

void EnterHome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterHome& EnterHome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterHome_msg_2eproto.base);
  return *internal_default_instance();
}


void EnterHome::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.EnterHome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnterHome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnterHome::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.EnterHome)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.EnterHome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.EnterHome)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnterHome::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.EnterHome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.EnterHome)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterHome::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.EnterHome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.EnterHome)
  return target;
}

size_t EnterHome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.EnterHome)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterHome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.EnterHome)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterHome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterHome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.EnterHome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.EnterHome)
    MergeFrom(*source);
  }
}

void EnterHome::MergeFrom(const EnterHome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.EnterHome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void EnterHome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.EnterHome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterHome::CopyFrom(const EnterHome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.EnterHome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterHome::IsInitialized() const {
  return true;
}

void EnterHome::InternalSwap(EnterHome* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterHome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDungeonBySn::InitAsDefaultInstance() {
}
class QueryDungeonBySn::_Internal {
 public:
};

QueryDungeonBySn::QueryDungeonBySn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryDungeonBySn)
}
QueryDungeonBySn::QueryDungeonBySn(const QueryDungeonBySn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  world_sn_ = from.world_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.QueryDungeonBySn)
}

void QueryDungeonBySn::SharedCtor() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}

QueryDungeonBySn::~QueryDungeonBySn() {
  // @@protoc_insertion_point(destructor:Proto.QueryDungeonBySn)
  SharedDtor();
}

void QueryDungeonBySn::SharedDtor() {
}

void QueryDungeonBySn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDungeonBySn& QueryDungeonBySn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDungeonBySn_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryDungeonBySn::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryDungeonBySn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryDungeonBySn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 world_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryDungeonBySn::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryDungeonBySn)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 world_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryDungeonBySn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryDungeonBySn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryDungeonBySn::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryDungeonBySn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->world_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryDungeonBySn)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDungeonBySn::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryDungeonBySn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->world_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryDungeonBySn)
  return target;
}

size_t QueryDungeonBySn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryDungeonBySn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDungeonBySn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryDungeonBySn)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDungeonBySn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDungeonBySn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryDungeonBySn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryDungeonBySn)
    MergeFrom(*source);
  }
}

void QueryDungeonBySn::MergeFrom(const QueryDungeonBySn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryDungeonBySn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
}

void QueryDungeonBySn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryDungeonBySn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDungeonBySn::CopyFrom(const QueryDungeonBySn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryDungeonBySn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDungeonBySn::IsInitialized() const {
  return true;
}

void QueryDungeonBySn::InternalSwap(QueryDungeonBySn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDungeonBySn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDungeonBySnRs::InitAsDefaultInstance() {
}
class QueryDungeonBySnRs::_Internal {
 public:
};

QueryDungeonBySnRs::QueryDungeonBySnRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryDungeonBySnRs)
}
QueryDungeonBySnRs::QueryDungeonBySnRs(const QueryDungeonBySnRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_code_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(return_code_));
  // @@protoc_insertion_point(copy_constructor:Proto.QueryDungeonBySnRs)
}

void QueryDungeonBySnRs::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_code_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(return_code_));
}

QueryDungeonBySnRs::~QueryDungeonBySnRs() {
  // @@protoc_insertion_point(destructor:Proto.QueryDungeonBySnRs)
  SharedDtor();
}

void QueryDungeonBySnRs::SharedDtor() {
}

void QueryDungeonBySnRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDungeonBySnRs& QueryDungeonBySnRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDungeonBySnRs_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryDungeonBySnRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryDungeonBySnRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_code_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(return_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryDungeonBySnRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 world_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_code(static_cast<::Proto::QueryDungeonBySnRs_ReturnCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryDungeonBySnRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryDungeonBySnRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 world_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_code(static_cast< ::Proto::QueryDungeonBySnRs_ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryDungeonBySnRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryDungeonBySnRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryDungeonBySnRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryDungeonBySnRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->world_sn(), output);
  }

  // .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
  if (this->return_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->return_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryDungeonBySnRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDungeonBySnRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryDungeonBySnRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->world_sn(), target);
  }

  // .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
  if (this->return_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->return_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryDungeonBySnRs)
  return target;
}

size_t QueryDungeonBySnRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryDungeonBySnRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDungeonBySnRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryDungeonBySnRs)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDungeonBySnRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDungeonBySnRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryDungeonBySnRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryDungeonBySnRs)
    MergeFrom(*source);
  }
}

void QueryDungeonBySnRs::MergeFrom(const QueryDungeonBySnRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryDungeonBySnRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
}

void QueryDungeonBySnRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryDungeonBySnRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDungeonBySnRs::CopyFrom(const QueryDungeonBySnRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryDungeonBySnRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDungeonBySnRs::IsInitialized() const {
  return true;
}

void QueryDungeonBySnRs::InternalSwap(QueryDungeonBySnRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDungeonBySnRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestWorld::InitAsDefaultInstance() {
}
class RequestWorld::_Internal {
 public:
};

RequestWorld::RequestWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestWorld)
}
RequestWorld::RequestWorld(const RequestWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&for_player_, &from.for_player_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&for_player_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.RequestWorld)
}

void RequestWorld::SharedCtor() {
  ::memset(&for_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&for_player_)) + sizeof(world_id_));
}

RequestWorld::~RequestWorld() {
  // @@protoc_insertion_point(destructor:Proto.RequestWorld)
  SharedDtor();
}

void RequestWorld::SharedDtor() {
}

void RequestWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestWorld& RequestWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&for_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&for_player_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 for_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          for_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 for_player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &for_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // uint64 for_player = 2;
  if (this->for_player() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->for_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // uint64 for_player = 2;
  if (this->for_player() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->for_player(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestWorld)
  return target;
}

size_t RequestWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 for_player = 2;
  if (this->for_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->for_player());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestWorld)
    MergeFrom(*source);
  }
}

void RequestWorld::MergeFrom(const RequestWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.for_player() != 0) {
    set_for_player(from.for_player());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void RequestWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestWorld::CopyFrom(const RequestWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWorld::IsInitialized() const {
  return true;
}

void RequestWorld::InternalSwap(RequestWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(for_player_, other->for_player_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWorld::InitAsDefaultInstance() {
}
class CreateWorld::_Internal {
 public:
};

CreateWorld::CreateWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.CreateWorld)
}
CreateWorld::CreateWorld(const CreateWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_player_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(for_player_));
  // @@protoc_insertion_point(copy_constructor:Proto.CreateWorld)
}

void CreateWorld::SharedCtor() {
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_player_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(for_player_));
}

CreateWorld::~CreateWorld() {
  // @@protoc_insertion_point(destructor:Proto.CreateWorld)
  SharedDtor();
}

void CreateWorld::SharedDtor() {
}

void CreateWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWorld& CreateWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void CreateWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.CreateWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_player_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(for_player_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 alive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 for_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          for_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.CreateWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 alive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 for_player = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &for_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.CreateWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.CreateWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.CreateWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // int32 alive = 2;
  if (this->alive() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->alive(), output);
  }

  // uint64 for_player = 3;
  if (this->for_player() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->for_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.CreateWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.CreateWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // int32 alive = 2;
  if (this->alive() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->alive(), target);
  }

  // uint64 for_player = 3;
  if (this->for_player() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->for_player(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.CreateWorld)
  return target;
}

size_t CreateWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.CreateWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  // int32 alive = 2;
  if (this->alive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->alive());
  }

  // uint64 for_player = 3;
  if (this->for_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->for_player());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.CreateWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.CreateWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.CreateWorld)
    MergeFrom(*source);
  }
}

void CreateWorld::MergeFrom(const CreateWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.CreateWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
  if (from.alive() != 0) {
    set_alive(from.alive());
  }
  if (from.for_player() != 0) {
    set_for_player(from.for_player());
  }
}

void CreateWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.CreateWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorld::CopyFrom(const CreateWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.CreateWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorld::IsInitialized() const {
  return true;
}

void CreateWorld::InternalSwap(CreateWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_id_, other->world_id_);
  swap(alive_, other->alive_);
  swap(for_player_, other->for_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestoryWorld::InitAsDefaultInstance() {
}
class DestoryWorld::_Internal {
 public:
};

DestoryWorld::DestoryWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DestoryWorld)
}
DestoryWorld::DestoryWorld(const DestoryWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_player_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(for_player_));
  // @@protoc_insertion_point(copy_constructor:Proto.DestoryWorld)
}

void DestoryWorld::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_player_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(for_player_));
}

DestoryWorld::~DestoryWorld() {
  // @@protoc_insertion_point(destructor:Proto.DestoryWorld)
  SharedDtor();
}

void DestoryWorld::SharedDtor() {
}

void DestoryWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestoryWorld& DestoryWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestoryWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void DestoryWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DestoryWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_player_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(for_player_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DestoryWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 world_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 for_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          for_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DestoryWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DestoryWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 world_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 for_player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &for_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DestoryWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DestoryWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DestoryWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DestoryWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->world_sn(), output);
  }

  // uint64 for_player = 2;
  if (this->for_player() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->for_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DestoryWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* DestoryWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DestoryWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->world_sn(), target);
  }

  // uint64 for_player = 2;
  if (this->for_player() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->for_player(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DestoryWorld)
  return target;
}

size_t DestoryWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DestoryWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 1;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // uint64 for_player = 2;
  if (this->for_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->for_player());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestoryWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DestoryWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const DestoryWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestoryWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DestoryWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DestoryWorld)
    MergeFrom(*source);
  }
}

void DestoryWorld::MergeFrom(const DestoryWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DestoryWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.for_player() != 0) {
    set_for_player(from.for_player());
  }
}

void DestoryWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DestoryWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestoryWorld::CopyFrom(const DestoryWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DestoryWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestoryWorld::IsInitialized() const {
  return true;
}

void DestoryWorld::InternalSwap(DestoryWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(for_player_, other->for_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestoryWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastCreateWorld::InitAsDefaultInstance() {
}
class BroadcastCreateWorld::_Internal {
 public:
};

BroadcastCreateWorld::BroadcastCreateWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BroadcastCreateWorld)
}
BroadcastCreateWorld::BroadcastCreateWorld(const BroadcastCreateWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.BroadcastCreateWorld)
}

void BroadcastCreateWorld::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
}

BroadcastCreateWorld::~BroadcastCreateWorld() {
  // @@protoc_insertion_point(destructor:Proto.BroadcastCreateWorld)
  SharedDtor();
}

void BroadcastCreateWorld::SharedDtor() {
}

void BroadcastCreateWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastCreateWorld& BroadcastCreateWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastCreateWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void BroadcastCreateWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BroadcastCreateWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastCreateWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 world_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 for_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          for_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastCreateWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BroadcastCreateWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 world_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 for_player = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &for_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BroadcastCreateWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BroadcastCreateWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastCreateWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BroadcastCreateWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->world_sn(), output);
  }

  // uint64 for_player = 4;
  if (this->for_player() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->for_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BroadcastCreateWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastCreateWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BroadcastCreateWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->world_sn(), target);
  }

  // uint64 for_player = 4;
  if (this->for_player() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->for_player(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BroadcastCreateWorld)
  return target;
}

size_t BroadcastCreateWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BroadcastCreateWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // uint64 for_player = 4;
  if (this->for_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->for_player());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastCreateWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BroadcastCreateWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastCreateWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastCreateWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BroadcastCreateWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BroadcastCreateWorld)
    MergeFrom(*source);
  }
}

void BroadcastCreateWorld::MergeFrom(const BroadcastCreateWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BroadcastCreateWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.for_player() != 0) {
    set_for_player(from.for_player());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void BroadcastCreateWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BroadcastCreateWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastCreateWorld::CopyFrom(const BroadcastCreateWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BroadcastCreateWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastCreateWorld::IsInitialized() const {
  return true;
}

void BroadcastCreateWorld::InternalSwap(BroadcastCreateWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(for_player_, other->for_player_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastCreateWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestCreateWorldProxy::InitAsDefaultInstance() {
}
class RequestCreateWorldProxy::_Internal {
 public:
};

RequestCreateWorldProxy::RequestCreateWorldProxy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestCreateWorldProxy)
}
RequestCreateWorldProxy::RequestCreateWorldProxy(const RequestCreateWorldProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.RequestCreateWorldProxy)
}

void RequestCreateWorldProxy::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
}

RequestCreateWorldProxy::~RequestCreateWorldProxy() {
  // @@protoc_insertion_point(destructor:Proto.RequestCreateWorldProxy)
  SharedDtor();
}

void RequestCreateWorldProxy::SharedDtor() {
}

void RequestCreateWorldProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestCreateWorldProxy& RequestCreateWorldProxy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestCreateWorldProxy_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestCreateWorldProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestCreateWorldProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestCreateWorldProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 world_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestCreateWorldProxy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestCreateWorldProxy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 world_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestCreateWorldProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestCreateWorldProxy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestCreateWorldProxy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestCreateWorldProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->world_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestCreateWorldProxy)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestCreateWorldProxy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestCreateWorldProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->world_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestCreateWorldProxy)
  return target;
}

size_t RequestCreateWorldProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestCreateWorldProxy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCreateWorldProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestCreateWorldProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCreateWorldProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestCreateWorldProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestCreateWorldProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestCreateWorldProxy)
    MergeFrom(*source);
  }
}

void RequestCreateWorldProxy::MergeFrom(const RequestCreateWorldProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestCreateWorldProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void RequestCreateWorldProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestCreateWorldProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCreateWorldProxy::CopyFrom(const RequestCreateWorldProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestCreateWorldProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateWorldProxy::IsInitialized() const {
  return true;
}

void RequestCreateWorldProxy::InternalSwap(RequestCreateWorldProxy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCreateWorldProxy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastCreateWorldProxy::InitAsDefaultInstance() {
}
class BroadcastCreateWorldProxy::_Internal {
 public:
};

BroadcastCreateWorldProxy::BroadcastCreateWorldProxy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BroadcastCreateWorldProxy)
}
BroadcastCreateWorldProxy::BroadcastCreateWorldProxy(const BroadcastCreateWorldProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.BroadcastCreateWorldProxy)
}

void BroadcastCreateWorldProxy::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
}

BroadcastCreateWorldProxy::~BroadcastCreateWorldProxy() {
  // @@protoc_insertion_point(destructor:Proto.BroadcastCreateWorldProxy)
  SharedDtor();
}

void BroadcastCreateWorldProxy::SharedDtor() {
}

void BroadcastCreateWorldProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastCreateWorldProxy& BroadcastCreateWorldProxy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastCreateWorldProxy_msg_2eproto.base);
  return *internal_default_instance();
}


void BroadcastCreateWorldProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BroadcastCreateWorldProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastCreateWorldProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 world_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 for_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          for_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastCreateWorldProxy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BroadcastCreateWorldProxy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 world_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 for_player = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &for_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BroadcastCreateWorldProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BroadcastCreateWorldProxy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastCreateWorldProxy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BroadcastCreateWorldProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->world_sn(), output);
  }

  // uint64 for_player = 3;
  if (this->for_player() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->for_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BroadcastCreateWorldProxy)
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastCreateWorldProxy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BroadcastCreateWorldProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->world_sn(), target);
  }

  // uint64 for_player = 3;
  if (this->for_player() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->for_player(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BroadcastCreateWorldProxy)
  return target;
}

size_t BroadcastCreateWorldProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BroadcastCreateWorldProxy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // uint64 for_player = 3;
  if (this->for_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->for_player());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastCreateWorldProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BroadcastCreateWorldProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastCreateWorldProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastCreateWorldProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BroadcastCreateWorldProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BroadcastCreateWorldProxy)
    MergeFrom(*source);
  }
}

void BroadcastCreateWorldProxy::MergeFrom(const BroadcastCreateWorldProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BroadcastCreateWorldProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.for_player() != 0) {
    set_for_player(from.for_player());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void BroadcastCreateWorldProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BroadcastCreateWorldProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastCreateWorldProxy::CopyFrom(const BroadcastCreateWorldProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BroadcastCreateWorldProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastCreateWorldProxy::IsInitialized() const {
  return true;
}

void BroadcastCreateWorldProxy::InternalSwap(BroadcastCreateWorldProxy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(for_player_, other->for_player_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastCreateWorldProxy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryWorldData::InitAsDefaultInstance() {
}
class QueryWorldData::_Internal {
 public:
};

QueryWorldData::QueryWorldData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryWorldData)
}
QueryWorldData::QueryWorldData(const QueryWorldData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&world_sn_, &from.world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.QueryWorldData)
}

void QueryWorldData::SharedCtor() {
  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
}

QueryWorldData::~QueryWorldData() {
  // @@protoc_insertion_point(destructor:Proto.QueryWorldData)
  SharedDtor();
}

void QueryWorldData::SharedDtor() {
}

void QueryWorldData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryWorldData& QueryWorldData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryWorldData_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryWorldData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryWorldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&world_sn_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryWorldData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 world_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryWorldData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryWorldData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 world_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 world_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryWorldData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryWorldData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryWorldData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryWorldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->world_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryWorldData)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryWorldData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryWorldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->world_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryWorldData)
  return target;
}

size_t QueryWorldData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryWorldData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 world_sn = 2;
  if (this->world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->world_sn());
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryWorldData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryWorldData)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryWorldData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryWorldData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryWorldData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryWorldData)
    MergeFrom(*source);
  }
}

void QueryWorldData::MergeFrom(const QueryWorldData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryWorldData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.world_sn() != 0) {
    set_world_sn(from.world_sn());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void QueryWorldData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryWorldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryWorldData::CopyFrom(const QueryWorldData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryWorldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryWorldData::IsInitialized() const {
  return true;
}

void QueryWorldData::InternalSwap(QueryWorldData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_sn_, other->world_sn_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryWorldData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryWorldDataRet::InitAsDefaultInstance() {
  ::Proto::_QueryWorldDataRet_default_instance_._instance.get_mutable()->world_data_ = const_cast< ::Proto::DBWorldData*>(
      ::Proto::DBWorldData::internal_default_instance());
}
class QueryWorldDataRet::_Internal {
 public:
  static const ::Proto::DBWorldData& world_data(const QueryWorldDataRet* msg);
};

const ::Proto::DBWorldData&
QueryWorldDataRet::_Internal::world_data(const QueryWorldDataRet* msg) {
  return *msg->world_data_;
}
void QueryWorldDataRet::clear_world_data() {
  if (GetArenaNoVirtual() == nullptr && world_data_ != nullptr) {
    delete world_data_;
  }
  world_data_ = nullptr;
}
QueryWorldDataRet::QueryWorldDataRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryWorldDataRet)
}
QueryWorldDataRet::QueryWorldDataRet(const QueryWorldDataRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world_data()) {
    world_data_ = new ::Proto::DBWorldData(*from.world_data_);
  } else {
    world_data_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.QueryWorldDataRet)
}

void QueryWorldDataRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryWorldDataRet_msg_2eproto.base);
  ::memset(&world_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&world_data_)) + sizeof(ret_));
}

QueryWorldDataRet::~QueryWorldDataRet() {
  // @@protoc_insertion_point(destructor:Proto.QueryWorldDataRet)
  SharedDtor();
}

void QueryWorldDataRet::SharedDtor() {
  if (this != internal_default_instance()) delete world_data_;
}

void QueryWorldDataRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryWorldDataRet& QueryWorldDataRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryWorldDataRet_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryWorldDataRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryWorldDataRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && world_data_ != nullptr) {
    delete world_data_;
  }
  world_data_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryWorldDataRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.DBWorldData world_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_world_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryWorldDataRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryWorldDataRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.DBWorldData world_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_world_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryWorldDataRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryWorldDataRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryWorldDataRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryWorldDataRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // .Proto.DBWorldData world_data = 2;
  if (this->has_world_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::world_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryWorldDataRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryWorldDataRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryWorldDataRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // .Proto.DBWorldData world_data = 2;
  if (this->has_world_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::world_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryWorldDataRet)
  return target;
}

size_t QueryWorldDataRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryWorldDataRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.DBWorldData world_data = 2;
  if (this->has_world_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_data_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryWorldDataRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryWorldDataRet)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryWorldDataRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryWorldDataRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryWorldDataRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryWorldDataRet)
    MergeFrom(*source);
  }
}

void QueryWorldDataRet::MergeFrom(const QueryWorldDataRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryWorldDataRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_world_data()) {
    mutable_world_data()->::Proto::DBWorldData::MergeFrom(from.world_data());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void QueryWorldDataRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryWorldDataRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryWorldDataRet::CopyFrom(const QueryWorldDataRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryWorldDataRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryWorldDataRet::IsInitialized() const {
  return true;
}

void QueryWorldDataRet::InternalSwap(QueryWorldDataRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_data_, other->world_data_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryWorldDataRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncWorldData::InitAsDefaultInstance() {
  ::Proto::_SyncWorldData_default_instance_._instance.get_mutable()->world_data_ = const_cast< ::Proto::DBWorldData*>(
      ::Proto::DBWorldData::internal_default_instance());
}
class SyncWorldData::_Internal {
 public:
  static const ::Proto::DBWorldData& world_data(const SyncWorldData* msg);
};

const ::Proto::DBWorldData&
SyncWorldData::_Internal::world_data(const SyncWorldData* msg) {
  return *msg->world_data_;
}
void SyncWorldData::clear_world_data() {
  if (GetArenaNoVirtual() == nullptr && world_data_ != nullptr) {
    delete world_data_;
  }
  world_data_ = nullptr;
}
SyncWorldData::SyncWorldData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SyncWorldData)
}
SyncWorldData::SyncWorldData(const SyncWorldData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      die_sn_list_(from.die_sn_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world_data()) {
    world_data_ = new ::Proto::DBWorldData(*from.world_data_);
  } else {
    world_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.SyncWorldData)
}

void SyncWorldData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncWorldData_msg_2eproto.base);
  world_data_ = nullptr;
}

SyncWorldData::~SyncWorldData() {
  // @@protoc_insertion_point(destructor:Proto.SyncWorldData)
  SharedDtor();
}

void SyncWorldData::SharedDtor() {
  if (this != internal_default_instance()) delete world_data_;
}

void SyncWorldData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncWorldData& SyncWorldData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncWorldData_msg_2eproto.base);
  return *internal_default_instance();
}


void SyncWorldData::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SyncWorldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  die_sn_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && world_data_ != nullptr) {
    delete world_data_;
  }
  world_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncWorldData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.DBWorldData world_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_world_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 die_sn_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_die_sn_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_die_sn_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncWorldData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SyncWorldData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.DBWorldData world_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_world_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 die_sn_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_die_sn_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_die_sn_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SyncWorldData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SyncWorldData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncWorldData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SyncWorldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.DBWorldData world_data = 1;
  if (this->has_world_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::world_data(this), output);
  }

  // repeated int64 die_sn_list = 2;
  if (this->die_sn_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_die_sn_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->die_sn_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->die_sn_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SyncWorldData)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncWorldData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SyncWorldData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.DBWorldData world_data = 1;
  if (this->has_world_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::world_data(this), target);
  }

  // repeated int64 die_sn_list = 2;
  if (this->die_sn_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _die_sn_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->die_sn_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SyncWorldData)
  return target;
}

size_t SyncWorldData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SyncWorldData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 die_sn_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->die_sn_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _die_sn_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Proto.DBWorldData world_data = 1;
  if (this->has_world_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncWorldData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SyncWorldData)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncWorldData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncWorldData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SyncWorldData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SyncWorldData)
    MergeFrom(*source);
  }
}

void SyncWorldData::MergeFrom(const SyncWorldData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SyncWorldData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  die_sn_list_.MergeFrom(from.die_sn_list_);
  if (from.has_world_data()) {
    mutable_world_data()->::Proto::DBWorldData::MergeFrom(from.world_data());
  }
}

void SyncWorldData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SyncWorldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncWorldData::CopyFrom(const SyncWorldData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SyncWorldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncWorldData::IsInitialized() const {
  return true;
}

void SyncWorldData::InternalSwap(SyncWorldData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  die_sn_list_.InternalSwap(&other->die_sn_list_);
  swap(world_data_, other->world_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncWorldData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldAction::InitAsDefaultInstance() {
}
class WorldAction::_Internal {
 public:
};

WorldAction::WorldAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.WorldAction)
}
WorldAction::WorldAction(const WorldAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_sn_, &from.target_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&target_sn_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.WorldAction)
}

void WorldAction::SharedCtor() {
  ::memset(&target_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&target_sn_)) + sizeof(action_type_));
}

WorldAction::~WorldAction() {
  // @@protoc_insertion_point(destructor:Proto.WorldAction)
  SharedDtor();
}

void WorldAction::SharedDtor() {
}

void WorldAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldAction& WorldAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldAction_msg_2eproto.base);
  return *internal_default_instance();
}


void WorldAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.WorldAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&target_sn_)) + sizeof(action_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorldAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 target_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorldAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.WorldAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 target_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.WorldAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.WorldAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorldAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.WorldAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_type = 1;
  if (this->target_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->target_type(), output);
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->target_sn(), output);
  }

  // int32 action_type = 3;
  if (this->action_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->action_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.WorldAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.WorldAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_type = 1;
  if (this->target_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->target_type(), target);
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->target_sn(), target);
  }

  // int32 action_type = 3;
  if (this->action_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->action_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.WorldAction)
  return target;
}

size_t WorldAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.WorldAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  // int32 target_type = 1;
  if (this->target_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->target_type());
  }

  // int32 action_type = 3;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->action_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.WorldAction)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.WorldAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.WorldAction)
    MergeFrom(*source);
  }
}

void WorldAction::MergeFrom(const WorldAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.WorldAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
  if (from.target_type() != 0) {
    set_target_type(from.target_type());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void WorldAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.WorldAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldAction::CopyFrom(const WorldAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.WorldAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldAction::IsInitialized() const {
  return true;
}

void WorldAction::InternalSwap(WorldAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_sn_, other->target_sn_);
  swap(target_type_, other->target_type_);
  swap(action_type_, other->action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldActionRet::InitAsDefaultInstance() {
}
class WorldActionRet::_Internal {
 public:
};

WorldActionRet::WorldActionRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.WorldActionRet)
}
WorldActionRet::WorldActionRet(const WorldActionRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.WorldActionRet)
}

void WorldActionRet::SharedCtor() {
  ret_ = 0;
}

WorldActionRet::~WorldActionRet() {
  // @@protoc_insertion_point(destructor:Proto.WorldActionRet)
  SharedDtor();
}

void WorldActionRet::SharedDtor() {
}

void WorldActionRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldActionRet& WorldActionRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldActionRet_msg_2eproto.base);
  return *internal_default_instance();
}


void WorldActionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.WorldActionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorldActionRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorldActionRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.WorldActionRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.WorldActionRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.WorldActionRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorldActionRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.WorldActionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.WorldActionRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldActionRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.WorldActionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.WorldActionRet)
  return target;
}

size_t WorldActionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.WorldActionRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldActionRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.WorldActionRet)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldActionRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldActionRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.WorldActionRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.WorldActionRet)
    MergeFrom(*source);
  }
}

void WorldActionRet::MergeFrom(const WorldActionRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.WorldActionRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void WorldActionRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.WorldActionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldActionRet::CopyFrom(const WorldActionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.WorldActionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldActionRet::IsInitialized() const {
  return true;
}

void WorldActionRet::InternalSwap(WorldActionRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldActionRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncWorldAction::InitAsDefaultInstance() {
}
class SyncWorldAction::_Internal {
 public:
};

SyncWorldAction::SyncWorldAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SyncWorldAction)
}
SyncWorldAction::SyncWorldAction(const SyncWorldAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_sn_, &from.player_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&player_sn_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.SyncWorldAction)
}

void SyncWorldAction::SharedCtor() {
  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(action_type_));
}

SyncWorldAction::~SyncWorldAction() {
  // @@protoc_insertion_point(destructor:Proto.SyncWorldAction)
  SharedDtor();
}

void SyncWorldAction::SharedDtor() {
}

void SyncWorldAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncWorldAction& SyncWorldAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncWorldAction_msg_2eproto.base);
  return *internal_default_instance();
}


void SyncWorldAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SyncWorldAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(action_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncWorldAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncWorldAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SyncWorldAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SyncWorldAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SyncWorldAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncWorldAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SyncWorldAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->player_sn(), output);
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->target_sn(), output);
  }

  // int32 target_type = 3;
  if (this->target_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->target_type(), output);
  }

  // int32 action_type = 4;
  if (this->action_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->action_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SyncWorldAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncWorldAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SyncWorldAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->player_sn(), target);
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->target_sn(), target);
  }

  // int32 target_type = 3;
  if (this->target_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->target_type(), target);
  }

  // int32 action_type = 4;
  if (this->action_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->action_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SyncWorldAction)
  return target;
}

size_t SyncWorldAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SyncWorldAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->player_sn());
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  // int32 target_type = 3;
  if (this->target_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->target_type());
  }

  // int32 action_type = 4;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->action_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncWorldAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SyncWorldAction)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncWorldAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncWorldAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SyncWorldAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SyncWorldAction)
    MergeFrom(*source);
  }
}

void SyncWorldAction::MergeFrom(const SyncWorldAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SyncWorldAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
  if (from.target_type() != 0) {
    set_target_type(from.target_type());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void SyncWorldAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SyncWorldAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncWorldAction::CopyFrom(const SyncWorldAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SyncWorldAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncWorldAction::IsInitialized() const {
  return true;
}

void SyncWorldAction::InternalSwap(SyncWorldAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
  swap(target_sn_, other->target_sn_);
  swap(target_type_, other->target_type_);
  swap(action_type_, other->action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncWorldAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePlayer::InitAsDefaultInstance() {
}
class RemovePlayer::_Internal {
 public:
};

RemovePlayer::RemovePlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RemovePlayer)
}
RemovePlayer::RemovePlayer(const RemovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.RemovePlayer)
}

void RemovePlayer::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

RemovePlayer::~RemovePlayer() {
  // @@protoc_insertion_point(destructor:Proto.RemovePlayer)
  SharedDtor();
}

void RemovePlayer::SharedDtor() {
}

void RemovePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePlayer& RemovePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void RemovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RemovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemovePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemovePlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RemovePlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RemovePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RemovePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemovePlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RemovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RemovePlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RemovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RemovePlayer)
  return target;
}

size_t RemovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RemovePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RemovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RemovePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RemovePlayer)
    MergeFrom(*source);
  }
}

void RemovePlayer::MergeFrom(const RemovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RemovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void RemovePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RemovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayer::CopyFrom(const RemovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RemovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayer::IsInitialized() const {
  return true;
}

void RemovePlayer::InternalSwap(RemovePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestSyncPlayer::InitAsDefaultInstance() {
}
class RequestSyncPlayer::_Internal {
 public:
};

RequestSyncPlayer::RequestSyncPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestSyncPlayer)
}
RequestSyncPlayer::RequestSyncPlayer(const RequestSyncPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.RequestSyncPlayer)
}

void RequestSyncPlayer::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

RequestSyncPlayer::~RequestSyncPlayer() {
  // @@protoc_insertion_point(destructor:Proto.RequestSyncPlayer)
  SharedDtor();
}

void RequestSyncPlayer::SharedDtor() {
}

void RequestSyncPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSyncPlayer& RequestSyncPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestSyncPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestSyncPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestSyncPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestSyncPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestSyncPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestSyncPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestSyncPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestSyncPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestSyncPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestSyncPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestSyncPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSyncPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestSyncPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestSyncPlayer)
  return target;
}

size_t RequestSyncPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestSyncPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSyncPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestSyncPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSyncPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSyncPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestSyncPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestSyncPlayer)
    MergeFrom(*source);
  }
}

void RequestSyncPlayer::MergeFrom(const RequestSyncPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestSyncPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void RequestSyncPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestSyncPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSyncPlayer::CopyFrom(const RequestSyncPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestSyncPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSyncPlayer::IsInitialized() const {
  return true;
}

void RequestSyncPlayer::InternalSwap(RequestSyncPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSyncPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Role::InitAsDefaultInstance() {
  ::Proto::_Role_default_instance_._instance.get_mutable()->position_ = const_cast< ::Proto::Vector3*>(
      ::Proto::Vector3::internal_default_instance());
}
class Role::_Internal {
 public:
  static const ::Proto::Vector3& position(const Role* msg);
};

const ::Proto::Vector3&
Role::_Internal::position(const Role* msg) {
  return *msg->position_;
}
void Role::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
Role::Role()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Role)
}
Role::Role(const Role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::Proto::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:Proto.Role)
}

void Role::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Role_msg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&position_)) + sizeof(level_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:Proto.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void Role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Role& Role::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Role_msg_2eproto.base);
  return *internal_default_instance();
}


void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "Proto.Role.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 template_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Vector3 position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Role::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Role)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.Role.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 template_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Vector3 position = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Role)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Role::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Role.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 sn = 2;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->sn(), output);
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // .Proto.Vector3 position = 5;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Role)
}

::PROTOBUF_NAMESPACE_ID::uint8* Role::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Role.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint64 sn = 2;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->sn(), target);
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // .Proto.Vector3 position = 5;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Role)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .Proto.Vector3 position = 5;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint64 sn = 2;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  // int32 template_id = 3;
  if (this->template_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->template_id());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Role::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Role)
  GOOGLE_DCHECK_NE(&from, this);
  const Role* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Role>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Role)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Role)
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::Proto::Vector3::MergeFrom(from.position());
  }
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.template_id() != 0) {
    set_template_id(from.template_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void Role::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::InternalSwap(Role* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(sn_, other->sn_);
  swap(template_id_, other->template_id_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Role::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleAppear::InitAsDefaultInstance() {
}
class RoleAppear::_Internal {
 public:
};

RoleAppear::RoleAppear()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RoleAppear)
}
RoleAppear::RoleAppear(const RoleAppear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.RoleAppear)
}

void RoleAppear::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleAppear_msg_2eproto.base);
}

RoleAppear::~RoleAppear() {
  // @@protoc_insertion_point(destructor:Proto.RoleAppear)
  SharedDtor();
}

void RoleAppear::SharedDtor() {
}

void RoleAppear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleAppear& RoleAppear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleAppear_msg_2eproto.base);
  return *internal_default_instance();
}


void RoleAppear::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RoleAppear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoleAppear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.Role role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoleAppear::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RoleAppear)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.Role role = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RoleAppear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RoleAppear)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoleAppear::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RoleAppear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Role role = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->role(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RoleAppear)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleAppear::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RoleAppear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Role role = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->role_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->role(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RoleAppear)
  return target;
}

size_t RoleAppear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RoleAppear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Role role = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->role_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->role(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleAppear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RoleAppear)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleAppear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleAppear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RoleAppear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RoleAppear)
    MergeFrom(*source);
  }
}

void RoleAppear::MergeFrom(const RoleAppear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RoleAppear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
}

void RoleAppear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RoleAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAppear::CopyFrom(const RoleAppear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RoleAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAppear::IsInitialized() const {
  return true;
}

void RoleAppear::InternalSwap(RoleAppear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&role_)->InternalSwap(CastToBase(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAppear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleDisAppear::InitAsDefaultInstance() {
}
class RoleDisAppear::_Internal {
 public:
};

RoleDisAppear::RoleDisAppear()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RoleDisAppear)
}
RoleDisAppear::RoleDisAppear(const RoleDisAppear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_ = from.sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.RoleDisAppear)
}

void RoleDisAppear::SharedCtor() {
  sn_ = PROTOBUF_ULONGLONG(0);
}

RoleDisAppear::~RoleDisAppear() {
  // @@protoc_insertion_point(destructor:Proto.RoleDisAppear)
  SharedDtor();
}

void RoleDisAppear::SharedDtor() {
}

void RoleDisAppear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleDisAppear& RoleDisAppear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleDisAppear_msg_2eproto.base);
  return *internal_default_instance();
}


void RoleDisAppear::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RoleDisAppear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoleDisAppear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoleDisAppear::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RoleDisAppear)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RoleDisAppear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RoleDisAppear)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoleDisAppear::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RoleDisAppear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RoleDisAppear)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleDisAppear::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RoleDisAppear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RoleDisAppear)
  return target;
}

size_t RoleDisAppear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RoleDisAppear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleDisAppear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RoleDisAppear)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleDisAppear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleDisAppear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RoleDisAppear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RoleDisAppear)
    MergeFrom(*source);
  }
}

void RoleDisAppear::MergeFrom(const RoleDisAppear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RoleDisAppear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    set_sn(from.sn());
  }
}

void RoleDisAppear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RoleDisAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDisAppear::CopyFrom(const RoleDisAppear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RoleDisAppear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDisAppear::IsInitialized() const {
  return true;
}

void RoleDisAppear::InternalSwap(RoleDisAppear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDisAppear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Teleport::InitAsDefaultInstance() {
  ::Proto::_Teleport_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class Teleport::_Internal {
 public:
  static const ::Proto::Player& player(const Teleport* msg);
};

const ::Proto::Player&
Teleport::_Internal::player(const Teleport* msg) {
  return *msg->player_;
}
void Teleport::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
Teleport::Teleport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Teleport)
}
Teleport::Teleport(const Teleport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&last_world_sn_, &from.last_world_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_sn_) -
    reinterpret_cast<char*>(&last_world_sn_)) + sizeof(player_sn_));
  // @@protoc_insertion_point(copy_constructor:Proto.Teleport)
}

void Teleport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Teleport_msg_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_sn_) -
      reinterpret_cast<char*>(&player_)) + sizeof(player_sn_));
}

Teleport::~Teleport() {
  // @@protoc_insertion_point(destructor:Proto.Teleport)
  SharedDtor();
}

void Teleport::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void Teleport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Teleport& Teleport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Teleport_msg_2eproto.base);
  return *internal_default_instance();
}


void Teleport::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Teleport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ::memset(&last_world_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_sn_) -
      reinterpret_cast<char*>(&last_world_sn_)) + sizeof(player_sn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Teleport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 last_world_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_world_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 player_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "Proto.Teleport.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Teleport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Teleport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 last_world_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_world_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 player_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.Teleport.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Teleport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Teleport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Teleport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Teleport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 last_world_sn = 1;
  if (this->last_world_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->last_world_sn(), output);
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->player_sn(), output);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Teleport.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // .Proto.Player player = 4;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Teleport)
}

::PROTOBUF_NAMESPACE_ID::uint8* Teleport::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Teleport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 last_world_sn = 1;
  if (this->last_world_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_world_sn(), target);
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_sn(), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.Teleport.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // .Proto.Player player = 4;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Teleport)
  return target;
}

size_t Teleport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Teleport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // .Proto.Player player = 4;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // uint64 last_world_sn = 1;
  if (this->last_world_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->last_world_sn());
  }

  // uint64 player_sn = 2;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Teleport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Teleport)
  GOOGLE_DCHECK_NE(&from, this);
  const Teleport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Teleport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Teleport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Teleport)
    MergeFrom(*source);
  }
}

void Teleport::MergeFrom(const Teleport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Teleport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.last_world_sn() != 0) {
    set_last_world_sn(from.last_world_sn());
  }
  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void Teleport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Teleport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Teleport::CopyFrom(const Teleport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Teleport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Teleport::IsInitialized() const {
  return true;
}

void Teleport::InternalSwap(Teleport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(last_world_sn_, other->last_world_sn_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Teleport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeleportAfter::InitAsDefaultInstance() {
}
class TeleportAfter::_Internal {
 public:
};

TeleportAfter::TeleportAfter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TeleportAfter)
}
TeleportAfter::TeleportAfter(const TeleportAfter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.TeleportAfter)
}

void TeleportAfter::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

TeleportAfter::~TeleportAfter() {
  // @@protoc_insertion_point(destructor:Proto.TeleportAfter)
  SharedDtor();
}

void TeleportAfter::SharedDtor() {
}

void TeleportAfter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeleportAfter& TeleportAfter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeleportAfter_msg_2eproto.base);
  return *internal_default_instance();
}


void TeleportAfter::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TeleportAfter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TeleportAfter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TeleportAfter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TeleportAfter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TeleportAfter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TeleportAfter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TeleportAfter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TeleportAfter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.TeleportAfter)
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleportAfter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TeleportAfter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TeleportAfter)
  return target;
}

size_t TeleportAfter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TeleportAfter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleportAfter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TeleportAfter)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleportAfter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleportAfter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TeleportAfter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TeleportAfter)
    MergeFrom(*source);
  }
}

void TeleportAfter::MergeFrom(const TeleportAfter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TeleportAfter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void TeleportAfter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TeleportAfter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportAfter::CopyFrom(const TeleportAfter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TeleportAfter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportAfter::IsInitialized() const {
  return true;
}

void TeleportAfter::InternalSwap(TeleportAfter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleportAfter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveByRotation::InitAsDefaultInstance() {
  ::Proto::_MoveByRotation_default_instance_._instance.get_mutable()->position_ = const_cast< ::Proto::Vector3*>(
      ::Proto::Vector3::internal_default_instance());
  ::Proto::_MoveByRotation_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::Proto::Vector3*>(
      ::Proto::Vector3::internal_default_instance());
  ::Proto::_MoveByRotation_default_instance_._instance.get_mutable()->direction_ = const_cast< ::Proto::Vector3*>(
      ::Proto::Vector3::internal_default_instance());
}
class MoveByRotation::_Internal {
 public:
  static const ::Proto::Vector3& position(const MoveByRotation* msg);
  static const ::Proto::Vector3& rotation(const MoveByRotation* msg);
  static const ::Proto::Vector3& direction(const MoveByRotation* msg);
};

const ::Proto::Vector3&
MoveByRotation::_Internal::position(const MoveByRotation* msg) {
  return *msg->position_;
}
const ::Proto::Vector3&
MoveByRotation::_Internal::rotation(const MoveByRotation* msg) {
  return *msg->rotation_;
}
const ::Proto::Vector3&
MoveByRotation::_Internal::direction(const MoveByRotation* msg) {
  return *msg->direction_;
}
void MoveByRotation::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void MoveByRotation::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
void MoveByRotation::clear_direction() {
  if (GetArenaNoVirtual() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
MoveByRotation::MoveByRotation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.MoveByRotation)
}
MoveByRotation::MoveByRotation(const MoveByRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::Proto::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::Proto::Vector3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from.has_direction()) {
    direction_ = new ::Proto::Vector3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&player_sn_, &from.player_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_sn_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Proto.MoveByRotation)
}

void MoveByRotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveByRotation_msg_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&position_)) + sizeof(value_));
}

MoveByRotation::~MoveByRotation() {
  // @@protoc_insertion_point(destructor:Proto.MoveByRotation)
  SharedDtor();
}

void MoveByRotation::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete direction_;
}

void MoveByRotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveByRotation& MoveByRotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveByRotation_msg_2eproto.base);
  return *internal_default_instance();
}


void MoveByRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MoveByRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveByRotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Vector3 direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveByRotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.MoveByRotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Vector3 position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Vector3 rotation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Vector3 direction = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.MoveByRotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.MoveByRotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveByRotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.MoveByRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  // .Proto.Vector3 position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  // .Proto.Vector3 rotation = 3;
  if (this->has_rotation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::rotation(this), output);
  }

  // .Proto.Vector3 direction = 4;
  if (this->has_direction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::direction(this), output);
  }

  // float value = 5;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.MoveByRotation)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveByRotation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MoveByRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  // .Proto.Vector3 position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  // .Proto.Vector3 rotation = 3;
  if (this->has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::rotation(this), target);
  }

  // .Proto.Vector3 direction = 4;
  if (this->has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::direction(this), target);
  }

  // float value = 5;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MoveByRotation)
  return target;
}

size_t MoveByRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MoveByRotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Vector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Proto.Vector3 rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .Proto.Vector3 direction = 4;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  // float value = 5;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveByRotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MoveByRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveByRotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveByRotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MoveByRotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MoveByRotation)
    MergeFrom(*source);
  }
}

void MoveByRotation::MergeFrom(const MoveByRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MoveByRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::Proto::Vector3::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::Proto::Vector3::MergeFrom(from.rotation());
  }
  if (from.has_direction()) {
    mutable_direction()->::Proto::Vector3::MergeFrom(from.direction());
  }
  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void MoveByRotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MoveByRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveByRotation::CopyFrom(const MoveByRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MoveByRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveByRotation::IsInitialized() const {
  return true;
}

void MoveByRotation::InternalSwap(MoveByRotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(direction_, other->direction_);
  swap(player_sn_, other->player_sn_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveByRotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddItem::InitAsDefaultInstance() {
}
class AddItem::_Internal {
 public:
};

AddItem::AddItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AddItem)
}
AddItem::AddItem(const AddItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:Proto.AddItem)
}

void AddItem::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

AddItem::~AddItem() {
  // @@protoc_insertion_point(destructor:Proto.AddItem)
  SharedDtor();
}

void AddItem::SharedDtor() {
}

void AddItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddItem& AddItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddItem_msg_2eproto.base);
  return *internal_default_instance();
}


void AddItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AddItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AddItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AddItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AddItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AddItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AddItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AddItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AddItem)
  return target;
}

size_t AddItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AddItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AddItem)
  GOOGLE_DCHECK_NE(&from, this);
  const AddItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AddItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AddItem)
    MergeFrom(*source);
  }
}

void AddItem::MergeFrom(const AddItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AddItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void AddItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItem::CopyFrom(const AddItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItem::IsInitialized() const {
  return true;
}

void AddItem::InternalSwap(AddItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddItemRet::InitAsDefaultInstance() {
}
class AddItemRet::_Internal {
 public:
};

AddItemRet::AddItemRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AddItemRet)
}
AddItemRet::AddItemRet(const AddItemRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:Proto.AddItemRet)
}

void AddItemRet::SharedCtor() {
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(num_));
}

AddItemRet::~AddItemRet() {
  // @@protoc_insertion_point(destructor:Proto.AddItemRet)
  SharedDtor();
}

void AddItemRet::SharedDtor() {
}

void AddItemRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddItemRet& AddItemRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddItemRet_msg_2eproto.base);
  return *internal_default_instance();
}


void AddItemRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AddItemRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddItemRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddItemRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AddItemRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AddItemRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AddItemRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddItemRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AddItemRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AddItemRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddItemRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AddItemRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AddItemRet)
  return target;
}

size_t AddItemRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AddItemRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddItemRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AddItemRet)
  GOOGLE_DCHECK_NE(&from, this);
  const AddItemRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddItemRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AddItemRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AddItemRet)
    MergeFrom(*source);
  }
}

void AddItemRet::MergeFrom(const AddItemRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AddItemRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void AddItemRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AddItemRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemRet::CopyFrom(const AddItemRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AddItemRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemRet::IsInitialized() const {
  return true;
}

void AddItemRet::InternalSwap(AddItemRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
  swap(id_, other->id_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddItemRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddExp::InitAsDefaultInstance() {
}
class AddExp::_Internal {
 public:
};

AddExp::AddExp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AddExp)
}
AddExp::AddExp(const AddExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exp_ = from.exp_;
  // @@protoc_insertion_point(copy_constructor:Proto.AddExp)
}

void AddExp::SharedCtor() {
  exp_ = 0;
}

AddExp::~AddExp() {
  // @@protoc_insertion_point(destructor:Proto.AddExp)
  SharedDtor();
}

void AddExp::SharedDtor() {
}

void AddExp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddExp& AddExp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddExp_msg_2eproto.base);
  return *internal_default_instance();
}


void AddExp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AddExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddExp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddExp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AddExp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 exp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AddExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AddExp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddExp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AddExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->exp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AddExp)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddExp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AddExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->exp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AddExp)
  return target;
}

size_t AddExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AddExp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddExp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AddExp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddExp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddExp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AddExp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AddExp)
    MergeFrom(*source);
  }
}

void AddExp::MergeFrom(const AddExp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AddExp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exp() != 0) {
    set_exp(from.exp());
  }
}

void AddExp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AddExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddExp::CopyFrom(const AddExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AddExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddExp::IsInitialized() const {
  return true;
}

void AddExp::InternalSwap(AddExp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddExp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddExpRet::InitAsDefaultInstance() {
}
class AddExpRet::_Internal {
 public:
};

AddExpRet::AddExpRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AddExpRet)
}
AddExpRet::AddExpRet(const AddExpRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:Proto.AddExpRet)
}

void AddExpRet::SharedCtor() {
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(exp_));
}

AddExpRet::~AddExpRet() {
  // @@protoc_insertion_point(destructor:Proto.AddExpRet)
  SharedDtor();
}

void AddExpRet::SharedDtor() {
}

void AddExpRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddExpRet& AddExpRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddExpRet_msg_2eproto.base);
  return *internal_default_instance();
}


void AddExpRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AddExpRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(exp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddExpRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddExpRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AddExpRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AddExpRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AddExpRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddExpRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AddExpRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int32 exp = 2;
  if (this->exp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AddExpRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddExpRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AddExpRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int32 exp = 2;
  if (this->exp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AddExpRet)
  return target;
}

size_t AddExpRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AddExpRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // int32 exp = 2;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddExpRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AddExpRet)
  GOOGLE_DCHECK_NE(&from, this);
  const AddExpRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddExpRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AddExpRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AddExpRet)
    MergeFrom(*source);
  }
}

void AddExpRet::MergeFrom(const AddExpRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AddExpRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
}

void AddExpRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AddExpRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddExpRet::CopyFrom(const AddExpRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AddExpRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddExpRet::IsInitialized() const {
  return true;
}

void AddExpRet::InternalSwap(AddExpRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddExpRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dungeon::InitAsDefaultInstance() {
}
class Dungeon::_Internal {
 public:
};

Dungeon::Dungeon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Dungeon)
}
Dungeon::Dungeon(const Dungeon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_) -
    reinterpret_cast<char*>(&id_)) + sizeof(star_));
  // @@protoc_insertion_point(copy_constructor:Proto.Dungeon)
}

void Dungeon::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_) -
      reinterpret_cast<char*>(&id_)) + sizeof(star_));
}

Dungeon::~Dungeon() {
  // @@protoc_insertion_point(destructor:Proto.Dungeon)
  SharedDtor();
}

void Dungeon::SharedDtor() {
}

void Dungeon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dungeon& Dungeon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dungeon_msg_2eproto.base);
  return *internal_default_instance();
}


void Dungeon::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Dungeon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_) -
      reinterpret_cast<char*>(&id_)) + sizeof(star_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Dungeon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Dungeon::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Dungeon)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 star = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Dungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Dungeon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Dungeon::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Dungeon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 star = 2;
  if (this->star() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Dungeon)
}

::PROTOBUF_NAMESPACE_ID::uint8* Dungeon::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Dungeon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 star = 2;
  if (this->star() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Dungeon)
  return target;
}

size_t Dungeon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Dungeon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->star());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dungeon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Dungeon)
  GOOGLE_DCHECK_NE(&from, this);
  const Dungeon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dungeon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Dungeon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Dungeon)
    MergeFrom(*source);
  }
}

void Dungeon::MergeFrom(const Dungeon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Dungeon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.star() != 0) {
    set_star(from.star());
  }
}

void Dungeon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Dungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dungeon::CopyFrom(const Dungeon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Dungeon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dungeon::IsInitialized() const {
  return true;
}

void Dungeon::InternalSwap(Dungeon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(star_, other->star_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dungeon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DungeonRs::InitAsDefaultInstance() {
}
class DungeonRs::_Internal {
 public:
};

void DungeonRs::clear_item_list() {
  item_list_.Clear();
}
DungeonRs::DungeonRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DungeonRs)
}
DungeonRs::DungeonRs(const DungeonRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DungeonRs)
}

void DungeonRs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DungeonRs_msg_2eproto.base);
  ret_ = 0;
}

DungeonRs::~DungeonRs() {
  // @@protoc_insertion_point(destructor:Proto.DungeonRs)
  SharedDtor();
}

void DungeonRs::SharedDtor() {
}

void DungeonRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DungeonRs& DungeonRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DungeonRs_msg_2eproto.base);
  return *internal_default_instance();
}


void DungeonRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DungeonRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DungeonRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.ItemBase item_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DungeonRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DungeonRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.ItemBase item_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DungeonRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DungeonRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DungeonRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DungeonRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .Proto.ItemBase item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->item_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DungeonRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* DungeonRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DungeonRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .Proto.ItemBase item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->item_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DungeonRs)
  return target;
}

size_t DungeonRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DungeonRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ItemBase item_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DungeonRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DungeonRs)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DungeonRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DungeonRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DungeonRs)
    MergeFrom(*source);
  }
}

void DungeonRs::MergeFrom(const DungeonRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DungeonRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DungeonRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DungeonRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRs::CopyFrom(const DungeonRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DungeonRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRs::IsInitialized() const {
  return true;
}

void DungeonRs::InternalSwap(DungeonRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DungeonRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chat::InitAsDefaultInstance() {
}
class Chat::_Internal {
 public:
};

Chat::Chat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.chat_msg().empty()) {
    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  ::memcpy(&target_sn_, &from.target_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&target_sn_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.Chat)
}

void Chat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chat_msg_2eproto.base);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&target_sn_)) + sizeof(server_id_));
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:Proto.Chat)
  SharedDtor();
}

void Chat::SharedDtor() {
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chat& Chat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chat_msg_2eproto.base);
  return *internal_default_instance();
}


void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&target_sn_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Chat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.eChatChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_channel(static_cast<::Proto::eChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_chat_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Chat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Chat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.eChatChannel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::Proto::eChatChannel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cross = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chat_msg = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Chat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Chat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->target_sn(), output);
  }

  // bool cross = 3;
  if (this->cross() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->cross(), output);
  }

  // int32 server_id = 4;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }

  // bytes chat_msg = 5;
  if (this->chat_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->chat_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Chat)
}

::PROTOBUF_NAMESPACE_ID::uint8* Chat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->target_sn(), target);
  }

  // bool cross = 3;
  if (this->cross() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->cross(), target);
  }

  // int32 server_id = 4;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }

  // bytes chat_msg = 5;
  if (this->chat_msg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->chat_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Chat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_msg = 5;
  if (this->chat_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->chat_msg());
  }

  // int64 target_sn = 2;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
  }

  // bool cross = 3;
  if (this->cross() != 0) {
    total_size += 1 + 1;
  }

  // int32 server_id = 4;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  const Chat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Chat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Chat)
    MergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_msg().size() > 0) {

    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.cross() != 0) {
    set_cross(from.cross());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void Chat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chat_msg_.Swap(&other->chat_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_sn_, other->target_sn_);
  swap(channel_, other->channel_);
  swap(cross_, other->cross_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatRet::InitAsDefaultInstance() {
}
class ChatRet::_Internal {
 public:
};

ChatRet::ChatRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ChatRet)
}
ChatRet::ChatRet(const ChatRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.ChatRet)
}

void ChatRet::SharedCtor() {
  ret_ = 0;
}

ChatRet::~ChatRet() {
  // @@protoc_insertion_point(destructor:Proto.ChatRet)
  SharedDtor();
}

void ChatRet::SharedDtor() {
}

void ChatRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRet& ChatRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatRet_msg_2eproto.base);
  return *internal_default_instance();
}


void ChatRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ChatRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ChatRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ChatRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ChatRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ChatRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ChatRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ChatRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ChatRet)
  return target;
}

size_t ChatRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ChatRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ChatRet)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ChatRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ChatRet)
    MergeFrom(*source);
  }
}

void ChatRet::MergeFrom(const ChatRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ChatRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void ChatRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ChatRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRet::CopyFrom(const ChatRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ChatRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRet::IsInitialized() const {
  return true;
}

void ChatRet::InternalSwap(ChatRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncChat::InitAsDefaultInstance() {
}
class SyncChat::_Internal {
 public:
};

SyncChat::SyncChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SyncChat)
}
SyncChat::SyncChat(const SyncChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      chats_(from.chats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:Proto.SyncChat)
}

void SyncChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncChat_msg_2eproto.base);
  channel_ = 0;
}

SyncChat::~SyncChat() {
  // @@protoc_insertion_point(destructor:Proto.SyncChat)
  SharedDtor();
}

void SyncChat::SharedDtor() {
}

void SyncChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncChat& SyncChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncChat_msg_2eproto.base);
  return *internal_default_instance();
}


void SyncChat::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SyncChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chats_.Clear();
  channel_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.eChatChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_channel(static_cast<::Proto::eChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.STChatInfo chats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncChat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SyncChat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.eChatChannel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::Proto::eChatChannel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.STChatInfo chats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SyncChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SyncChat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncChat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SyncChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // repeated .Proto.STChatInfo chats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->chats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SyncChat)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncChat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SyncChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // repeated .Proto.STChatInfo chats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->chats(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SyncChat)
  return target;
}

size_t SyncChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SyncChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.STChatInfo chats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->chats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chats(static_cast<int>(i)));
    }
  }

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SyncChat)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SyncChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SyncChat)
    MergeFrom(*source);
  }
}

void SyncChat::MergeFrom(const SyncChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SyncChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chats_.MergeFrom(from.chats_);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void SyncChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SyncChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncChat::CopyFrom(const SyncChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SyncChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncChat::IsInitialized() const {
  return true;
}

void SyncChat::InternalSwap(SyncChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&chats_)->InternalSwap(CastToBase(&other->chats_));
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChatRecord::InitAsDefaultInstance() {
}
class GetChatRecord::_Internal {
 public:
};

GetChatRecord::GetChatRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GetChatRecord)
}
GetChatRecord::GetChatRecord(const GetChatRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_sn_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(my_sn_));
  // @@protoc_insertion_point(copy_constructor:Proto.GetChatRecord)
}

void GetChatRecord::SharedCtor() {
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_sn_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(my_sn_));
}

GetChatRecord::~GetChatRecord() {
  // @@protoc_insertion_point(destructor:Proto.GetChatRecord)
  SharedDtor();
}

void GetChatRecord::SharedDtor() {
}

void GetChatRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChatRecord& GetChatRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChatRecord_msg_2eproto.base);
  return *internal_default_instance();
}


void GetChatRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GetChatRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_sn_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(my_sn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetChatRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.eChatChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_channel(static_cast<::Proto::eChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // int64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 my_sn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          my_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetChatRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GetChatRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.eChatChannel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::Proto::eChatChannel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chat_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 my_sn = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &my_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GetChatRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GetChatRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetChatRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GetChatRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // int64 chat_id = 2;
  if (this->chat_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->chat_id(), output);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->target_sn(), output);
  }

  // int64 my_sn = 4;
  if (this->my_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->my_sn(), output);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GetChatRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChatRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GetChatRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // int64 chat_id = 2;
  if (this->chat_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->chat_id(), target);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->target_sn(), target);
  }

  // int64 my_sn = 4;
  if (this->my_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->my_sn(), target);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GetChatRecord)
  return target;
}

size_t GetChatRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GetChatRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 chat_id = 2;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->chat_id());
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int64 my_sn = 4;
  if (this->my_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->my_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GetChatRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChatRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GetChatRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GetChatRecord)
    MergeFrom(*source);
  }
}

void GetChatRecord::MergeFrom(const GetChatRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GetChatRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.my_sn() != 0) {
    set_my_sn(from.my_sn());
  }
}

void GetChatRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GetChatRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRecord::CopyFrom(const GetChatRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GetChatRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRecord::IsInitialized() const {
  return true;
}

void GetChatRecord::InternalSwap(GetChatRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chat_id_, other->chat_id_);
  swap(target_sn_, other->target_sn_);
  swap(channel_, other->channel_);
  swap(server_id_, other->server_id_);
  swap(my_sn_, other->my_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STChatInfo::InitAsDefaultInstance() {
}
class STChatInfo::_Internal {
 public:
};

STChatInfo::STChatInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.STChatInfo)
}
STChatInfo::STChatInfo(const STChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.chat_msg().empty()) {
    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_name().empty()) {
    sender_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  recver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.recver_name().empty()) {
    recver_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recver_name_);
  }
  ::memcpy(&chat_time_, &from.chat_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&chat_time_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.STChatInfo)
}

void STChatInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STChatInfo_msg_2eproto.base);
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&chat_time_)) + sizeof(server_id_));
}

STChatInfo::~STChatInfo() {
  // @@protoc_insertion_point(destructor:Proto.STChatInfo)
  SharedDtor();
}

void STChatInfo::SharedDtor() {
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recver_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void STChatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STChatInfo& STChatInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STChatInfo_msg_2eproto.base);
  return *internal_default_instance();
}


void STChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.STChatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recver_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&chat_time_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* STChatInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.eChatChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_channel(static_cast<::Proto::eChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // int64 chat_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 chat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_chat_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sender_sn = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sender_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sender_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 recver_sn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          recver_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recver_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_recver_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool STChatInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.STChatInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.eChatChannel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::Proto::eChatChannel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chat_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chat_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cross = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chat_msg = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sender_sn = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sender_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 recver_sn = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &recver_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes recver_name = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recver_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.STChatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.STChatInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void STChatInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.STChatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // int64 chat_time = 2;
  if (this->chat_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->chat_time(), output);
  }

  // int64 chat_id = 3;
  if (this->chat_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->chat_id(), output);
  }

  // bool cross = 4;
  if (this->cross() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->cross(), output);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->server_id(), output);
  }

  // bytes chat_msg = 6;
  if (this->chat_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->chat_msg(), output);
  }

  // int64 sender_sn = 7;
  if (this->sender_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->sender_sn(), output);
  }

  // bytes sender_name = 8;
  if (this->sender_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sender_name(), output);
  }

  // int64 recver_sn = 9;
  if (this->recver_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->recver_sn(), output);
  }

  // bytes recver_name = 10;
  if (this->recver_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->recver_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.STChatInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* STChatInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.STChatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // int64 chat_time = 2;
  if (this->chat_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->chat_time(), target);
  }

  // int64 chat_id = 3;
  if (this->chat_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->chat_id(), target);
  }

  // bool cross = 4;
  if (this->cross() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->cross(), target);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->server_id(), target);
  }

  // bytes chat_msg = 6;
  if (this->chat_msg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->chat_msg(), target);
  }

  // int64 sender_sn = 7;
  if (this->sender_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->sender_sn(), target);
  }

  // bytes sender_name = 8;
  if (this->sender_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->sender_name(), target);
  }

  // int64 recver_sn = 9;
  if (this->recver_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->recver_sn(), target);
  }

  // bytes recver_name = 10;
  if (this->recver_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        10, this->recver_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.STChatInfo)
  return target;
}

size_t STChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.STChatInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_msg = 6;
  if (this->chat_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->chat_msg());
  }

  // bytes sender_name = 8;
  if (this->sender_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sender_name());
  }

  // bytes recver_name = 10;
  if (this->recver_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->recver_name());
  }

  // int64 chat_time = 2;
  if (this->chat_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->chat_time());
  }

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
  }

  // bool cross = 4;
  if (this->cross() != 0) {
    total_size += 1 + 1;
  }

  // int64 chat_id = 3;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->chat_id());
  }

  // int64 sender_sn = 7;
  if (this->sender_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sender_sn());
  }

  // int64 recver_sn = 9;
  if (this->recver_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->recver_sn());
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STChatInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.STChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const STChatInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STChatInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.STChatInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.STChatInfo)
    MergeFrom(*source);
  }
}

void STChatInfo::MergeFrom(const STChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.STChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chat_msg().size() > 0) {

    chat_msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_msg_);
  }
  if (from.sender_name().size() > 0) {

    sender_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  if (from.recver_name().size() > 0) {

    recver_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recver_name_);
  }
  if (from.chat_time() != 0) {
    set_chat_time(from.chat_time());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.cross() != 0) {
    set_cross(from.cross());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
  if (from.sender_sn() != 0) {
    set_sender_sn(from.sender_sn());
  }
  if (from.recver_sn() != 0) {
    set_recver_sn(from.recver_sn());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void STChatInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.STChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STChatInfo::CopyFrom(const STChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.STChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STChatInfo::IsInitialized() const {
  return true;
}

void STChatInfo::InternalSwap(STChatInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chat_msg_.Swap(&other->chat_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recver_name_.Swap(&other->recver_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_time_, other->chat_time_);
  swap(channel_, other->channel_);
  swap(cross_, other->cross_);
  swap(chat_id_, other->chat_id_);
  swap(sender_sn_, other->sender_sn_);
  swap(recver_sn_, other->recver_sn_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STChatInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChatRecordRet::InitAsDefaultInstance() {
}
class GetChatRecordRet::_Internal {
 public:
};

GetChatRecordRet::GetChatRecordRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GetChatRecordRet)
}
GetChatRecordRet::GetChatRecordRet(const GetChatRecordRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      chats_(from.chats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&my_sn_, &from.my_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&my_sn_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:Proto.GetChatRecordRet)
}

void GetChatRecordRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChatRecordRet_msg_2eproto.base);
  ::memset(&my_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&my_sn_)) + sizeof(channel_));
}

GetChatRecordRet::~GetChatRecordRet() {
  // @@protoc_insertion_point(destructor:Proto.GetChatRecordRet)
  SharedDtor();
}

void GetChatRecordRet::SharedDtor() {
}

void GetChatRecordRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChatRecordRet& GetChatRecordRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChatRecordRet_msg_2eproto.base);
  return *internal_default_instance();
}


void GetChatRecordRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GetChatRecordRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chats_.Clear();
  ::memset(&my_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&my_sn_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetChatRecordRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.eChatChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_channel(static_cast<::Proto::eChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.STChatInfo chats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // int64 my_sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          my_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetChatRecordRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GetChatRecordRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.eChatChannel channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel(static_cast< ::Proto::eChatChannel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.STChatInfo chats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 my_sn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &my_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GetChatRecordRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GetChatRecordRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetChatRecordRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GetChatRecordRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // repeated .Proto.STChatInfo chats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->chats(static_cast<int>(i)),
      output);
  }

  // int64 my_sn = 3;
  if (this->my_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->my_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GetChatRecordRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChatRecordRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GetChatRecordRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // repeated .Proto.STChatInfo chats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chats_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->chats(static_cast<int>(i)), target);
  }

  // int64 my_sn = 3;
  if (this->my_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->my_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GetChatRecordRet)
  return target;
}

size_t GetChatRecordRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GetChatRecordRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.STChatInfo chats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->chats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chats(static_cast<int>(i)));
    }
  }

  // int64 my_sn = 3;
  if (this->my_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->my_sn());
  }

  // .Proto.eChatChannel channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatRecordRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GetChatRecordRet)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChatRecordRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChatRecordRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GetChatRecordRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GetChatRecordRet)
    MergeFrom(*source);
  }
}

void GetChatRecordRet::MergeFrom(const GetChatRecordRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GetChatRecordRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chats_.MergeFrom(from.chats_);
  if (from.my_sn() != 0) {
    set_my_sn(from.my_sn());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void GetChatRecordRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GetChatRecordRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatRecordRet::CopyFrom(const GetChatRecordRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GetChatRecordRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatRecordRet::IsInitialized() const {
  return true;
}

void GetChatRecordRet::InternalSwap(GetChatRecordRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&chats_)->InternalSwap(CastToBase(&other->chats_));
  swap(my_sn_, other->my_sn_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChatRecordRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryAllPlayerName::InitAsDefaultInstance() {
}
class QueryAllPlayerName::_Internal {
 public:
};

QueryAllPlayerName::QueryAllPlayerName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryAllPlayerName)
}
QueryAllPlayerName::QueryAllPlayerName(const QueryAllPlayerName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.QueryAllPlayerName)
}

void QueryAllPlayerName::SharedCtor() {
}

QueryAllPlayerName::~QueryAllPlayerName() {
  // @@protoc_insertion_point(destructor:Proto.QueryAllPlayerName)
  SharedDtor();
}

void QueryAllPlayerName::SharedDtor() {
}

void QueryAllPlayerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryAllPlayerName& QueryAllPlayerName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryAllPlayerName_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryAllPlayerName::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryAllPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryAllPlayerName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryAllPlayerName::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryAllPlayerName)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryAllPlayerName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryAllPlayerName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryAllPlayerName::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryAllPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryAllPlayerName)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryAllPlayerName::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryAllPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryAllPlayerName)
  return target;
}

size_t QueryAllPlayerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryAllPlayerName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryAllPlayerName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryAllPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryAllPlayerName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryAllPlayerName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryAllPlayerName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryAllPlayerName)
    MergeFrom(*source);
  }
}

void QueryAllPlayerName::MergeFrom(const QueryAllPlayerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryAllPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void QueryAllPlayerName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryAllPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllPlayerName::CopyFrom(const QueryAllPlayerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryAllPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllPlayerName::IsInitialized() const {
  return true;
}

void QueryAllPlayerName::InternalSwap(QueryAllPlayerName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllPlayerName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STPlayerSnName::InitAsDefaultInstance() {
}
class STPlayerSnName::_Internal {
 public:
};

STPlayerSnName::STPlayerSnName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.STPlayerSnName)
}
STPlayerSnName::STPlayerSnName(const STPlayerSnName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sn_ = from.sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.STPlayerSnName)
}

void STPlayerSnName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STPlayerSnName_msg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sn_ = PROTOBUF_LONGLONG(0);
}

STPlayerSnName::~STPlayerSnName() {
  // @@protoc_insertion_point(destructor:Proto.STPlayerSnName)
  SharedDtor();
}

void STPlayerSnName::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void STPlayerSnName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STPlayerSnName& STPlayerSnName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STPlayerSnName_msg_2eproto.base);
  return *internal_default_instance();
}


void STPlayerSnName::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.STPlayerSnName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* STPlayerSnName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool STPlayerSnName::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.STPlayerSnName)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.STPlayerSnName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.STPlayerSnName)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void STPlayerSnName::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.STPlayerSnName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->sn(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.STPlayerSnName)
}

::PROTOBUF_NAMESPACE_ID::uint8* STPlayerSnName::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.STPlayerSnName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->sn(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.STPlayerSnName)
  return target;
}

size_t STPlayerSnName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.STPlayerSnName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // int64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STPlayerSnName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.STPlayerSnName)
  GOOGLE_DCHECK_NE(&from, this);
  const STPlayerSnName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STPlayerSnName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.STPlayerSnName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.STPlayerSnName)
    MergeFrom(*source);
  }
}

void STPlayerSnName::MergeFrom(const STPlayerSnName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.STPlayerSnName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
}

void STPlayerSnName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.STPlayerSnName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STPlayerSnName::CopyFrom(const STPlayerSnName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.STPlayerSnName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STPlayerSnName::IsInitialized() const {
  return true;
}

void STPlayerSnName::InternalSwap(STPlayerSnName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STPlayerSnName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryAllPlayerNameRet::InitAsDefaultInstance() {
}
class QueryAllPlayerNameRet::_Internal {
 public:
};

QueryAllPlayerNameRet::QueryAllPlayerNameRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QueryAllPlayerNameRet)
}
QueryAllPlayerNameRet::QueryAllPlayerNameRet(const QueryAllPlayerNameRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.QueryAllPlayerNameRet)
}

void QueryAllPlayerNameRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryAllPlayerNameRet_msg_2eproto.base);
}

QueryAllPlayerNameRet::~QueryAllPlayerNameRet() {
  // @@protoc_insertion_point(destructor:Proto.QueryAllPlayerNameRet)
  SharedDtor();
}

void QueryAllPlayerNameRet::SharedDtor() {
}

void QueryAllPlayerNameRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryAllPlayerNameRet& QueryAllPlayerNameRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryAllPlayerNameRet_msg_2eproto.base);
  return *internal_default_instance();
}


void QueryAllPlayerNameRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QueryAllPlayerNameRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryAllPlayerNameRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.STPlayerSnName infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryAllPlayerNameRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QueryAllPlayerNameRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.STPlayerSnName infos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QueryAllPlayerNameRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QueryAllPlayerNameRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryAllPlayerNameRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QueryAllPlayerNameRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.STPlayerSnName infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QueryAllPlayerNameRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryAllPlayerNameRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QueryAllPlayerNameRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.STPlayerSnName infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QueryAllPlayerNameRet)
  return target;
}

size_t QueryAllPlayerNameRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QueryAllPlayerNameRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.STPlayerSnName infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryAllPlayerNameRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QueryAllPlayerNameRet)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryAllPlayerNameRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryAllPlayerNameRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QueryAllPlayerNameRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QueryAllPlayerNameRet)
    MergeFrom(*source);
  }
}

void QueryAllPlayerNameRet::MergeFrom(const QueryAllPlayerNameRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QueryAllPlayerNameRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void QueryAllPlayerNameRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QueryAllPlayerNameRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAllPlayerNameRet::CopyFrom(const QueryAllPlayerNameRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QueryAllPlayerNameRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllPlayerNameRet::IsInitialized() const {
  return true;
}

void QueryAllPlayerNameRet::InternalSwap(QueryAllPlayerNameRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllPlayerNameRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mute::InitAsDefaultInstance() {
}
class Mute::_Internal {
 public:
};

Mute::Mute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Mute)
}
Mute::Mute(const Mute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_sn_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(target_sn_));
  // @@protoc_insertion_point(copy_constructor:Proto.Mute)
}

void Mute::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sn_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(target_sn_));
}

Mute::~Mute() {
  // @@protoc_insertion_point(destructor:Proto.Mute)
  SharedDtor();
}

void Mute::SharedDtor() {
}

void Mute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mute& Mute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mute_msg_2eproto.base);
  return *internal_default_instance();
}


void Mute::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Mute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sn_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(target_sn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool cross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Mute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool cross = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mute = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Mute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Mute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Mute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cross = 1;
  if (this->cross() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->cross(), output);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->target_sn(), output);
  }

  // bool mute = 4;
  if (this->mute() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->mute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Mute)
}

::PROTOBUF_NAMESPACE_ID::uint8* Mute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Mute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cross = 1;
  if (this->cross() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->cross(), target);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->target_sn(), target);
  }

  // bool mute = 4;
  if (this->mute() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->mute(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Mute)
  return target;
}

size_t Mute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Mute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // bool cross = 1;
  if (this->cross() != 0) {
    total_size += 1 + 1;
  }

  // bool mute = 4;
  if (this->mute() != 0) {
    total_size += 1 + 1;
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Mute)
  GOOGLE_DCHECK_NE(&from, this);
  const Mute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Mute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Mute)
    MergeFrom(*source);
  }
}

void Mute::MergeFrom(const Mute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Mute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.cross() != 0) {
    set_cross(from.cross());
  }
  if (from.mute() != 0) {
    set_mute(from.mute());
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
}

void Mute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Mute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mute::CopyFrom(const Mute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Mute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mute::IsInitialized() const {
  return true;
}

void Mute::InternalSwap(Mute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
  swap(cross_, other->cross_);
  swap(mute_, other->mute_);
  swap(target_sn_, other->target_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MuteRet::InitAsDefaultInstance() {
}
class MuteRet::_Internal {
 public:
};

MuteRet::MuteRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.MuteRet)
}
MuteRet::MuteRet(const MuteRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operator_sn_, &from.operator_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_sn_) -
    reinterpret_cast<char*>(&operator_sn_)) + sizeof(target_sn_));
  // @@protoc_insertion_point(copy_constructor:Proto.MuteRet)
}

void MuteRet::SharedCtor() {
  ::memset(&operator_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sn_) -
      reinterpret_cast<char*>(&operator_sn_)) + sizeof(target_sn_));
}

MuteRet::~MuteRet() {
  // @@protoc_insertion_point(destructor:Proto.MuteRet)
  SharedDtor();
}

void MuteRet::SharedDtor() {
}

void MuteRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MuteRet& MuteRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MuteRet_msg_2eproto.base);
  return *internal_default_instance();
}


void MuteRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MuteRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operator_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sn_) -
      reinterpret_cast<char*>(&operator_sn_)) + sizeof(target_sn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MuteRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 operator_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operator_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MuteRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.MuteRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 operator_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &operator_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mute = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.MuteRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.MuteRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MuteRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.MuteRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int64 operator_sn = 2;
  if (this->operator_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->operator_sn(), output);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->target_sn(), output);
  }

  // bool mute = 4;
  if (this->mute() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->mute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.MuteRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* MuteRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MuteRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int64 operator_sn = 2;
  if (this->operator_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->operator_sn(), target);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->target_sn(), target);
  }

  // bool mute = 4;
  if (this->mute() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->mute(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MuteRet)
  return target;
}

size_t MuteRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MuteRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 operator_sn = 2;
  if (this->operator_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->operator_sn());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // bool mute = 4;
  if (this->mute() != 0) {
    total_size += 1 + 1;
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MuteRet)
  GOOGLE_DCHECK_NE(&from, this);
  const MuteRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MuteRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MuteRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MuteRet)
    MergeFrom(*source);
  }
}

void MuteRet::MergeFrom(const MuteRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MuteRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operator_sn() != 0) {
    set_operator_sn(from.operator_sn());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.mute() != 0) {
    set_mute(from.mute());
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
}

void MuteRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MuteRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuteRet::CopyFrom(const MuteRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MuteRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteRet::IsInitialized() const {
  return true;
}

void MuteRet::InternalSwap(MuteRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operator_sn_, other->operator_sn_);
  swap(ret_, other->ret_);
  swap(mute_, other->mute_);
  swap(target_sn_, other->target_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTargetInfo::InitAsDefaultInstance() {
}
class GetTargetInfo::_Internal {
 public:
};

GetTargetInfo::GetTargetInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GetTargetInfo)
}
GetTargetInfo::GetTargetInfo(const GetTargetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cross_, &from.cross_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_sn_) -
    reinterpret_cast<char*>(&cross_)) + sizeof(target_sn_));
  // @@protoc_insertion_point(copy_constructor:Proto.GetTargetInfo)
}

void GetTargetInfo::SharedCtor() {
  ::memset(&cross_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sn_) -
      reinterpret_cast<char*>(&cross_)) + sizeof(target_sn_));
}

GetTargetInfo::~GetTargetInfo() {
  // @@protoc_insertion_point(destructor:Proto.GetTargetInfo)
  SharedDtor();
}

void GetTargetInfo::SharedDtor() {
}

void GetTargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTargetInfo& GetTargetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTargetInfo_msg_2eproto.base);
  return *internal_default_instance();
}


void GetTargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GetTargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cross_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sn_) -
      reinterpret_cast<char*>(&cross_)) + sizeof(target_sn_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTargetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool cross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTargetInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GetTargetInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool cross = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GetTargetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GetTargetInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTargetInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GetTargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cross = 1;
  if (this->cross() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->cross(), output);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->target_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GetTargetInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTargetInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GetTargetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cross = 1;
  if (this->cross() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->cross(), target);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->target_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GetTargetInfo)
  return target;
}

size_t GetTargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GetTargetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool cross = 1;
  if (this->cross() != 0) {
    total_size += 1 + 1;
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int64 target_sn = 3;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTargetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GetTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTargetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTargetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GetTargetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GetTargetInfo)
    MergeFrom(*source);
  }
}

void GetTargetInfo::MergeFrom(const GetTargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GetTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cross() != 0) {
    set_cross(from.cross());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
}

void GetTargetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GetTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTargetInfo::CopyFrom(const GetTargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GetTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetInfo::IsInitialized() const {
  return true;
}

void GetTargetInfo::InternalSwap(GetTargetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cross_, other->cross_);
  swap(server_id_, other->server_id_);
  swap(target_sn_, other->target_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTargetInfoRet::InitAsDefaultInstance() {
}
class GetTargetInfoRet::_Internal {
 public:
};

GetTargetInfoRet::GetTargetInfoRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GetTargetInfoRet)
}
GetTargetInfoRet::GetTargetInfoRet(const GetTargetInfoRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.target_name().empty()) {
    target_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_name_);
  }
  res_pic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.res_pic().empty()) {
    res_pic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_pic_);
  }
  ::memcpy(&ret_, &from.ret_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&ret_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:Proto.GetTargetInfoRet)
}

void GetTargetInfoRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTargetInfoRet_msg_2eproto.base);
  target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_pic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(online_));
}

GetTargetInfoRet::~GetTargetInfoRet() {
  // @@protoc_insertion_point(destructor:Proto.GetTargetInfoRet)
  SharedDtor();
}

void GetTargetInfoRet::SharedDtor() {
  target_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_pic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTargetInfoRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTargetInfoRet& GetTargetInfoRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTargetInfoRet_msg_2eproto.base);
  return *internal_default_instance();
}


void GetTargetInfoRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GetTargetInfoRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_pic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTargetInfoRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cross = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_sn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes target_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_target_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_blacklist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          in_blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_mute = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          in_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes res_pic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_res_pic(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTargetInfoRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GetTargetInfoRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cross = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 server_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_sn = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes target_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_blacklist = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_blacklist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_mute = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes res_pic = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_res_pic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool online = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GetTargetInfoRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GetTargetInfoRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTargetInfoRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GetTargetInfoRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // bool cross = 2;
  if (this->cross() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->cross(), output);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }

  // int64 target_sn = 4;
  if (this->target_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->target_sn(), output);
  }

  // bytes target_name = 5;
  if (this->target_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->target_name(), output);
  }

  // bool in_blacklist = 6;
  if (this->in_blacklist() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->in_blacklist(), output);
  }

  // bool in_mute = 7;
  if (this->in_mute() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->in_mute(), output);
  }

  // bytes res_pic = 8;
  if (this->res_pic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->res_pic(), output);
  }

  // bool online = 9;
  if (this->online() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GetTargetInfoRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTargetInfoRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GetTargetInfoRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // bool cross = 2;
  if (this->cross() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->cross(), target);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }

  // int64 target_sn = 4;
  if (this->target_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->target_sn(), target);
  }

  // bytes target_name = 5;
  if (this->target_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->target_name(), target);
  }

  // bool in_blacklist = 6;
  if (this->in_blacklist() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->in_blacklist(), target);
  }

  // bool in_mute = 7;
  if (this->in_mute() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->in_mute(), target);
  }

  // bytes res_pic = 8;
  if (this->res_pic().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->res_pic(), target);
  }

  // bool online = 9;
  if (this->online() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GetTargetInfoRet)
  return target;
}

size_t GetTargetInfoRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GetTargetInfoRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes target_name = 5;
  if (this->target_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->target_name());
  }

  // bytes res_pic = 8;
  if (this->res_pic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->res_pic());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int64 target_sn = 4;
  if (this->target_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->target_sn());
  }

  // bool cross = 2;
  if (this->cross() != 0) {
    total_size += 1 + 1;
  }

  // bool in_blacklist = 6;
  if (this->in_blacklist() != 0) {
    total_size += 1 + 1;
  }

  // bool in_mute = 7;
  if (this->in_mute() != 0) {
    total_size += 1 + 1;
  }

  // bool online = 9;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTargetInfoRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GetTargetInfoRet)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTargetInfoRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTargetInfoRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GetTargetInfoRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GetTargetInfoRet)
    MergeFrom(*source);
  }
}

void GetTargetInfoRet::MergeFrom(const GetTargetInfoRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GetTargetInfoRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_name().size() > 0) {

    target_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_name_);
  }
  if (from.res_pic().size() > 0) {

    res_pic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_pic_);
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.target_sn() != 0) {
    set_target_sn(from.target_sn());
  }
  if (from.cross() != 0) {
    set_cross(from.cross());
  }
  if (from.in_blacklist() != 0) {
    set_in_blacklist(from.in_blacklist());
  }
  if (from.in_mute() != 0) {
    set_in_mute(from.in_mute());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void GetTargetInfoRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GetTargetInfoRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTargetInfoRet::CopyFrom(const GetTargetInfoRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GetTargetInfoRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetInfoRet::IsInitialized() const {
  return true;
}

void GetTargetInfoRet::InternalSwap(GetTargetInfoRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_name_.Swap(&other->target_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  res_pic_.Swap(&other->res_pic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_, other->ret_);
  swap(server_id_, other->server_id_);
  swap(target_sn_, other->target_sn_);
  swap(cross_, other->cross_);
  swap(in_blacklist_, other->in_blacklist_);
  swap(in_mute_, other->in_mute_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetInfoRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoardcastLogin::InitAsDefaultInstance() {
}
class BoardcastLogin::_Internal {
 public:
};

BoardcastLogin::BoardcastLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BoardcastLogin)
}
BoardcastLogin::BoardcastLogin(const BoardcastLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sn_ = from.sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.BoardcastLogin)
}

void BoardcastLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoardcastLogin_msg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sn_ = PROTOBUF_LONGLONG(0);
}

BoardcastLogin::~BoardcastLogin() {
  // @@protoc_insertion_point(destructor:Proto.BoardcastLogin)
  SharedDtor();
}

void BoardcastLogin::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BoardcastLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoardcastLogin& BoardcastLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoardcastLogin_msg_2eproto.base);
  return *internal_default_instance();
}


void BoardcastLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BoardcastLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoardcastLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoardcastLogin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BoardcastLogin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BoardcastLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BoardcastLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoardcastLogin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BoardcastLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->sn(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BoardcastLogin)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoardcastLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BoardcastLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->sn(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BoardcastLogin)
  return target;
}

size_t BoardcastLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BoardcastLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // int64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoardcastLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BoardcastLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const BoardcastLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoardcastLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BoardcastLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BoardcastLogin)
    MergeFrom(*source);
  }
}

void BoardcastLogin::MergeFrom(const BoardcastLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BoardcastLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sn() != 0) {
    set_sn(from.sn());
  }
}

void BoardcastLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BoardcastLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoardcastLogin::CopyFrom(const BoardcastLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BoardcastLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardcastLogin::IsInitialized() const {
  return true;
}

void BoardcastLogin::InternalSwap(BoardcastLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sn_, other->sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardcastLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STFriendInfo::InitAsDefaultInstance() {
}
class STFriendInfo::_Internal {
 public:
};

STFriendInfo::STFriendInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.STFriendInfo)
}
STFriendInfo::STFriendInfo(const STFriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_sn_, &from.player_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&player_sn_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:Proto.STFriendInfo)
}

void STFriendInfo::SharedCtor() {
  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(online_));
}

STFriendInfo::~STFriendInfo() {
  // @@protoc_insertion_point(destructor:Proto.STFriendInfo)
  SharedDtor();
}

void STFriendInfo::SharedDtor() {
}

void STFriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STFriendInfo& STFriendInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STFriendInfo_msg_2eproto.base);
  return *internal_default_instance();
}


void STFriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.STFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* STFriendInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool STFriendInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.STFriendInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 online = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.STFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.STFriendInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void STFriendInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.STFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->player_sn(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // int32 vip = 3;
  if (this->vip() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->vip(), output);
  }

  // int32 online = 4;
  if (this->online() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.STFriendInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* STFriendInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.STFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->player_sn(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // int32 vip = 3;
  if (this->vip() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->vip(), target);
  }

  // int32 online = 4;
  if (this->online() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.STFriendInfo)
  return target;
}

size_t STFriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.STFriendInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->player_sn());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 vip = 3;
  if (this->vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->vip());
  }

  // int32 online = 4;
  if (this->online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->online());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STFriendInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.STFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const STFriendInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STFriendInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.STFriendInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.STFriendInfo)
    MergeFrom(*source);
  }
}

void STFriendInfo::MergeFrom(const STFriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.STFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.vip() != 0) {
    set_vip(from.vip());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void STFriendInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.STFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STFriendInfo::CopyFrom(const STFriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.STFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STFriendInfo::IsInitialized() const {
  return true;
}

void STFriendInfo::InternalSwap(STFriendInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
  swap(level_, other->level_);
  swap(vip_, other->vip_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STFriendInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFriendList::InitAsDefaultInstance() {
}
class GetFriendList::_Internal {
 public:
};

GetFriendList::GetFriendList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GetFriendList)
}
GetFriendList::GetFriendList(const GetFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.GetFriendList)
}

void GetFriendList::SharedCtor() {
}

GetFriendList::~GetFriendList() {
  // @@protoc_insertion_point(destructor:Proto.GetFriendList)
  SharedDtor();
}

void GetFriendList::SharedDtor() {
}

void GetFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFriendList& GetFriendList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFriendList_msg_2eproto.base);
  return *internal_default_instance();
}


void GetFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GetFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFriendList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GetFriendList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GetFriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GetFriendList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFriendList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GetFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GetFriendList)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFriendList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GetFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GetFriendList)
  return target;
}

size_t GetFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GetFriendList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GetFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GetFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GetFriendList)
    MergeFrom(*source);
  }
}

void GetFriendList::MergeFrom(const GetFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GetFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GetFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendList::CopyFrom(const GetFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GetFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendList::IsInitialized() const {
  return true;
}

void GetFriendList::InternalSwap(GetFriendList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriendList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFriendListRet::InitAsDefaultInstance() {
}
class GetFriendListRet::_Internal {
 public:
};

GetFriendListRet::GetFriendListRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GetFriendListRet)
}
GetFriendListRet::GetFriendListRet(const GetFriendListRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.GetFriendListRet)
}

void GetFriendListRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFriendListRet_msg_2eproto.base);
}

GetFriendListRet::~GetFriendListRet() {
  // @@protoc_insertion_point(destructor:Proto.GetFriendListRet)
  SharedDtor();
}

void GetFriendListRet::SharedDtor() {
}

void GetFriendListRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFriendListRet& GetFriendListRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFriendListRet_msg_2eproto.base);
  return *internal_default_instance();
}


void GetFriendListRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GetFriendListRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFriendListRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.STFriendInfo friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFriendListRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GetFriendListRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.STFriendInfo friends = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GetFriendListRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GetFriendListRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFriendListRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GetFriendListRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.STFriendInfo friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->friends(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GetFriendListRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFriendListRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GetFriendListRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.STFriendInfo friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->friends(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GetFriendListRet)
  return target;
}

size_t GetFriendListRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GetFriendListRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.STFriendInfo friends = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->friends(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFriendListRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GetFriendListRet)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFriendListRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFriendListRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GetFriendListRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GetFriendListRet)
    MergeFrom(*source);
  }
}

void GetFriendListRet::MergeFrom(const GetFriendListRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GetFriendListRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void GetFriendListRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GetFriendListRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRet::CopyFrom(const GetFriendListRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GetFriendListRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRet::IsInitialized() const {
  return true;
}

void GetFriendListRet::InternalSwap(GetFriendListRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&friends_)->InternalSwap(CastToBase(&other->friends_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFriendListRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriend::InitAsDefaultInstance() {
}
class AddFriend::_Internal {
 public:
};

AddFriend::AddFriend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AddFriend)
}
AddFriend::AddFriend(const AddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_sn_, &from.player_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&player_sn_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.AddFriend)
}

void AddFriend::SharedCtor() {
  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(server_id_));
}

AddFriend::~AddFriend() {
  // @@protoc_insertion_point(destructor:Proto.AddFriend)
  SharedDtor();
}

void AddFriend::SharedDtor() {
}

void AddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriend& AddFriend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriend_msg_2eproto.base);
  return *internal_default_instance();
}


void AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&player_sn_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 player_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddFriend::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AddFriend)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 player_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AddFriend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddFriend::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // int64 player_sn = 2;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AddFriend)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriend::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // int64 player_sn = 2;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AddFriend)
  return target;
}

size_t AddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AddFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 player_sn = 2;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->player_sn());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AddFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AddFriend)
    MergeFrom(*source);
  }
}

void AddFriend::MergeFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void AddFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriend::CopyFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriend::IsInitialized() const {
  return true;
}

void AddFriend::InternalSwap(AddFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFriendRet::InitAsDefaultInstance() {
}
class AddFriendRet::_Internal {
 public:
};

AddFriendRet::AddFriendRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.AddFriendRet)
}
AddFriendRet::AddFriendRet(const AddFriendRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.AddFriendRet)
}

void AddFriendRet::SharedCtor() {
  ret_ = 0;
}

AddFriendRet::~AddFriendRet() {
  // @@protoc_insertion_point(destructor:Proto.AddFriendRet)
  SharedDtor();
}

void AddFriendRet::SharedDtor() {
}

void AddFriendRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFriendRet& AddFriendRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFriendRet_msg_2eproto.base);
  return *internal_default_instance();
}


void AddFriendRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.AddFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddFriendRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddFriendRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.AddFriendRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.AddFriendRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.AddFriendRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddFriendRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.AddFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.AddFriendRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFriendRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.AddFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.AddFriendRet)
  return target;
}

size_t AddFriendRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.AddFriendRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.AddFriendRet)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFriendRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.AddFriendRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.AddFriendRet)
    MergeFrom(*source);
  }
}

void AddFriendRet::MergeFrom(const AddFriendRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.AddFriendRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void AddFriendRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.AddFriendRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRet::CopyFrom(const AddFriendRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.AddFriendRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRet::IsInitialized() const {
  return true;
}

void AddFriendRet::InternalSwap(AddFriendRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelFriend::InitAsDefaultInstance() {
}
class DelFriend::_Internal {
 public:
};

DelFriend::DelFriend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DelFriend)
}
DelFriend::DelFriend(const DelFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.DelFriend)
}

void DelFriend::SharedCtor() {
  player_sn_ = 0;
}

DelFriend::~DelFriend() {
  // @@protoc_insertion_point(destructor:Proto.DelFriend)
  SharedDtor();
}

void DelFriend::SharedDtor() {
}

void DelFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelFriend& DelFriend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelFriend_msg_2eproto.base);
  return *internal_default_instance();
}


void DelFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DelFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DelFriend::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DelFriend)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DelFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DelFriend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DelFriend::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DelFriend)
}

::PROTOBUF_NAMESPACE_ID::uint8* DelFriend::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DelFriend)
  return target;
}

size_t DelFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DelFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DelFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DelFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DelFriend)
    MergeFrom(*source);
  }
}

void DelFriend::MergeFrom(const DelFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DelFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void DelFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DelFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriend::CopyFrom(const DelFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DelFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriend::IsInitialized() const {
  return true;
}

void DelFriend::InternalSwap(DelFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelFriend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelFriendRet::InitAsDefaultInstance() {
}
class DelFriendRet::_Internal {
 public:
};

DelFriendRet::DelFriendRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DelFriendRet)
}
DelFriendRet::DelFriendRet(const DelFriendRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DelFriendRet)
}

void DelFriendRet::SharedCtor() {
  ret_ = 0;
}

DelFriendRet::~DelFriendRet() {
  // @@protoc_insertion_point(destructor:Proto.DelFriendRet)
  SharedDtor();
}

void DelFriendRet::SharedDtor() {
}

void DelFriendRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelFriendRet& DelFriendRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelFriendRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DelFriendRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DelFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DelFriendRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DelFriendRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DelFriendRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DelFriendRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DelFriendRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DelFriendRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DelFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DelFriendRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DelFriendRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DelFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DelFriendRet)
  return target;
}

size_t DelFriendRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DelFriendRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DelFriendRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelFriendRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DelFriendRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DelFriendRet)
    MergeFrom(*source);
  }
}

void DelFriendRet::MergeFrom(const DelFriendRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DelFriendRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DelFriendRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DelFriendRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendRet::CopyFrom(const DelFriendRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DelFriendRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendRet::IsInitialized() const {
  return true;
}

void DelFriendRet::InternalSwap(DelFriendRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelFriendRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefreshFriend::InitAsDefaultInstance() {
}
class RefreshFriend::_Internal {
 public:
};

RefreshFriend::RefreshFriend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RefreshFriend)
}
RefreshFriend::RefreshFriend(const RefreshFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.RefreshFriend)
}

void RefreshFriend::SharedCtor() {
}

RefreshFriend::~RefreshFriend() {
  // @@protoc_insertion_point(destructor:Proto.RefreshFriend)
  SharedDtor();
}

void RefreshFriend::SharedDtor() {
}

void RefreshFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshFriend& RefreshFriend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshFriend_msg_2eproto.base);
  return *internal_default_instance();
}


void RefreshFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RefreshFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefreshFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefreshFriend::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RefreshFriend)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RefreshFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RefreshFriend)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefreshFriend::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RefreshFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RefreshFriend)
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshFriend::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RefreshFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RefreshFriend)
  return target;
}

size_t RefreshFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RefreshFriend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RefreshFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RefreshFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RefreshFriend)
    MergeFrom(*source);
  }
}

void RefreshFriend::MergeFrom(const RefreshFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RefreshFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RefreshFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RefreshFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshFriend::CopyFrom(const RefreshFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RefreshFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshFriend::IsInitialized() const {
  return true;
}

void RefreshFriend::InternalSwap(RefreshFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshFriend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefreshFriendRet::InitAsDefaultInstance() {
}
class RefreshFriendRet::_Internal {
 public:
};

RefreshFriendRet::RefreshFriendRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RefreshFriendRet)
}
RefreshFriendRet::RefreshFriendRet(const RefreshFriendRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.RefreshFriendRet)
}

void RefreshFriendRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefreshFriendRet_msg_2eproto.base);
}

RefreshFriendRet::~RefreshFriendRet() {
  // @@protoc_insertion_point(destructor:Proto.RefreshFriendRet)
  SharedDtor();
}

void RefreshFriendRet::SharedDtor() {
}

void RefreshFriendRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshFriendRet& RefreshFriendRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshFriendRet_msg_2eproto.base);
  return *internal_default_instance();
}


void RefreshFriendRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RefreshFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RefreshFriendRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.STFriendInfo friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RefreshFriendRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RefreshFriendRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.STFriendInfo friends = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RefreshFriendRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RefreshFriendRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RefreshFriendRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RefreshFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.STFriendInfo friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->friends(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RefreshFriendRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshFriendRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RefreshFriendRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.STFriendInfo friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->friends(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RefreshFriendRet)
  return target;
}

size_t RefreshFriendRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RefreshFriendRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.STFriendInfo friends = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->friends(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshFriendRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RefreshFriendRet)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshFriendRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshFriendRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RefreshFriendRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RefreshFriendRet)
    MergeFrom(*source);
  }
}

void RefreshFriendRet::MergeFrom(const RefreshFriendRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RefreshFriendRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void RefreshFriendRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RefreshFriendRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshFriendRet::CopyFrom(const RefreshFriendRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RefreshFriendRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshFriendRet::IsInitialized() const {
  return true;
}

void RefreshFriendRet::InternalSwap(RefreshFriendRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&friends_)->InternalSwap(CastToBase(&other->friends_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshFriendRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinGuild::InitAsDefaultInstance() {
}
class JoinGuild::_Internal {
 public:
};

JoinGuild::JoinGuild()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.JoinGuild)
}
JoinGuild::JoinGuild(const JoinGuild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_sn_ = from.guild_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.JoinGuild)
}

void JoinGuild::SharedCtor() {
  guild_sn_ = PROTOBUF_LONGLONG(0);
}

JoinGuild::~JoinGuild() {
  // @@protoc_insertion_point(destructor:Proto.JoinGuild)
  SharedDtor();
}

void JoinGuild::SharedDtor() {
}

void JoinGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGuild& JoinGuild::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinGuild_msg_2eproto.base);
  return *internal_default_instance();
}


void JoinGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.JoinGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinGuild::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 guild_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinGuild::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.JoinGuild)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 guild_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.JoinGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.JoinGuild)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinGuild::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.JoinGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guild_sn = 1;
  if (this->guild_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->guild_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.JoinGuild)
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGuild::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.JoinGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guild_sn = 1;
  if (this->guild_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->guild_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.JoinGuild)
  return target;
}

size_t JoinGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.JoinGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 guild_sn = 1;
  if (this->guild_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->guild_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGuild::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.JoinGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGuild* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGuild>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.JoinGuild)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.JoinGuild)
    MergeFrom(*source);
  }
}

void JoinGuild::MergeFrom(const JoinGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.JoinGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_sn() != 0) {
    set_guild_sn(from.guild_sn());
  }
}

void JoinGuild::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.JoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGuild::CopyFrom(const JoinGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.JoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGuild::IsInitialized() const {
  return true;
}

void JoinGuild::InternalSwap(JoinGuild* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_sn_, other->guild_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGuild::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinGuildRet::InitAsDefaultInstance() {
}
class JoinGuildRet::_Internal {
 public:
};

JoinGuildRet::JoinGuildRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.JoinGuildRet)
}
JoinGuildRet::JoinGuildRet(const JoinGuildRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_sn_, &from.guild_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&guild_sn_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Proto.JoinGuildRet)
}

void JoinGuildRet::SharedCtor() {
  ::memset(&guild_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guild_sn_)) + sizeof(ret_));
}

JoinGuildRet::~JoinGuildRet() {
  // @@protoc_insertion_point(destructor:Proto.JoinGuildRet)
  SharedDtor();
}

void JoinGuildRet::SharedDtor() {
}

void JoinGuildRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGuildRet& JoinGuildRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinGuildRet_msg_2eproto.base);
  return *internal_default_instance();
}


void JoinGuildRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.JoinGuildRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guild_sn_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinGuildRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 guild_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guild_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinGuildRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.JoinGuildRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 guild_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.JoinGuildRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.JoinGuildRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinGuildRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.JoinGuildRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int64 guild_sn = 2;
  if (this->guild_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->guild_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.JoinGuildRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGuildRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.JoinGuildRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int64 guild_sn = 2;
  if (this->guild_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->guild_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.JoinGuildRet)
  return target;
}

size_t JoinGuildRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.JoinGuildRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 guild_sn = 2;
  if (this->guild_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->guild_sn());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGuildRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.JoinGuildRet)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGuildRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGuildRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.JoinGuildRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.JoinGuildRet)
    MergeFrom(*source);
  }
}

void JoinGuildRet::MergeFrom(const JoinGuildRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.JoinGuildRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_sn() != 0) {
    set_guild_sn(from.guild_sn());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void JoinGuildRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.JoinGuildRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGuildRet::CopyFrom(const JoinGuildRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.JoinGuildRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGuildRet::IsInitialized() const {
  return true;
}

void JoinGuildRet::InternalSwap(JoinGuildRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_sn_, other->guild_sn_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGuildRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitGuild::InitAsDefaultInstance() {
}
class QuitGuild::_Internal {
 public:
};

QuitGuild::QuitGuild()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QuitGuild)
}
QuitGuild::QuitGuild(const QuitGuild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_sn_ = from.guild_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.QuitGuild)
}

void QuitGuild::SharedCtor() {
  guild_sn_ = PROTOBUF_LONGLONG(0);
}

QuitGuild::~QuitGuild() {
  // @@protoc_insertion_point(destructor:Proto.QuitGuild)
  SharedDtor();
}

void QuitGuild::SharedDtor() {
}

void QuitGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitGuild& QuitGuild::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitGuild_msg_2eproto.base);
  return *internal_default_instance();
}


void QuitGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QuitGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitGuild::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 guild_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitGuild::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QuitGuild)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 guild_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QuitGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QuitGuild)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitGuild::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QuitGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guild_sn = 1;
  if (this->guild_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->guild_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QuitGuild)
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitGuild::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QuitGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 guild_sn = 1;
  if (this->guild_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->guild_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QuitGuild)
  return target;
}

size_t QuitGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QuitGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 guild_sn = 1;
  if (this->guild_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->guild_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitGuild::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QuitGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGuild* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitGuild>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QuitGuild)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QuitGuild)
    MergeFrom(*source);
  }
}

void QuitGuild::MergeFrom(const QuitGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QuitGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_sn() != 0) {
    set_guild_sn(from.guild_sn());
  }
}

void QuitGuild::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QuitGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGuild::CopyFrom(const QuitGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QuitGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGuild::IsInitialized() const {
  return true;
}

void QuitGuild::InternalSwap(QuitGuild* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_sn_, other->guild_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGuild::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitGuildRet::InitAsDefaultInstance() {
}
class QuitGuildRet::_Internal {
 public:
};

QuitGuildRet::QuitGuildRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QuitGuildRet)
}
QuitGuildRet::QuitGuildRet(const QuitGuildRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_sn_, &from.guild_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&guild_sn_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Proto.QuitGuildRet)
}

void QuitGuildRet::SharedCtor() {
  ::memset(&guild_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guild_sn_)) + sizeof(ret_));
}

QuitGuildRet::~QuitGuildRet() {
  // @@protoc_insertion_point(destructor:Proto.QuitGuildRet)
  SharedDtor();
}

void QuitGuildRet::SharedDtor() {
}

void QuitGuildRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitGuildRet& QuitGuildRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitGuildRet_msg_2eproto.base);
  return *internal_default_instance();
}


void QuitGuildRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QuitGuildRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guild_sn_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitGuildRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 guild_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guild_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitGuildRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QuitGuildRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 guild_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QuitGuildRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QuitGuildRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitGuildRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QuitGuildRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int64 guild_sn = 2;
  if (this->guild_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->guild_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QuitGuildRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitGuildRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QuitGuildRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int64 guild_sn = 2;
  if (this->guild_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->guild_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QuitGuildRet)
  return target;
}

size_t QuitGuildRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QuitGuildRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 guild_sn = 2;
  if (this->guild_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->guild_sn());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitGuildRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QuitGuildRet)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGuildRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitGuildRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QuitGuildRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QuitGuildRet)
    MergeFrom(*source);
  }
}

void QuitGuildRet::MergeFrom(const QuitGuildRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QuitGuildRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_sn() != 0) {
    set_guild_sn(from.guild_sn());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void QuitGuildRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QuitGuildRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGuildRet::CopyFrom(const QuitGuildRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QuitGuildRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGuildRet::IsInitialized() const {
  return true;
}

void QuitGuildRet::InternalSwap(QuitGuildRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(guild_sn_, other->guild_sn_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGuildRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinTeam::InitAsDefaultInstance() {
}
class JoinTeam::_Internal {
 public:
};

JoinTeam::JoinTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.JoinTeam)
}
JoinTeam::JoinTeam(const JoinTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_sn_ = from.team_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.JoinTeam)
}

void JoinTeam::SharedCtor() {
  team_sn_ = PROTOBUF_LONGLONG(0);
}

JoinTeam::~JoinTeam() {
  // @@protoc_insertion_point(destructor:Proto.JoinTeam)
  SharedDtor();
}

void JoinTeam::SharedDtor() {
}

void JoinTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinTeam& JoinTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinTeam_msg_2eproto.base);
  return *internal_default_instance();
}


void JoinTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.JoinTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 team_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.JoinTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 team_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.JoinTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.JoinTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.JoinTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 team_sn = 1;
  if (this->team_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->team_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.JoinTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.JoinTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 team_sn = 1;
  if (this->team_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->team_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.JoinTeam)
  return target;
}

size_t JoinTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.JoinTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 team_sn = 1;
  if (this->team_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->team_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.JoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.JoinTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.JoinTeam)
    MergeFrom(*source);
  }
}

void JoinTeam::MergeFrom(const JoinTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.JoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_sn() != 0) {
    set_team_sn(from.team_sn());
  }
}

void JoinTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.JoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTeam::CopyFrom(const JoinTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.JoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTeam::IsInitialized() const {
  return true;
}

void JoinTeam::InternalSwap(JoinTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_sn_, other->team_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinTeamRet::InitAsDefaultInstance() {
}
class JoinTeamRet::_Internal {
 public:
};

JoinTeamRet::JoinTeamRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.JoinTeamRet)
}
JoinTeamRet::JoinTeamRet(const JoinTeamRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_sn_, &from.team_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&team_sn_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Proto.JoinTeamRet)
}

void JoinTeamRet::SharedCtor() {
  ::memset(&team_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&team_sn_)) + sizeof(ret_));
}

JoinTeamRet::~JoinTeamRet() {
  // @@protoc_insertion_point(destructor:Proto.JoinTeamRet)
  SharedDtor();
}

void JoinTeamRet::SharedDtor() {
}

void JoinTeamRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinTeamRet& JoinTeamRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinTeamRet_msg_2eproto.base);
  return *internal_default_instance();
}


void JoinTeamRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.JoinTeamRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&team_sn_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinTeamRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 team_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          team_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinTeamRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.JoinTeamRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 team_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.JoinTeamRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.JoinTeamRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinTeamRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.JoinTeamRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int64 team_sn = 2;
  if (this->team_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->team_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.JoinTeamRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinTeamRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.JoinTeamRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int64 team_sn = 2;
  if (this->team_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->team_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.JoinTeamRet)
  return target;
}

size_t JoinTeamRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.JoinTeamRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 team_sn = 2;
  if (this->team_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->team_sn());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinTeamRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.JoinTeamRet)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinTeamRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinTeamRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.JoinTeamRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.JoinTeamRet)
    MergeFrom(*source);
  }
}

void JoinTeamRet::MergeFrom(const JoinTeamRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.JoinTeamRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_sn() != 0) {
    set_team_sn(from.team_sn());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void JoinTeamRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.JoinTeamRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinTeamRet::CopyFrom(const JoinTeamRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.JoinTeamRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinTeamRet::IsInitialized() const {
  return true;
}

void JoinTeamRet::InternalSwap(JoinTeamRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_sn_, other->team_sn_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinTeamRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitTeam::InitAsDefaultInstance() {
}
class QuitTeam::_Internal {
 public:
};

QuitTeam::QuitTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QuitTeam)
}
QuitTeam::QuitTeam(const QuitTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_sn_ = from.team_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.QuitTeam)
}

void QuitTeam::SharedCtor() {
  team_sn_ = PROTOBUF_LONGLONG(0);
}

QuitTeam::~QuitTeam() {
  // @@protoc_insertion_point(destructor:Proto.QuitTeam)
  SharedDtor();
}

void QuitTeam::SharedDtor() {
}

void QuitTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitTeam& QuitTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitTeam_msg_2eproto.base);
  return *internal_default_instance();
}


void QuitTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QuitTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_sn_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 team_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          team_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QuitTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 team_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QuitTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QuitTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QuitTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 team_sn = 1;
  if (this->team_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->team_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QuitTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QuitTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 team_sn = 1;
  if (this->team_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->team_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QuitTeam)
  return target;
}

size_t QuitTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QuitTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 team_sn = 1;
  if (this->team_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->team_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QuitTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QuitTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QuitTeam)
    MergeFrom(*source);
  }
}

void QuitTeam::MergeFrom(const QuitTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QuitTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_sn() != 0) {
    set_team_sn(from.team_sn());
  }
}

void QuitTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QuitTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitTeam::CopyFrom(const QuitTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QuitTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitTeam::IsInitialized() const {
  return true;
}

void QuitTeam::InternalSwap(QuitTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_sn_, other->team_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitTeamRet::InitAsDefaultInstance() {
}
class QuitTeamRet::_Internal {
 public:
};

QuitTeamRet::QuitTeamRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.QuitTeamRet)
}
QuitTeamRet::QuitTeamRet(const QuitTeamRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_sn_, &from.team_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&team_sn_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:Proto.QuitTeamRet)
}

void QuitTeamRet::SharedCtor() {
  ::memset(&team_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&team_sn_)) + sizeof(ret_));
}

QuitTeamRet::~QuitTeamRet() {
  // @@protoc_insertion_point(destructor:Proto.QuitTeamRet)
  SharedDtor();
}

void QuitTeamRet::SharedDtor() {
}

void QuitTeamRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitTeamRet& QuitTeamRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitTeamRet_msg_2eproto.base);
  return *internal_default_instance();
}


void QuitTeamRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.QuitTeamRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&team_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&team_sn_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuitTeamRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 team_sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          team_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuitTeamRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.QuitTeamRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 team_sn = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.QuitTeamRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.QuitTeamRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuitTeamRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.QuitTeamRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // int64 team_sn = 2;
  if (this->team_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->team_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.QuitTeamRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitTeamRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.QuitTeamRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // int64 team_sn = 2;
  if (this->team_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->team_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.QuitTeamRet)
  return target;
}

size_t QuitTeamRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.QuitTeamRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 team_sn = 2;
  if (this->team_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->team_sn());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitTeamRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.QuitTeamRet)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitTeamRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitTeamRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.QuitTeamRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.QuitTeamRet)
    MergeFrom(*source);
  }
}

void QuitTeamRet::MergeFrom(const QuitTeamRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.QuitTeamRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.team_sn() != 0) {
    set_team_sn(from.team_sn());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void QuitTeamRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.QuitTeamRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitTeamRet::CopyFrom(const QuitTeamRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.QuitTeamRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitTeamRet::IsInitialized() const {
  return true;
}

void QuitTeamRet::InternalSwap(QuitTeamRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_sn_, other->team_sn_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitTeamRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncPlayerProperty::InitAsDefaultInstance() {
}
class SyncPlayerProperty::_Internal {
 public:
};

SyncPlayerProperty::SyncPlayerProperty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SyncPlayerProperty)
}
SyncPlayerProperty::SyncPlayerProperty(const SyncPlayerProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(property_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.SyncPlayerProperty)
}

void SyncPlayerProperty::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(property_type_));
}

SyncPlayerProperty::~SyncPlayerProperty() {
  // @@protoc_insertion_point(destructor:Proto.SyncPlayerProperty)
  SharedDtor();
}

void SyncPlayerProperty::SharedDtor() {
}

void SyncPlayerProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPlayerProperty& SyncPlayerProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPlayerProperty_msg_2eproto.base);
  return *internal_default_instance();
}


void SyncPlayerProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SyncPlayerProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(property_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncPlayerProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_property_type(static_cast<::Proto::SyncPlayerProperty_PlayerPropertyType>(val));
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncPlayerProperty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SyncPlayerProperty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_property_type(static_cast< ::Proto::SyncPlayerProperty_PlayerPropertyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value_change = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SyncPlayerProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SyncPlayerProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncPlayerProperty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SyncPlayerProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
  if (this->property_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->property_type(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // int64 value_change = 3;
  if (this->value_change() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->value_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SyncPlayerProperty)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerProperty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SyncPlayerProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
  if (this->property_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->property_type(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // int64 value_change = 3;
  if (this->value_change() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->value_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SyncPlayerProperty)
  return target;
}

size_t SyncPlayerProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SyncPlayerProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->value());
  }

  // int64 value_change = 3;
  if (this->value_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->value_change());
  }

  // .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
  if (this->property_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->property_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SyncPlayerProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerProperty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SyncPlayerProperty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SyncPlayerProperty)
    MergeFrom(*source);
  }
}

void SyncPlayerProperty::MergeFrom(const SyncPlayerProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SyncPlayerProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.value_change() != 0) {
    set_value_change(from.value_change());
  }
  if (from.property_type() != 0) {
    set_property_type(from.property_type());
  }
}

void SyncPlayerProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SyncPlayerProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerProperty::CopyFrom(const SyncPlayerProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SyncPlayerProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerProperty::IsInitialized() const {
  return true;
}

void SyncPlayerProperty::InternalSwap(SyncPlayerProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(value_change_, other->value_change_);
  swap(property_type_, other->property_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerProperty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncPlayerPropertyList::InitAsDefaultInstance() {
}
class SyncPlayerPropertyList::_Internal {
 public:
};

SyncPlayerPropertyList::SyncPlayerPropertyList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.SyncPlayerPropertyList)
}
SyncPlayerPropertyList::SyncPlayerPropertyList(const SyncPlayerPropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.SyncPlayerPropertyList)
}

void SyncPlayerPropertyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncPlayerPropertyList_msg_2eproto.base);
}

SyncPlayerPropertyList::~SyncPlayerPropertyList() {
  // @@protoc_insertion_point(destructor:Proto.SyncPlayerPropertyList)
  SharedDtor();
}

void SyncPlayerPropertyList::SharedDtor() {
}

void SyncPlayerPropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPlayerPropertyList& SyncPlayerPropertyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPlayerPropertyList_msg_2eproto.base);
  return *internal_default_instance();
}


void SyncPlayerPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.SyncPlayerPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncPlayerPropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.SyncPlayerProperty properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncPlayerPropertyList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.SyncPlayerPropertyList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.SyncPlayerProperty properties = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.SyncPlayerPropertyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.SyncPlayerPropertyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncPlayerPropertyList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.SyncPlayerPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.SyncPlayerProperty properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->properties(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.SyncPlayerPropertyList)
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerPropertyList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.SyncPlayerPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.SyncPlayerProperty properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->properties(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.SyncPlayerPropertyList)
  return target;
}

size_t SyncPlayerPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.SyncPlayerPropertyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.SyncPlayerProperty properties = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->properties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->properties(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerPropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.SyncPlayerPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerPropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerPropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.SyncPlayerPropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.SyncPlayerPropertyList)
    MergeFrom(*source);
  }
}

void SyncPlayerPropertyList::MergeFrom(const SyncPlayerPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.SyncPlayerPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void SyncPlayerPropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.SyncPlayerPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerPropertyList::CopyFrom(const SyncPlayerPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.SyncPlayerPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerPropertyList::IsInitialized() const {
  return true;
}

void SyncPlayerPropertyList::InternalSwap(SyncPlayerPropertyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&properties_)->InternalSwap(CastToBase(&other->properties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerPropertyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestChangeTeam::InitAsDefaultInstance() {
}
class RequestChangeTeam::_Internal {
 public:
};

void RequestChangeTeam::clear_cards() {
  cards_.Clear();
}
RequestChangeTeam::RequestChangeTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestChangeTeam)
}
RequestChangeTeam::RequestChangeTeam(const RequestChangeTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_type_ = from.team_type_;
  // @@protoc_insertion_point(copy_constructor:Proto.RequestChangeTeam)
}

void RequestChangeTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestChangeTeam_msg_2eproto.base);
  team_type_ = 0;
}

RequestChangeTeam::~RequestChangeTeam() {
  // @@protoc_insertion_point(destructor:Proto.RequestChangeTeam)
  SharedDtor();
}

void RequestChangeTeam::SharedDtor() {
}

void RequestChangeTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestChangeTeam& RequestChangeTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestChangeTeam_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestChangeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  team_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestChangeTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.Team.TeamType team_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_team_type(static_cast<::Proto::Team_TeamType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.CardTeam cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestChangeTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestChangeTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.Team.TeamType team_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_team_type(static_cast< ::Proto::Team_TeamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.CardTeam cards = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestChangeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestChangeTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestChangeTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Team.TeamType team_type = 1;
  if (this->team_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->team_type(), output);
  }

  // repeated .Proto.CardTeam cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cards(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestChangeTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestChangeTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Team.TeamType team_type = 1;
  if (this->team_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->team_type(), target);
  }

  // repeated .Proto.CardTeam cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cards(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestChangeTeam)
  return target;
}

size_t RequestChangeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestChangeTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.CardTeam cards = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cards(static_cast<int>(i)));
    }
  }

  // .Proto.Team.TeamType team_type = 1;
  if (this->team_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->team_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestChangeTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestChangeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestChangeTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestChangeTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestChangeTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestChangeTeam)
    MergeFrom(*source);
  }
}

void RequestChangeTeam::MergeFrom(const RequestChangeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestChangeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.team_type() != 0) {
    set_team_type(from.team_type());
  }
}

void RequestChangeTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestChangeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChangeTeam::CopyFrom(const RequestChangeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestChangeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChangeTeam::IsInitialized() const {
  return true;
}

void RequestChangeTeam::InternalSwap(RequestChangeTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cards_)->InternalSwap(CastToBase(&other->cards_));
  swap(team_type_, other->team_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestChangeTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReseponseChangeTeam::InitAsDefaultInstance() {
}
class ReseponseChangeTeam::_Internal {
 public:
};

void ReseponseChangeTeam::clear_cards() {
  cards_.Clear();
}
ReseponseChangeTeam::ReseponseChangeTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReseponseChangeTeam)
}
ReseponseChangeTeam::ReseponseChangeTeam(const ReseponseChangeTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cards_(from.cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_type_ = from.team_type_;
  // @@protoc_insertion_point(copy_constructor:Proto.ReseponseChangeTeam)
}

void ReseponseChangeTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReseponseChangeTeam_msg_2eproto.base);
  team_type_ = 0;
}

ReseponseChangeTeam::~ReseponseChangeTeam() {
  // @@protoc_insertion_point(destructor:Proto.ReseponseChangeTeam)
  SharedDtor();
}

void ReseponseChangeTeam::SharedDtor() {
}

void ReseponseChangeTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReseponseChangeTeam& ReseponseChangeTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReseponseChangeTeam_msg_2eproto.base);
  return *internal_default_instance();
}


void ReseponseChangeTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReseponseChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cards_.Clear();
  team_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReseponseChangeTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.Team.TeamType team_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_team_type(static_cast<::Proto::Team_TeamType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.CardTeam cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReseponseChangeTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReseponseChangeTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.Team.TeamType team_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_team_type(static_cast< ::Proto::Team_TeamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.CardTeam cards = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReseponseChangeTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReseponseChangeTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReseponseChangeTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReseponseChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Team.TeamType team_type = 1;
  if (this->team_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->team_type(), output);
  }

  // repeated .Proto.CardTeam cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cards(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReseponseChangeTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReseponseChangeTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReseponseChangeTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.Team.TeamType team_type = 1;
  if (this->team_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->team_type(), target);
  }

  // repeated .Proto.CardTeam cards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cards_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cards(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReseponseChangeTeam)
  return target;
}

size_t ReseponseChangeTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReseponseChangeTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.CardTeam cards = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cards(static_cast<int>(i)));
    }
  }

  // .Proto.Team.TeamType team_type = 1;
  if (this->team_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->team_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReseponseChangeTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReseponseChangeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReseponseChangeTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReseponseChangeTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReseponseChangeTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReseponseChangeTeam)
    MergeFrom(*source);
  }
}

void ReseponseChangeTeam::MergeFrom(const ReseponseChangeTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReseponseChangeTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cards_.MergeFrom(from.cards_);
  if (from.team_type() != 0) {
    set_team_type(from.team_type());
  }
}

void ReseponseChangeTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReseponseChangeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReseponseChangeTeam::CopyFrom(const ReseponseChangeTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReseponseChangeTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReseponseChangeTeam::IsInitialized() const {
  return true;
}

void ReseponseChangeTeam::InternalSwap(ReseponseChangeTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cards_)->InternalSwap(CastToBase(&other->cards_));
  swap(team_type_, other->team_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReseponseChangeTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCardLevelUp::InitAsDefaultInstance() {
}
class ReqCardLevelUp::_Internal {
 public:
};

void ReqCardLevelUp::clear_material() {
  material_.Clear();
}
ReqCardLevelUp::ReqCardLevelUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReqCardLevelUp)
}
ReqCardLevelUp::ReqCardLevelUp(const ReqCardLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      material_(from.material_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardid_, &from.cardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator_type_) -
    reinterpret_cast<char*>(&cardid_)) + sizeof(operator_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.ReqCardLevelUp)
}

void ReqCardLevelUp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCardLevelUp_msg_2eproto.base);
  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_type_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(operator_type_));
}

ReqCardLevelUp::~ReqCardLevelUp() {
  // @@protoc_insertion_point(destructor:Proto.ReqCardLevelUp)
  SharedDtor();
}

void ReqCardLevelUp::SharedDtor() {
}

void ReqCardLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCardLevelUp& ReqCardLevelUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCardLevelUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ReqCardLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReqCardLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  material_.Clear();
  ::memset(&cardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_type_) -
      reinterpret_cast<char*>(&cardid_)) + sizeof(operator_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCardLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOneKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isonekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Item material = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_material(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // int32 operator_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          operator_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCardLevelUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReqCardLevelUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cardID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOneKey = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonekey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.Item material = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 operator_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReqCardLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReqCardLevelUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCardLevelUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReqCardLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // bool isOneKey = 2;
  if (this->isonekey() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->isonekey(), output);
  }

  // repeated .Proto.Item material = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->material_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->material(static_cast<int>(i)),
      output);
  }

  // int32 operator_type = 4;
  if (this->operator_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->operator_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReqCardLevelUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCardLevelUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReqCardLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // bool isOneKey = 2;
  if (this->isonekey() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->isonekey(), target);
  }

  // repeated .Proto.Item material = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->material_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->material(static_cast<int>(i)), target);
  }

  // int32 operator_type = 4;
  if (this->operator_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->operator_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReqCardLevelUp)
  return target;
}

size_t ReqCardLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReqCardLevelUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Item material = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->material_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->material(static_cast<int>(i)));
    }
  }

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardid());
  }

  // bool isOneKey = 2;
  if (this->isonekey() != 0) {
    total_size += 1 + 1;
  }

  // int32 operator_type = 4;
  if (this->operator_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->operator_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCardLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReqCardLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCardLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCardLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReqCardLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReqCardLevelUp)
    MergeFrom(*source);
  }
}

void ReqCardLevelUp::MergeFrom(const ReqCardLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReqCardLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  material_.MergeFrom(from.material_);
  if (from.cardid() != 0) {
    set_cardid(from.cardid());
  }
  if (from.isonekey() != 0) {
    set_isonekey(from.isonekey());
  }
  if (from.operator_type() != 0) {
    set_operator_type(from.operator_type());
  }
}

void ReqCardLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReqCardLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCardLevelUp::CopyFrom(const ReqCardLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReqCardLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCardLevelUp::IsInitialized() const {
  return true;
}

void ReqCardLevelUp::InternalSwap(ReqCardLevelUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&material_)->InternalSwap(CastToBase(&other->material_));
  swap(cardid_, other->cardid_);
  swap(isonekey_, other->isonekey_);
  swap(operator_type_, other->operator_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCardLevelUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCardStar::InitAsDefaultInstance() {
}
class ReqCardStar::_Internal {
 public:
};

void ReqCardStar::clear_materialitems() {
  materialitems_.Clear();
}
ReqCardStar::ReqCardStar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReqCardStar)
}
ReqCardStar::ReqCardStar(const ReqCardStar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      materialitems_(from.materialitems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cardid_ = from.cardid_;
  // @@protoc_insertion_point(copy_constructor:Proto.ReqCardStar)
}

void ReqCardStar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCardStar_msg_2eproto.base);
  cardid_ = 0;
}

ReqCardStar::~ReqCardStar() {
  // @@protoc_insertion_point(destructor:Proto.ReqCardStar)
  SharedDtor();
}

void ReqCardStar::SharedDtor() {
}

void ReqCardStar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCardStar& ReqCardStar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCardStar_msg_2eproto.base);
  return *internal_default_instance();
}


void ReqCardStar::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReqCardStar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materialitems_.Clear();
  cardid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCardStar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.ItemBase materialItems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_materialitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCardStar::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReqCardStar)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cardID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.ItemBase materialItems = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_materialitems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReqCardStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReqCardStar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCardStar::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReqCardStar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // repeated .Proto.ItemBase materialItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->materialitems_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->materialitems(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReqCardStar)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCardStar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReqCardStar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // repeated .Proto.ItemBase materialItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->materialitems_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->materialitems(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReqCardStar)
  return target;
}

size_t ReqCardStar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReqCardStar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ItemBase materialItems = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->materialitems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->materialitems(static_cast<int>(i)));
    }
  }

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCardStar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReqCardStar)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCardStar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCardStar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReqCardStar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReqCardStar)
    MergeFrom(*source);
  }
}

void ReqCardStar::MergeFrom(const ReqCardStar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReqCardStar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materialitems_.MergeFrom(from.materialitems_);
  if (from.cardid() != 0) {
    set_cardid(from.cardid());
  }
}

void ReqCardStar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReqCardStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCardStar::CopyFrom(const ReqCardStar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReqCardStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCardStar::IsInitialized() const {
  return true;
}

void ReqCardStar::InternalSwap(ReqCardStar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&materialitems_)->InternalSwap(CastToBase(&other->materialitems_));
  swap(cardid_, other->cardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCardStar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCardQlt::InitAsDefaultInstance() {
}
class ReqCardQlt::_Internal {
 public:
};

void ReqCardQlt::clear_materialitems() {
  materialitems_.Clear();
}
ReqCardQlt::ReqCardQlt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReqCardQlt)
}
ReqCardQlt::ReqCardQlt(const ReqCardQlt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      materialitems_(from.materialitems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qltcardid_ = from.qltcardid_;
  // @@protoc_insertion_point(copy_constructor:Proto.ReqCardQlt)
}

void ReqCardQlt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCardQlt_msg_2eproto.base);
  qltcardid_ = 0;
}

ReqCardQlt::~ReqCardQlt() {
  // @@protoc_insertion_point(destructor:Proto.ReqCardQlt)
  SharedDtor();
}

void ReqCardQlt::SharedDtor() {
}

void ReqCardQlt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCardQlt& ReqCardQlt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCardQlt_msg_2eproto.base);
  return *internal_default_instance();
}


void ReqCardQlt::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReqCardQlt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materialitems_.Clear();
  qltcardid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCardQlt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 qltCardID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          qltcardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.ItemBase materialItems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_materialitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCardQlt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReqCardQlt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 qltCardID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &qltcardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.ItemBase materialItems = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_materialitems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReqCardQlt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReqCardQlt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCardQlt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReqCardQlt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 qltCardID = 1;
  if (this->qltcardid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->qltcardid(), output);
  }

  // repeated .Proto.ItemBase materialItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->materialitems_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->materialitems(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReqCardQlt)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCardQlt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReqCardQlt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 qltCardID = 1;
  if (this->qltcardid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->qltcardid(), target);
  }

  // repeated .Proto.ItemBase materialItems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->materialitems_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->materialitems(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReqCardQlt)
  return target;
}

size_t ReqCardQlt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReqCardQlt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ItemBase materialItems = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->materialitems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->materialitems(static_cast<int>(i)));
    }
  }

  // int32 qltCardID = 1;
  if (this->qltcardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->qltcardid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCardQlt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReqCardQlt)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCardQlt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCardQlt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReqCardQlt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReqCardQlt)
    MergeFrom(*source);
  }
}

void ReqCardQlt::MergeFrom(const ReqCardQlt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReqCardQlt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materialitems_.MergeFrom(from.materialitems_);
  if (from.qltcardid() != 0) {
    set_qltcardid(from.qltcardid());
  }
}

void ReqCardQlt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReqCardQlt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCardQlt::CopyFrom(const ReqCardQlt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReqCardQlt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCardQlt::IsInitialized() const {
  return true;
}

void ReqCardQlt::InternalSwap(ReqCardQlt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&materialitems_)->InternalSwap(CastToBase(&other->materialitems_));
  swap(qltcardid_, other->qltcardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCardQlt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCardLevel::InitAsDefaultInstance() {
  ::Proto::_ResCardLevel_default_instance_._instance.get_mutable()->newcard_ = const_cast< ::Proto::Card*>(
      ::Proto::Card::internal_default_instance());
}
class ResCardLevel::_Internal {
 public:
  static const ::Proto::Card& newcard(const ResCardLevel* msg);
};

const ::Proto::Card&
ResCardLevel::_Internal::newcard(const ResCardLevel* msg) {
  return *msg->newcard_;
}
void ResCardLevel::clear_newcard() {
  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
}
ResCardLevel::ResCardLevel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResCardLevel)
}
ResCardLevel::ResCardLevel(const ResCardLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_newcard()) {
    newcard_ = new ::Proto::Card(*from.newcard_);
  } else {
    newcard_ = nullptr;
  }
  ::memcpy(&rescode_, &from.rescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&detalfightpower_) -
    reinterpret_cast<char*>(&rescode_)) + sizeof(detalfightpower_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResCardLevel)
}

void ResCardLevel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResCardLevel_msg_2eproto.base);
  ::memset(&newcard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&newcard_)) + sizeof(detalfightpower_));
}

ResCardLevel::~ResCardLevel() {
  // @@protoc_insertion_point(destructor:Proto.ResCardLevel)
  SharedDtor();
}

void ResCardLevel::SharedDtor() {
  if (this != internal_default_instance()) delete newcard_;
}

void ResCardLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCardLevel& ResCardLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCardLevel_msg_2eproto.base);
  return *internal_default_instance();
}


void ResCardLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResCardLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
  ::memset(&rescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&rescode_)) + sizeof(detalfightpower_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResCardLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.ResCardLevel.ResCode rescode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rescode(static_cast<::Proto::ResCardLevel_ResCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 isOneKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isonekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Card newcard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_newcard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detalfightpower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          detalfightpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResCardLevel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResCardLevel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.ResCardLevel.ResCode rescode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rescode(static_cast< ::Proto::ResCardLevel_ResCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 isOneKey = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonekey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Card newcard = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_newcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detalfightpower = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detalfightpower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResCardLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResCardLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResCardLevel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResCardLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResCardLevel.ResCode rescode = 1;
  if (this->rescode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->rescode(), output);
  }

  // int32 isOneKey = 2;
  if (this->isonekey() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->isonekey(), output);
  }

  // .Proto.Card newcard = 3;
  if (this->has_newcard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::newcard(this), output);
  }

  // int32 detalfightpower = 4;
  if (this->detalfightpower() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->detalfightpower(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResCardLevel)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCardLevel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResCardLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResCardLevel.ResCode rescode = 1;
  if (this->rescode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->rescode(), target);
  }

  // int32 isOneKey = 2;
  if (this->isonekey() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->isonekey(), target);
  }

  // .Proto.Card newcard = 3;
  if (this->has_newcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::newcard(this), target);
  }

  // int32 detalfightpower = 4;
  if (this->detalfightpower() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->detalfightpower(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResCardLevel)
  return target;
}

size_t ResCardLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResCardLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Card newcard = 3;
  if (this->has_newcard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newcard_);
  }

  // .Proto.ResCardLevel.ResCode rescode = 1;
  if (this->rescode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rescode());
  }

  // int32 isOneKey = 2;
  if (this->isonekey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->isonekey());
  }

  // int32 detalfightpower = 4;
  if (this->detalfightpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detalfightpower());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCardLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResCardLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCardLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCardLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResCardLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResCardLevel)
    MergeFrom(*source);
  }
}

void ResCardLevel::MergeFrom(const ResCardLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResCardLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_newcard()) {
    mutable_newcard()->::Proto::Card::MergeFrom(from.newcard());
  }
  if (from.rescode() != 0) {
    set_rescode(from.rescode());
  }
  if (from.isonekey() != 0) {
    set_isonekey(from.isonekey());
  }
  if (from.detalfightpower() != 0) {
    set_detalfightpower(from.detalfightpower());
  }
}

void ResCardLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResCardLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCardLevel::CopyFrom(const ResCardLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResCardLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCardLevel::IsInitialized() const {
  return true;
}

void ResCardLevel::InternalSwap(ResCardLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(newcard_, other->newcard_);
  swap(rescode_, other->rescode_);
  swap(isonekey_, other->isonekey_);
  swap(detalfightpower_, other->detalfightpower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCardLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCardStar::InitAsDefaultInstance() {
  ::Proto::_ResCardStar_default_instance_._instance.get_mutable()->newcard_ = const_cast< ::Proto::Card*>(
      ::Proto::Card::internal_default_instance());
}
class ResCardStar::_Internal {
 public:
  static const ::Proto::Card& newcard(const ResCardStar* msg);
};

const ::Proto::Card&
ResCardStar::_Internal::newcard(const ResCardStar* msg) {
  return *msg->newcard_;
}
void ResCardStar::clear_newcard() {
  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
}
ResCardStar::ResCardStar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResCardStar)
}
ResCardStar::ResCardStar(const ResCardStar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_newcard()) {
    newcard_ = new ::Proto::Card(*from.newcard_);
  } else {
    newcard_ = nullptr;
  }
  ::memcpy(&starrescode_, &from.starrescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&detalfightpower_) -
    reinterpret_cast<char*>(&starrescode_)) + sizeof(detalfightpower_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResCardStar)
}

void ResCardStar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResCardStar_msg_2eproto.base);
  ::memset(&newcard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&newcard_)) + sizeof(detalfightpower_));
}

ResCardStar::~ResCardStar() {
  // @@protoc_insertion_point(destructor:Proto.ResCardStar)
  SharedDtor();
}

void ResCardStar::SharedDtor() {
  if (this != internal_default_instance()) delete newcard_;
}

void ResCardStar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCardStar& ResCardStar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCardStar_msg_2eproto.base);
  return *internal_default_instance();
}


void ResCardStar::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResCardStar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
  ::memset(&starrescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&starrescode_)) + sizeof(detalfightpower_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResCardStar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.ResCardStar.StarResCode starResCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_starrescode(static_cast<::Proto::ResCardStar_StarResCode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Card newcard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_newcard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detalfightpower = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          detalfightpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResCardStar::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResCardStar)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.ResCardStar.StarResCode starResCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_starrescode(static_cast< ::Proto::ResCardStar_StarResCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Card newcard = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_newcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detalfightpower = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detalfightpower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResCardStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResCardStar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResCardStar::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResCardStar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResCardStar.StarResCode starResCode = 1;
  if (this->starrescode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->starrescode(), output);
  }

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::newcard(this), output);
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->detalfightpower(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResCardStar)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCardStar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResCardStar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResCardStar.StarResCode starResCode = 1;
  if (this->starrescode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->starrescode(), target);
  }

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::newcard(this), target);
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->detalfightpower(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResCardStar)
  return target;
}

size_t ResCardStar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResCardStar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newcard_);
  }

  // .Proto.ResCardStar.StarResCode starResCode = 1;
  if (this->starrescode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->starrescode());
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detalfightpower());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCardStar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResCardStar)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCardStar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCardStar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResCardStar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResCardStar)
    MergeFrom(*source);
  }
}

void ResCardStar::MergeFrom(const ResCardStar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResCardStar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_newcard()) {
    mutable_newcard()->::Proto::Card::MergeFrom(from.newcard());
  }
  if (from.starrescode() != 0) {
    set_starrescode(from.starrescode());
  }
  if (from.detalfightpower() != 0) {
    set_detalfightpower(from.detalfightpower());
  }
}

void ResCardStar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResCardStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCardStar::CopyFrom(const ResCardStar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResCardStar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCardStar::IsInitialized() const {
  return true;
}

void ResCardStar::InternalSwap(ResCardStar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(newcard_, other->newcard_);
  swap(starrescode_, other->starrescode_);
  swap(detalfightpower_, other->detalfightpower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCardStar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCardQlt::InitAsDefaultInstance() {
  ::Proto::_ResCardQlt_default_instance_._instance.get_mutable()->newcard_ = const_cast< ::Proto::Card*>(
      ::Proto::Card::internal_default_instance());
}
class ResCardQlt::_Internal {
 public:
  static const ::Proto::Card& newcard(const ResCardQlt* msg);
};

const ::Proto::Card&
ResCardQlt::_Internal::newcard(const ResCardQlt* msg) {
  return *msg->newcard_;
}
void ResCardQlt::clear_newcard() {
  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
}
ResCardQlt::ResCardQlt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResCardQlt)
}
ResCardQlt::ResCardQlt(const ResCardQlt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_newcard()) {
    newcard_ = new ::Proto::Card(*from.newcard_);
  } else {
    newcard_ = nullptr;
  }
  ::memcpy(&qltrescode_, &from.qltrescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&detalfightpower_) -
    reinterpret_cast<char*>(&qltrescode_)) + sizeof(detalfightpower_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResCardQlt)
}

void ResCardQlt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResCardQlt_msg_2eproto.base);
  ::memset(&newcard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&newcard_)) + sizeof(detalfightpower_));
}

ResCardQlt::~ResCardQlt() {
  // @@protoc_insertion_point(destructor:Proto.ResCardQlt)
  SharedDtor();
}

void ResCardQlt::SharedDtor() {
  if (this != internal_default_instance()) delete newcard_;
}

void ResCardQlt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCardQlt& ResCardQlt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCardQlt_msg_2eproto.base);
  return *internal_default_instance();
}


void ResCardQlt::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResCardQlt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
  ::memset(&qltrescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&qltrescode_)) + sizeof(detalfightpower_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResCardQlt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_qltrescode(static_cast<::Proto::ResCardQlt_ResQltCode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Card newcard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_newcard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detalfightpower = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          detalfightpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResCardQlt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResCardQlt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_qltrescode(static_cast< ::Proto::ResCardQlt_ResQltCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Card newcard = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_newcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detalfightpower = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detalfightpower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResCardQlt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResCardQlt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResCardQlt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResCardQlt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
  if (this->qltrescode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->qltrescode(), output);
  }

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::newcard(this), output);
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->detalfightpower(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResCardQlt)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCardQlt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResCardQlt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
  if (this->qltrescode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->qltrescode(), target);
  }

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::newcard(this), target);
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->detalfightpower(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResCardQlt)
  return target;
}

size_t ResCardQlt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResCardQlt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newcard_);
  }

  // .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
  if (this->qltrescode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->qltrescode());
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detalfightpower());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCardQlt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResCardQlt)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCardQlt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCardQlt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResCardQlt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResCardQlt)
    MergeFrom(*source);
  }
}

void ResCardQlt::MergeFrom(const ResCardQlt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResCardQlt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_newcard()) {
    mutable_newcard()->::Proto::Card::MergeFrom(from.newcard());
  }
  if (from.qltrescode() != 0) {
    set_qltrescode(from.qltrescode());
  }
  if (from.detalfightpower() != 0) {
    set_detalfightpower(from.detalfightpower());
  }
}

void ResCardQlt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResCardQlt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCardQlt::CopyFrom(const ResCardQlt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResCardQlt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCardQlt::IsInitialized() const {
  return true;
}

void ResCardQlt::InternalSwap(ResCardQlt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(newcard_, other->newcard_);
  swap(qltrescode_, other->qltrescode_);
  swap(detalfightpower_, other->detalfightpower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCardQlt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResInten::InitAsDefaultInstance() {
  ::Proto::_ResInten_default_instance_._instance.get_mutable()->newcard_ = const_cast< ::Proto::Card*>(
      ::Proto::Card::internal_default_instance());
}
class ResInten::_Internal {
 public:
  static const ::Proto::Card& newcard(const ResInten* msg);
};

const ::Proto::Card&
ResInten::_Internal::newcard(const ResInten* msg) {
  return *msg->newcard_;
}
void ResInten::clear_newcard() {
  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
}
ResInten::ResInten()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResInten)
}
ResInten::ResInten(const ResInten& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_newcard()) {
    newcard_ = new ::Proto::Card(*from.newcard_);
  } else {
    newcard_ = nullptr;
  }
  ::memcpy(&myintenrescode_, &from.myintenrescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&detalfightpower_) -
    reinterpret_cast<char*>(&myintenrescode_)) + sizeof(detalfightpower_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResInten)
}

void ResInten::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResInten_msg_2eproto.base);
  ::memset(&newcard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&newcard_)) + sizeof(detalfightpower_));
}

ResInten::~ResInten() {
  // @@protoc_insertion_point(destructor:Proto.ResInten)
  SharedDtor();
}

void ResInten::SharedDtor() {
  if (this != internal_default_instance()) delete newcard_;
}

void ResInten::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResInten& ResInten::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResInten_msg_2eproto.base);
  return *internal_default_instance();
}


void ResInten::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResInten)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && newcard_ != nullptr) {
    delete newcard_;
  }
  newcard_ = nullptr;
  ::memset(&myintenrescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detalfightpower_) -
      reinterpret_cast<char*>(&myintenrescode_)) + sizeof(detalfightpower_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResInten::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_myintenrescode(static_cast<::Proto::ResInten_ResIntenCode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Card newcard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_newcard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 detalfightpower = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          detalfightpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResInten::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResInten)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_myintenrescode(static_cast< ::Proto::ResInten_ResIntenCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Card newcard = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_newcard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detalfightpower = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &detalfightpower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResInten)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResInten)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResInten::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResInten)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
  if (this->myintenrescode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->myintenrescode(), output);
  }

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::newcard(this), output);
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->detalfightpower(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResInten)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResInten::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResInten)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
  if (this->myintenrescode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->myintenrescode(), target);
  }

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::newcard(this), target);
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->detalfightpower(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResInten)
  return target;
}

size_t ResInten::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResInten)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Card newcard = 2;
  if (this->has_newcard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *newcard_);
  }

  // .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
  if (this->myintenrescode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->myintenrescode());
  }

  // int32 detalfightpower = 3;
  if (this->detalfightpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->detalfightpower());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResInten::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResInten)
  GOOGLE_DCHECK_NE(&from, this);
  const ResInten* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResInten>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResInten)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResInten)
    MergeFrom(*source);
  }
}

void ResInten::MergeFrom(const ResInten& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResInten)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_newcard()) {
    mutable_newcard()->::Proto::Card::MergeFrom(from.newcard());
  }
  if (from.myintenrescode() != 0) {
    set_myintenrescode(from.myintenrescode());
  }
  if (from.detalfightpower() != 0) {
    set_detalfightpower(from.detalfightpower());
  }
}

void ResInten::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResInten)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResInten::CopyFrom(const ResInten& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResInten)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResInten::IsInitialized() const {
  return true;
}

void ResInten::InternalSwap(ResInten* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(newcard_, other->newcard_);
  swap(myintenrescode_, other->myintenrescode_);
  swap(detalfightpower_, other->detalfightpower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResInten::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReuqestGMAddItem::InitAsDefaultInstance() {
}
class ReuqestGMAddItem::_Internal {
 public:
};

ReuqestGMAddItem::ReuqestGMAddItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReuqestGMAddItem)
}
ReuqestGMAddItem::ReuqestGMAddItem(const ReuqestGMAddItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:Proto.ReuqestGMAddItem)
}

void ReuqestGMAddItem::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

ReuqestGMAddItem::~ReuqestGMAddItem() {
  // @@protoc_insertion_point(destructor:Proto.ReuqestGMAddItem)
  SharedDtor();
}

void ReuqestGMAddItem::SharedDtor() {
}

void ReuqestGMAddItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReuqestGMAddItem& ReuqestGMAddItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReuqestGMAddItem_msg_2eproto.base);
  return *internal_default_instance();
}


void ReuqestGMAddItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReuqestGMAddItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReuqestGMAddItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReuqestGMAddItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReuqestGMAddItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReuqestGMAddItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReuqestGMAddItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReuqestGMAddItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReuqestGMAddItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReuqestGMAddItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReuqestGMAddItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReuqestGMAddItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReuqestGMAddItem)
  return target;
}

size_t ReuqestGMAddItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReuqestGMAddItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReuqestGMAddItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReuqestGMAddItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReuqestGMAddItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReuqestGMAddItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReuqestGMAddItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReuqestGMAddItem)
    MergeFrom(*source);
  }
}

void ReuqestGMAddItem::MergeFrom(const ReuqestGMAddItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReuqestGMAddItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void ReuqestGMAddItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReuqestGMAddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReuqestGMAddItem::CopyFrom(const ReuqestGMAddItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReuqestGMAddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReuqestGMAddItem::IsInitialized() const {
  return true;
}

void ReuqestGMAddItem::InternalSwap(ReuqestGMAddItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReuqestGMAddItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemChange::InitAsDefaultInstance() {
}
class ItemChange::_Internal {
 public:
};

ItemChange::ItemChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ItemChange)
}
ItemChange::ItemChange(const ItemChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&bagindex_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(bagindex_));
  // @@protoc_insertion_point(copy_constructor:Proto.ItemChange)
}

void ItemChange::SharedCtor() {
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bagindex_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(bagindex_));
}

ItemChange::~ItemChange() {
  // @@protoc_insertion_point(destructor:Proto.ItemChange)
  SharedDtor();
}

void ItemChange::SharedDtor() {
}

void ItemChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemChange& ItemChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemChange_msg_2eproto.base);
  return *internal_default_instance();
}


void ItemChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ItemChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bagindex_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(bagindex_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ItemChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bagIndex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ItemChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ItemChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bagIndex = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ItemChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ItemChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ItemChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ItemChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sn(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->delta(), output);
  }

  // int32 bagIndex = 11;
  if (this->bagindex() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->bagindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ItemChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ItemChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->sn(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->delta(), target);
  }

  // int32 bagIndex = 11;
  if (this->bagindex() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->bagindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ItemChange)
  return target;
}

size_t ItemChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ItemChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sn());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->delta());
  }

  // int32 bagIndex = 11;
  if (this->bagindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bagindex());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ItemChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ItemChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ItemChange)
    MergeFrom(*source);
  }
}

void ItemChange::MergeFrom(const ItemChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ItemChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
  if (from.bagindex() != 0) {
    set_bagindex(from.bagindex());
  }
}

void ItemChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ItemChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemChange::CopyFrom(const ItemChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ItemChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemChange::IsInitialized() const {
  return true;
}

void ItemChange::InternalSwap(ItemChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sn_, other->sn_);
  swap(id_, other->id_);
  swap(num_, other->num_);
  swap(delta_, other->delta_);
  swap(bagindex_, other->bagindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushItemChange_ChangeShow::InitAsDefaultInstance() {
}
class PushItemChange_ChangeShow::_Internal {
 public:
};

PushItemChange_ChangeShow::PushItemChange_ChangeShow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PushItemChange.ChangeShow)
}
PushItemChange_ChangeShow::PushItemChange_ChangeShow(const PushItemChange_ChangeShow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&replace_) -
    reinterpret_cast<char*>(&id_)) + sizeof(replace_));
  // @@protoc_insertion_point(copy_constructor:Proto.PushItemChange.ChangeShow)
}

void PushItemChange_ChangeShow::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replace_) -
      reinterpret_cast<char*>(&id_)) + sizeof(replace_));
}

PushItemChange_ChangeShow::~PushItemChange_ChangeShow() {
  // @@protoc_insertion_point(destructor:Proto.PushItemChange.ChangeShow)
  SharedDtor();
}

void PushItemChange_ChangeShow::SharedDtor() {
}

void PushItemChange_ChangeShow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushItemChange_ChangeShow& PushItemChange_ChangeShow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushItemChange_ChangeShow_msg_2eproto.base);
  return *internal_default_instance();
}


void PushItemChange_ChangeShow::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PushItemChange.ChangeShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replace_) -
      reinterpret_cast<char*>(&id_)) + sizeof(replace_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushItemChange_ChangeShow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 replace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          replace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushItemChange_ChangeShow::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PushItemChange.ChangeShow)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delta = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replace = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &replace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PushItemChange.ChangeShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PushItemChange.ChangeShow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushItemChange_ChangeShow::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PushItemChange.ChangeShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 delta = 2;
  if (this->delta() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }

  // int32 replace = 3;
  if (this->replace() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->replace(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PushItemChange.ChangeShow)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushItemChange_ChangeShow::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PushItemChange.ChangeShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 delta = 2;
  if (this->delta() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }

  // int32 replace = 3;
  if (this->replace() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->replace(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PushItemChange.ChangeShow)
  return target;
}

size_t PushItemChange_ChangeShow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PushItemChange.ChangeShow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 delta = 2;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->delta());
  }

  // int32 replace = 3;
  if (this->replace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->replace());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushItemChange_ChangeShow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PushItemChange.ChangeShow)
  GOOGLE_DCHECK_NE(&from, this);
  const PushItemChange_ChangeShow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushItemChange_ChangeShow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PushItemChange.ChangeShow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PushItemChange.ChangeShow)
    MergeFrom(*source);
  }
}

void PushItemChange_ChangeShow::MergeFrom(const PushItemChange_ChangeShow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PushItemChange.ChangeShow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
  if (from.replace() != 0) {
    set_replace(from.replace());
  }
}

void PushItemChange_ChangeShow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PushItemChange.ChangeShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushItemChange_ChangeShow::CopyFrom(const PushItemChange_ChangeShow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PushItemChange.ChangeShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushItemChange_ChangeShow::IsInitialized() const {
  return true;
}

void PushItemChange_ChangeShow::InternalSwap(PushItemChange_ChangeShow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(delta_, other->delta_);
  swap(replace_, other->replace_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushItemChange_ChangeShow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushItemChange::InitAsDefaultInstance() {
}
class PushItemChange::_Internal {
 public:
};

PushItemChange::PushItemChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PushItemChange)
}
PushItemChange::PushItemChange(const PushItemChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      changes_(from.changes_),
      show_(from.show_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:Proto.PushItemChange)
}

void PushItemChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushItemChange_msg_2eproto.base);
  source_ = 0;
}

PushItemChange::~PushItemChange() {
  // @@protoc_insertion_point(destructor:Proto.PushItemChange)
  SharedDtor();
}

void PushItemChange::SharedDtor() {
}

void PushItemChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushItemChange& PushItemChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushItemChange_msg_2eproto.base);
  return *internal_default_instance();
}


void PushItemChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PushItemChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  show_.Clear();
  source_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushItemChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.ItemChange changes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // int32 source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.PushItemChange.ChangeShow show = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_show(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushItemChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PushItemChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.ItemChange changes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.PushItemChange.ChangeShow show = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_show()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PushItemChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PushItemChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushItemChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PushItemChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.ItemChange changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->changes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->changes(static_cast<int>(i)),
      output);
  }

  // int32 source = 2;
  if (this->source() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source(), output);
  }

  // repeated .Proto.PushItemChange.ChangeShow show = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->show_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->show(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.PushItemChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* PushItemChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PushItemChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.ItemChange changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->changes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->changes(static_cast<int>(i)), target);
  }

  // int32 source = 2;
  if (this->source() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source(), target);
  }

  // repeated .Proto.PushItemChange.ChangeShow show = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->show_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->show(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.PushItemChange)
  return target;
}

size_t PushItemChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PushItemChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.ItemChange changes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->changes(static_cast<int>(i)));
    }
  }

  // repeated .Proto.PushItemChange.ChangeShow show = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->show_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->show(static_cast<int>(i)));
    }
  }

  // int32 source = 2;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->source());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushItemChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PushItemChange)
  GOOGLE_DCHECK_NE(&from, this);
  const PushItemChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushItemChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PushItemChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PushItemChange)
    MergeFrom(*source);
  }
}

void PushItemChange::MergeFrom(const PushItemChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PushItemChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
  show_.MergeFrom(from.show_);
  if (from.source() != 0) {
    set_source(from.source());
  }
}

void PushItemChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PushItemChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushItemChange::CopyFrom(const PushItemChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PushItemChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushItemChange::IsInitialized() const {
  return true;
}

void PushItemChange::InternalSwap(PushItemChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&changes_)->InternalSwap(CastToBase(&other->changes_));
  CastToBase(&show_)->InternalSwap(CastToBase(&other->show_));
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushItemChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestUseItem::InitAsDefaultInstance() {
}
class RequestUseItem::_Internal {
 public:
};

RequestUseItem::RequestUseItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestUseItem)
}
RequestUseItem::RequestUseItem(const RequestUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:Proto.RequestUseItem)
}

void RequestUseItem::SharedCtor() {
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(num_));
}

RequestUseItem::~RequestUseItem() {
  // @@protoc_insertion_point(destructor:Proto.RequestUseItem)
  SharedDtor();
}

void RequestUseItem::SharedDtor() {
}

void RequestUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestUseItem& RequestUseItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestUseItem_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestUseItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestUseItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestUseItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestUseItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->sn(), output);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestUseItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestUseItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->sn(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestUseItem)
  return target;
}

size_t RequestUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestUseItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sn());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestUseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestUseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestUseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestUseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestUseItem)
    MergeFrom(*source);
  }
}

void RequestUseItem::MergeFrom(const RequestUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void RequestUseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUseItem::CopyFrom(const RequestUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUseItem::IsInitialized() const {
  return true;
}

void RequestUseItem::InternalSwap(RequestUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sn_, other->sn_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestUseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseUseItem::InitAsDefaultInstance() {
}
class ResponseUseItem::_Internal {
 public:
};

ResponseUseItem::ResponseUseItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResponseUseItem)
}
ResponseUseItem::ResponseUseItem(const ResponseUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.ResponseUseItem)
}

void ResponseUseItem::SharedCtor() {
}

ResponseUseItem::~ResponseUseItem() {
  // @@protoc_insertion_point(destructor:Proto.ResponseUseItem)
  SharedDtor();
}

void ResponseUseItem::SharedDtor() {
}

void ResponseUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseUseItem& ResponseUseItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseUseItem_msg_2eproto.base);
  return *internal_default_instance();
}


void ResponseUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResponseUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseUseItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResponseUseItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResponseUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResponseUseItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseUseItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResponseUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResponseUseItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseUseItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResponseUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResponseUseItem)
  return target;
}

size_t ResponseUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResponseUseItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseUseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResponseUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseUseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseUseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResponseUseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResponseUseItem)
    MergeFrom(*source);
  }
}

void ResponseUseItem::MergeFrom(const ResponseUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResponseUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseUseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResponseUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUseItem::CopyFrom(const ResponseUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResponseUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUseItem::IsInitialized() const {
  return true;
}

void ResponseUseItem::InternalSwap(ResponseUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseUseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestSortBag::InitAsDefaultInstance() {
}
class RequestSortBag::_Internal {
 public:
};

RequestSortBag::RequestSortBag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestSortBag)
}
RequestSortBag::RequestSortBag(const RequestSortBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.RequestSortBag)
}

void RequestSortBag::SharedCtor() {
}

RequestSortBag::~RequestSortBag() {
  // @@protoc_insertion_point(destructor:Proto.RequestSortBag)
  SharedDtor();
}

void RequestSortBag::SharedDtor() {
}

void RequestSortBag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSortBag& RequestSortBag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestSortBag_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestSortBag::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestSortBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestSortBag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestSortBag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestSortBag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestSortBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestSortBag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestSortBag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestSortBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestSortBag)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSortBag::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestSortBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestSortBag)
  return target;
}

size_t RequestSortBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestSortBag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSortBag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestSortBag)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSortBag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSortBag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestSortBag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestSortBag)
    MergeFrom(*source);
  }
}

void RequestSortBag::MergeFrom(const RequestSortBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestSortBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestSortBag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestSortBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSortBag::CopyFrom(const RequestSortBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestSortBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSortBag::IsInitialized() const {
  return true;
}

void RequestSortBag::InternalSwap(RequestSortBag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSortBag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseSortBag::InitAsDefaultInstance() {
}
class ResponseSortBag::_Internal {
 public:
};

void ResponseSortBag::clear_items() {
  items_.Clear();
}
ResponseSortBag::ResponseSortBag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResponseSortBag)
}
ResponseSortBag::ResponseSortBag(const ResponseSortBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bags_(from.bags_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.ResponseSortBag)
}

void ResponseSortBag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseSortBag_msg_2eproto.base);
}

ResponseSortBag::~ResponseSortBag() {
  // @@protoc_insertion_point(destructor:Proto.ResponseSortBag)
  SharedDtor();
}

void ResponseSortBag::SharedDtor() {
}

void ResponseSortBag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseSortBag& ResponseSortBag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseSortBag_msg_2eproto.base);
  return *internal_default_instance();
}


void ResponseSortBag::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResponseSortBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bags_.Clear();
  items_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseSortBag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 bags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_bags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_bags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseSortBag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResponseSortBag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 bags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bags())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_bags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.Item items = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResponseSortBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResponseSortBag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseSortBag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResponseSortBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 bags = 1;
  if (this->bags_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bags_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->bags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->bags(i), output);
  }

  // repeated .Proto.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResponseSortBag)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseSortBag::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResponseSortBag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 bags = 1;
  if (this->bags_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bags_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->bags_, target);
  }

  // repeated .Proto.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResponseSortBag)
  return target;
}

size_t ResponseSortBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResponseSortBag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bags = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bags_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Proto.Item items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSortBag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResponseSortBag)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSortBag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseSortBag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResponseSortBag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResponseSortBag)
    MergeFrom(*source);
  }
}

void ResponseSortBag::MergeFrom(const ResponseSortBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResponseSortBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bags_.MergeFrom(from.bags_);
  items_.MergeFrom(from.items_);
}

void ResponseSortBag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResponseSortBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSortBag::CopyFrom(const ResponseSortBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResponseSortBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSortBag::IsInitialized() const {
  return true;
}

void ResponseSortBag::InternalSwap(ResponseSortBag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bags_.InternalSwap(&other->bags_);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSortBag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestSellItem::InitAsDefaultInstance() {
}
class RequestSellItem::_Internal {
 public:
};

RequestSellItem::RequestSellItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestSellItem)
}
RequestSellItem::RequestSellItem(const RequestSellItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:Proto.RequestSellItem)
}

void RequestSellItem::SharedCtor() {
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(num_));
}

RequestSellItem::~RequestSellItem() {
  // @@protoc_insertion_point(destructor:Proto.RequestSellItem)
  SharedDtor();
}

void RequestSellItem::SharedDtor() {
}

void RequestSellItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSellItem& RequestSellItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestSellItem_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestSellItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestSellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestSellItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestSellItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestSellItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestSellItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestSellItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestSellItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestSellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->sn(), output);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestSellItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSellItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestSellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->sn(), target);
  }

  // int32 num = 2;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestSellItem)
  return target;
}

size_t RequestSellItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestSellItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sn());
  }

  // int32 num = 2;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSellItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestSellItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSellItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSellItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestSellItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestSellItem)
    MergeFrom(*source);
  }
}

void RequestSellItem::MergeFrom(const RequestSellItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestSellItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    set_sn(from.sn());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void RequestSellItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestSellItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSellItem::CopyFrom(const RequestSellItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestSellItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSellItem::IsInitialized() const {
  return true;
}

void RequestSellItem::InternalSwap(RequestSellItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sn_, other->sn_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSellItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseSellItem::InitAsDefaultInstance() {
}
class ResponseSellItem::_Internal {
 public:
};

ResponseSellItem::ResponseSellItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResponseSellItem)
}
ResponseSellItem::ResponseSellItem(const ResponseSellItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.ResponseSellItem)
}

void ResponseSellItem::SharedCtor() {
}

ResponseSellItem::~ResponseSellItem() {
  // @@protoc_insertion_point(destructor:Proto.ResponseSellItem)
  SharedDtor();
}

void ResponseSellItem::SharedDtor() {
}

void ResponseSellItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseSellItem& ResponseSellItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseSellItem_msg_2eproto.base);
  return *internal_default_instance();
}


void ResponseSellItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResponseSellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseSellItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseSellItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResponseSellItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResponseSellItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResponseSellItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseSellItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResponseSellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResponseSellItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseSellItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResponseSellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResponseSellItem)
  return target;
}

size_t ResponseSellItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResponseSellItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSellItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResponseSellItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSellItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseSellItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResponseSellItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResponseSellItem)
    MergeFrom(*source);
  }
}

void ResponseSellItem::MergeFrom(const ResponseSellItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResponseSellItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseSellItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResponseSellItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSellItem::CopyFrom(const ResponseSellItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResponseSellItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSellItem::IsInitialized() const {
  return true;
}

void ResponseSellItem::InternalSwap(ResponseSellItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSellItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestGachaPull::InitAsDefaultInstance() {
}
class RequestGachaPull::_Internal {
 public:
};

RequestGachaPull::RequestGachaPull()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.RequestGachaPull)
}
RequestGachaPull::RequestGachaPull(const RequestGachaPull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poolid_, &from.poolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&costtype_) -
    reinterpret_cast<char*>(&poolid_)) + sizeof(costtype_));
  // @@protoc_insertion_point(copy_constructor:Proto.RequestGachaPull)
}

void RequestGachaPull::SharedCtor() {
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costtype_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(costtype_));
}

RequestGachaPull::~RequestGachaPull() {
  // @@protoc_insertion_point(destructor:Proto.RequestGachaPull)
  SharedDtor();
}

void RequestGachaPull::SharedDtor() {
}

void RequestGachaPull::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestGachaPull& RequestGachaPull::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestGachaPull_msg_2eproto.base);
  return *internal_default_instance();
}


void RequestGachaPull::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.RequestGachaPull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costtype_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(costtype_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestGachaPull::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 poolId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool single = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          single_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 costType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          costtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestGachaPull::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.RequestGachaPull)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 poolId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool single = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 costType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.RequestGachaPull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.RequestGachaPull)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestGachaPull::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.RequestGachaPull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 poolId = 1;
  if (this->poolid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->poolid(), output);
  }

  // bool single = 2;
  if (this->single() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->single(), output);
  }

  // uint32 costType = 3;
  if (this->costtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->costtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.RequestGachaPull)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGachaPull::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.RequestGachaPull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 poolId = 1;
  if (this->poolid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->poolid(), target);
  }

  // bool single = 2;
  if (this->single() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->single(), target);
  }

  // uint32 costType = 3;
  if (this->costtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->costtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.RequestGachaPull)
  return target;
}

size_t RequestGachaPull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.RequestGachaPull)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 poolId = 1;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->poolid());
  }

  // bool single = 2;
  if (this->single() != 0) {
    total_size += 1 + 1;
  }

  // uint32 costType = 3;
  if (this->costtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->costtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGachaPull::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.RequestGachaPull)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGachaPull* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGachaPull>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.RequestGachaPull)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.RequestGachaPull)
    MergeFrom(*source);
  }
}

void RequestGachaPull::MergeFrom(const RequestGachaPull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.RequestGachaPull)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.poolid() != 0) {
    set_poolid(from.poolid());
  }
  if (from.single() != 0) {
    set_single(from.single());
  }
  if (from.costtype() != 0) {
    set_costtype(from.costtype());
  }
}

void RequestGachaPull::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.RequestGachaPull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGachaPull::CopyFrom(const RequestGachaPull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.RequestGachaPull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGachaPull::IsInitialized() const {
  return true;
}

void RequestGachaPull::InternalSwap(RequestGachaPull* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(poolid_, other->poolid_);
  swap(single_, other->single_);
  swap(costtype_, other->costtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGachaPull::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseGachaPull::InitAsDefaultInstance() {
}
class ResponseGachaPull::_Internal {
 public:
};

ResponseGachaPull::ResponseGachaPull()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResponseGachaPull)
}
ResponseGachaPull::ResponseGachaPull(const ResponseGachaPull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poolid_, &from.poolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&poolid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResponseGachaPull)
}

void ResponseGachaPull::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseGachaPull_msg_2eproto.base);
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(count_));
}

ResponseGachaPull::~ResponseGachaPull() {
  // @@protoc_insertion_point(destructor:Proto.ResponseGachaPull)
  SharedDtor();
}

void ResponseGachaPull::SharedDtor() {
}

void ResponseGachaPull::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseGachaPull& ResponseGachaPull::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseGachaPull_msg_2eproto.base);
  return *internal_default_instance();
}


void ResponseGachaPull::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResponseGachaPull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseGachaPull::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.PushItemChange.ChangeShow items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // int32 poolId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseGachaPull::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResponseGachaPull)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.PushItemChange.ChangeShow items = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 poolId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResponseGachaPull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResponseGachaPull)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseGachaPull::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResponseGachaPull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.PushItemChange.ChangeShow items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  // int32 poolId = 2;
  if (this->poolid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->poolid(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResponseGachaPull)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseGachaPull::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResponseGachaPull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.PushItemChange.ChangeShow items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), target);
  }

  // int32 poolId = 2;
  if (this->poolid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->poolid(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResponseGachaPull)
  return target;
}

size_t ResponseGachaPull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResponseGachaPull)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.PushItemChange.ChangeShow items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // int32 poolId = 2;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->poolid());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseGachaPull::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResponseGachaPull)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseGachaPull* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseGachaPull>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResponseGachaPull)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResponseGachaPull)
    MergeFrom(*source);
  }
}

void ResponseGachaPull::MergeFrom(const ResponseGachaPull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResponseGachaPull)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.poolid() != 0) {
    set_poolid(from.poolid());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ResponseGachaPull::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResponseGachaPull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGachaPull::CopyFrom(const ResponseGachaPull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResponseGachaPull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGachaPull::IsInitialized() const {
  return true;
}

void ResponseGachaPull::InternalSwap(ResponseGachaPull* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(poolid_, other->poolid_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseGachaPull::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBQueryPlayer::InitAsDefaultInstance() {
}
class DBQueryPlayer::_Internal {
 public:
};

DBQueryPlayer::DBQueryPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBQueryPlayer)
}
DBQueryPlayer::DBQueryPlayer(const DBQueryPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBQueryPlayer)
}

void DBQueryPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBQueryPlayer_msg_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
}

DBQueryPlayer::~DBQueryPlayer() {
  // @@protoc_insertion_point(destructor:Proto.DBQueryPlayer)
  SharedDtor();
}

void DBQueryPlayer::SharedDtor() {
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBQueryPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBQueryPlayer& DBQueryPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBQueryPlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void DBQueryPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBQueryPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBQueryPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Proto.DBQueryPlayer.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "Proto.DBQueryPlayer.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBQueryPlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBQueryPlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.DBQueryPlayer.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.DBQueryPlayer.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBQueryPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBQueryPlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBQueryPlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBQueryPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBQueryPlayer.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBQueryPlayer.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBQueryPlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBQueryPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBQueryPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBQueryPlayer.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBQueryPlayer.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBQueryPlayer)
  return target;
}

size_t DBQueryPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBQueryPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBQueryPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBQueryPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const DBQueryPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBQueryPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBQueryPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBQueryPlayer)
    MergeFrom(*source);
  }
}

void DBQueryPlayer::MergeFrom(const DBQueryPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBQueryPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void DBQueryPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBQueryPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBQueryPlayer::CopyFrom(const DBQueryPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBQueryPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBQueryPlayer::IsInitialized() const {
  return true;
}

void DBQueryPlayer::InternalSwap(DBQueryPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBQueryPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBQueryPlayerRet::InitAsDefaultInstance() {
  ::Proto::_DBQueryPlayerRet_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class DBQueryPlayerRet::_Internal {
 public:
  static const ::Proto::Player& player(const DBQueryPlayerRet* msg);
};

const ::Proto::Player&
DBQueryPlayerRet::_Internal::player(const DBQueryPlayerRet* msg) {
  return *msg->player_;
}
void DBQueryPlayerRet::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
DBQueryPlayerRet::DBQueryPlayerRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBQueryPlayerRet)
}
DBQueryPlayerRet::DBQueryPlayerRet(const DBQueryPlayerRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBQueryPlayerRet)
}

void DBQueryPlayerRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBQueryPlayerRet_msg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ret_));
}

DBQueryPlayerRet::~DBQueryPlayerRet() {
  // @@protoc_insertion_point(destructor:Proto.DBQueryPlayerRet)
  SharedDtor();
}

void DBQueryPlayerRet::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void DBQueryPlayerRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBQueryPlayerRet& DBQueryPlayerRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBQueryPlayerRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DBQueryPlayerRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBQueryPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBQueryPlayerRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBQueryPlayerRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBQueryPlayerRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBQueryPlayerRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBQueryPlayerRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBQueryPlayerRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBQueryPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBQueryPlayerRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBQueryPlayerRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBQueryPlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBQueryPlayerRet)
  return target;
}

size_t DBQueryPlayerRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBQueryPlayerRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBQueryPlayerRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBQueryPlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DBQueryPlayerRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBQueryPlayerRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBQueryPlayerRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBQueryPlayerRet)
    MergeFrom(*source);
  }
}

void DBQueryPlayerRet::MergeFrom(const DBQueryPlayerRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBQueryPlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DBQueryPlayerRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBQueryPlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBQueryPlayerRet::CopyFrom(const DBQueryPlayerRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBQueryPlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBQueryPlayerRet::IsInitialized() const {
  return true;
}

void DBQueryPlayerRet::InternalSwap(DBQueryPlayerRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBQueryPlayerRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBCreatePlayer::InitAsDefaultInstance() {
  ::Proto::_DBCreatePlayer_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class DBCreatePlayer::_Internal {
 public:
  static const ::Proto::Player& player(const DBCreatePlayer* msg);
};

const ::Proto::Player&
DBCreatePlayer::_Internal::player(const DBCreatePlayer* msg) {
  return *msg->player_;
}
void DBCreatePlayer::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
DBCreatePlayer::DBCreatePlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBCreatePlayer)
}
DBCreatePlayer::DBCreatePlayer(const DBCreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.channel().empty()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBCreatePlayer)
}

void DBCreatePlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBCreatePlayer_msg_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(server_id_));
}

DBCreatePlayer::~DBCreatePlayer() {
  // @@protoc_insertion_point(destructor:Proto.DBCreatePlayer)
  SharedDtor();
}

void DBCreatePlayer::SharedDtor() {
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void DBCreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBCreatePlayer& DBCreatePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBCreatePlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void DBCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBCreatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  server_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBCreatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_channel(), ptr, ctx, "Proto.DBCreatePlayer.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uuid(), ptr, ctx, "Proto.DBCreatePlayer.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBCreatePlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBCreatePlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.DBCreatePlayer.channel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "Proto.DBCreatePlayer.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBCreatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBCreatePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBCreatePlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBCreatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBCreatePlayer.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBCreatePlayer.uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // .Proto.Player player = 4;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBCreatePlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBCreatePlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBCreatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBCreatePlayer.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.DBCreatePlayer.uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // .Proto.Player player = 4;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBCreatePlayer)
  return target;
}

size_t DBCreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBCreatePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->channel());
  }

  // string uuid = 3;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .Proto.Player player = 4;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBCreatePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBCreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCreatePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBCreatePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBCreatePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBCreatePlayer)
    MergeFrom(*source);
  }
}

void DBCreatePlayer::MergeFrom(const DBCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBCreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {

    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
}

void DBCreatePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCreatePlayer::CopyFrom(const DBCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCreatePlayer::IsInitialized() const {
  return true;
}

void DBCreatePlayer::InternalSwap(DBCreatePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCreatePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBCreatePlayerRet::InitAsDefaultInstance() {
  ::Proto::_DBCreatePlayerRet_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class DBCreatePlayerRet::_Internal {
 public:
  static const ::Proto::Player& player(const DBCreatePlayerRet* msg);
};

const ::Proto::Player&
DBCreatePlayerRet::_Internal::player(const DBCreatePlayerRet* msg) {
  return *msg->player_;
}
void DBCreatePlayerRet::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
DBCreatePlayerRet::DBCreatePlayerRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBCreatePlayerRet)
}
DBCreatePlayerRet::DBCreatePlayerRet(const DBCreatePlayerRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBCreatePlayerRet)
}

void DBCreatePlayerRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBCreatePlayerRet_msg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&player_)) + sizeof(ret_));
}

DBCreatePlayerRet::~DBCreatePlayerRet() {
  // @@protoc_insertion_point(destructor:Proto.DBCreatePlayerRet)
  SharedDtor();
}

void DBCreatePlayerRet::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void DBCreatePlayerRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBCreatePlayerRet& DBCreatePlayerRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBCreatePlayerRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DBCreatePlayerRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBCreatePlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBCreatePlayerRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBCreatePlayerRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBCreatePlayerRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBCreatePlayerRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBCreatePlayerRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBCreatePlayerRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBCreatePlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBCreatePlayerRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBCreatePlayerRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBCreatePlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBCreatePlayerRet)
  return target;
}

size_t DBCreatePlayerRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBCreatePlayerRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBCreatePlayerRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBCreatePlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCreatePlayerRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBCreatePlayerRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBCreatePlayerRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBCreatePlayerRet)
    MergeFrom(*source);
  }
}

void DBCreatePlayerRet::MergeFrom(const DBCreatePlayerRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBCreatePlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DBCreatePlayerRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBCreatePlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCreatePlayerRet::CopyFrom(const DBCreatePlayerRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBCreatePlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCreatePlayerRet::IsInitialized() const {
  return true;
}

void DBCreatePlayerRet::InternalSwap(DBCreatePlayerRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCreatePlayerRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSavePlayer::InitAsDefaultInstance() {
  ::Proto::_DBSavePlayer_default_instance_._instance.get_mutable()->player_ = const_cast< ::Proto::Player*>(
      ::Proto::Player::internal_default_instance());
}
class DBSavePlayer::_Internal {
 public:
  static const ::Proto::Player& player(const DBSavePlayer* msg);
};

const ::Proto::Player&
DBSavePlayer::_Internal::player(const DBSavePlayer* msg) {
  return *msg->player_;
}
void DBSavePlayer::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
DBSavePlayer::DBSavePlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBSavePlayer)
}
DBSavePlayer::DBSavePlayer(const DBSavePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::Proto::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  save_mode_ = from.save_mode_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBSavePlayer)
}

void DBSavePlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBSavePlayer_msg_2eproto.base);
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_mode_) -
      reinterpret_cast<char*>(&player_)) + sizeof(save_mode_));
}

DBSavePlayer::~DBSavePlayer() {
  // @@protoc_insertion_point(destructor:Proto.DBSavePlayer)
  SharedDtor();
}

void DBSavePlayer::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void DBSavePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSavePlayer& DBSavePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSavePlayer_msg_2eproto.base);
  return *internal_default_instance();
}


void DBSavePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBSavePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  save_mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBSavePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.ESaveMode save_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_save_mode(static_cast<::Proto::ESaveMode>(val));
        } else goto handle_unusual;
        continue;
      // .Proto.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBSavePlayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBSavePlayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.ESaveMode save_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_save_mode(static_cast< ::Proto::ESaveMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Player player = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBSavePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBSavePlayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBSavePlayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBSavePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ESaveMode save_mode = 1;
  if (this->save_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->save_mode(), output);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::player(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBSavePlayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSavePlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBSavePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.ESaveMode save_mode = 1;
  if (this->save_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->save_mode(), target);
  }

  // .Proto.Player player = 2;
  if (this->has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBSavePlayer)
  return target;
}

size_t DBSavePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBSavePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Proto.ESaveMode save_mode = 1;
  if (this->save_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->save_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSavePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBSavePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSavePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSavePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBSavePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBSavePlayer)
    MergeFrom(*source);
  }
}

void DBSavePlayer::MergeFrom(const DBSavePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBSavePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::Proto::Player::MergeFrom(from.player());
  }
  if (from.save_mode() != 0) {
    set_save_mode(from.save_mode());
  }
}

void DBSavePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBSavePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSavePlayer::CopyFrom(const DBSavePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBSavePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSavePlayer::IsInitialized() const {
  return true;
}

void DBSavePlayer::InternalSwap(DBSavePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_, other->player_);
  swap(save_mode_, other->save_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSavePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSavePlayerRet::InitAsDefaultInstance() {
}
class DBSavePlayerRet::_Internal {
 public:
};

DBSavePlayerRet::DBSavePlayerRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBSavePlayerRet)
}
DBSavePlayerRet::DBSavePlayerRet(const DBSavePlayerRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBSavePlayerRet)
}

void DBSavePlayerRet::SharedCtor() {
  ret_ = 0;
}

DBSavePlayerRet::~DBSavePlayerRet() {
  // @@protoc_insertion_point(destructor:Proto.DBSavePlayerRet)
  SharedDtor();
}

void DBSavePlayerRet::SharedDtor() {
}

void DBSavePlayerRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSavePlayerRet& DBSavePlayerRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSavePlayerRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DBSavePlayerRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBSavePlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBSavePlayerRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBSavePlayerRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBSavePlayerRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBSavePlayerRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBSavePlayerRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBSavePlayerRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBSavePlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBSavePlayerRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSavePlayerRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBSavePlayerRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBSavePlayerRet)
  return target;
}

size_t DBSavePlayerRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBSavePlayerRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSavePlayerRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBSavePlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSavePlayerRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSavePlayerRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBSavePlayerRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBSavePlayerRet)
    MergeFrom(*source);
  }
}

void DBSavePlayerRet::MergeFrom(const DBSavePlayerRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBSavePlayerRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DBSavePlayerRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBSavePlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSavePlayerRet::CopyFrom(const DBSavePlayerRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBSavePlayerRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSavePlayerRet::IsInitialized() const {
  return true;
}

void DBSavePlayerRet::InternalSwap(DBSavePlayerRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSavePlayerRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSaveList::InitAsDefaultInstance() {
}
class DBSaveList::_Internal {
 public:
};

DBSaveList::DBSaveList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBSaveList)
}
DBSaveList::DBSaveList(const DBSaveList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.DBSaveList)
}

void DBSaveList::SharedCtor() {
}

DBSaveList::~DBSaveList() {
  // @@protoc_insertion_point(destructor:Proto.DBSaveList)
  SharedDtor();
}

void DBSaveList::SharedDtor() {
}

void DBSaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSaveList& DBSaveList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSaveList_msg_2eproto.base);
  return *internal_default_instance();
}


void DBSaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBSaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBSaveList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBSaveList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBSaveList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBSaveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBSaveList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBSaveList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBSaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBSaveList)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSaveList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBSaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBSaveList)
  return target;
}

size_t DBSaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBSaveList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSaveList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBSaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSaveList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSaveList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBSaveList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBSaveList)
    MergeFrom(*source);
  }
}

void DBSaveList::MergeFrom(const DBSaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBSaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DBSaveList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBSaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSaveList::CopyFrom(const DBSaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBSaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSaveList::IsInitialized() const {
  return true;
}

void DBSaveList::InternalSwap(DBSaveList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSaveList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSaveListRet::InitAsDefaultInstance() {
}
class DBSaveListRet::_Internal {
 public:
};

void DBSaveListRet::clear_player_list() {
  player_list_.Clear();
}
DBSaveListRet::DBSaveListRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBSaveListRet)
}
DBSaveListRet::DBSaveListRet(const DBSaveListRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      player_list_(from.player_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBSaveListRet)
}

void DBSaveListRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBSaveListRet_msg_2eproto.base);
  ret_ = 0;
}

DBSaveListRet::~DBSaveListRet() {
  // @@protoc_insertion_point(destructor:Proto.DBSaveListRet)
  SharedDtor();
}

void DBSaveListRet::SharedDtor() {
}

void DBSaveListRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSaveListRet& DBSaveListRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSaveListRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DBSaveListRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBSaveListRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBSaveListRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.Player player_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_player_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBSaveListRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBSaveListRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.Player player_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBSaveListRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBSaveListRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBSaveListRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBSaveListRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .Proto.Player player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->player_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBSaveListRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSaveListRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBSaveListRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .Proto.Player player_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->player_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBSaveListRet)
  return target;
}

size_t DBSaveListRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBSaveListRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.Player player_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->player_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->player_list(static_cast<int>(i)));
    }
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSaveListRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBSaveListRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSaveListRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSaveListRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBSaveListRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBSaveListRet)
    MergeFrom(*source);
  }
}

void DBSaveListRet::MergeFrom(const DBSaveListRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBSaveListRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DBSaveListRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBSaveListRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSaveListRet::CopyFrom(const DBSaveListRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBSaveListRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSaveListRet::IsInitialized() const {
  return true;
}

void DBSaveListRet::InternalSwap(DBSaveListRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&player_list_)->InternalSwap(CastToBase(&other->player_list_));
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSaveListRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSaveWorld::InitAsDefaultInstance() {
  ::Proto::_DBSaveWorld_default_instance_._instance.get_mutable()->data_ = const_cast< ::Proto::DBWorldData*>(
      ::Proto::DBWorldData::internal_default_instance());
}
class DBSaveWorld::_Internal {
 public:
  static const ::Proto::DBWorldData& data(const DBSaveWorld* msg);
};

const ::Proto::DBWorldData&
DBSaveWorld::_Internal::data(const DBSaveWorld* msg) {
  return *msg->data_;
}
void DBSaveWorld::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
DBSaveWorld::DBSaveWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBSaveWorld)
}
DBSaveWorld::DBSaveWorld(const DBSaveWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::Proto::DBWorldData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.DBSaveWorld)
}

void DBSaveWorld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBSaveWorld_msg_2eproto.base);
  data_ = nullptr;
}

DBSaveWorld::~DBSaveWorld() {
  // @@protoc_insertion_point(destructor:Proto.DBSaveWorld)
  SharedDtor();
}

void DBSaveWorld::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void DBSaveWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSaveWorld& DBSaveWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSaveWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void DBSaveWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBSaveWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBSaveWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.DBWorldData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBSaveWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBSaveWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.DBWorldData data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBSaveWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBSaveWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBSaveWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBSaveWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.DBWorldData data = 1;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBSaveWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSaveWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBSaveWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.DBWorldData data = 1;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBSaveWorld)
  return target;
}

size_t DBSaveWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBSaveWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.DBWorldData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSaveWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBSaveWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSaveWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSaveWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBSaveWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBSaveWorld)
    MergeFrom(*source);
  }
}

void DBSaveWorld::MergeFrom(const DBSaveWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBSaveWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::Proto::DBWorldData::MergeFrom(from.data());
  }
}

void DBSaveWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBSaveWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSaveWorld::CopyFrom(const DBSaveWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBSaveWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSaveWorld::IsInitialized() const {
  return true;
}

void DBSaveWorld::InternalSwap(DBSaveWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSaveWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSaveWorldRet::InitAsDefaultInstance() {
}
class DBSaveWorldRet::_Internal {
 public:
};

DBSaveWorldRet::DBSaveWorldRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBSaveWorldRet)
}
DBSaveWorldRet::DBSaveWorldRet(const DBSaveWorldRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBSaveWorldRet)
}

void DBSaveWorldRet::SharedCtor() {
  ret_ = 0;
}

DBSaveWorldRet::~DBSaveWorldRet() {
  // @@protoc_insertion_point(destructor:Proto.DBSaveWorldRet)
  SharedDtor();
}

void DBSaveWorldRet::SharedDtor() {
}

void DBSaveWorldRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSaveWorldRet& DBSaveWorldRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSaveWorldRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DBSaveWorldRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBSaveWorldRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBSaveWorldRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBSaveWorldRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBSaveWorldRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBSaveWorldRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBSaveWorldRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBSaveWorldRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBSaveWorldRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBSaveWorldRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSaveWorldRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBSaveWorldRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBSaveWorldRet)
  return target;
}

size_t DBSaveWorldRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBSaveWorldRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSaveWorldRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBSaveWorldRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSaveWorldRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSaveWorldRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBSaveWorldRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBSaveWorldRet)
    MergeFrom(*source);
  }
}

void DBSaveWorldRet::MergeFrom(const DBSaveWorldRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBSaveWorldRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DBSaveWorldRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBSaveWorldRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSaveWorldRet::CopyFrom(const DBSaveWorldRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBSaveWorldRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSaveWorldRet::IsInitialized() const {
  return true;
}

void DBSaveWorldRet::InternalSwap(DBSaveWorldRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSaveWorldRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBQueryWorld::InitAsDefaultInstance() {
}
class DBQueryWorld::_Internal {
 public:
};

DBQueryWorld::DBQueryWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBQueryWorld)
}
DBQueryWorld::DBQueryWorld(const DBQueryWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.DBQueryWorld)
}

void DBQueryWorld::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(world_id_));
}

DBQueryWorld::~DBQueryWorld() {
  // @@protoc_insertion_point(destructor:Proto.DBQueryWorld)
  SharedDtor();
}

void DBQueryWorld::SharedDtor() {
}

void DBQueryWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBQueryWorld& DBQueryWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBQueryWorld_msg_2eproto.base);
  return *internal_default_instance();
}


void DBQueryWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBQueryWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(world_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBQueryWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBQueryWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBQueryWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 server_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 world_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBQueryWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBQueryWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBQueryWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBQueryWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->world_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBQueryWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBQueryWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBQueryWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->world_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBQueryWorld)
  return target;
}

size_t DBQueryWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBQueryWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->world_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBQueryWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBQueryWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const DBQueryWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBQueryWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBQueryWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBQueryWorld)
    MergeFrom(*source);
  }
}

void DBQueryWorld::MergeFrom(const DBQueryWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBQueryWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.world_id() != 0) {
    set_world_id(from.world_id());
  }
}

void DBQueryWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBQueryWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBQueryWorld::CopyFrom(const DBQueryWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBQueryWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBQueryWorld::IsInitialized() const {
  return true;
}

void DBQueryWorld::InternalSwap(DBQueryWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBQueryWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBQueryWorldRet::InitAsDefaultInstance() {
  ::Proto::_DBQueryWorldRet_default_instance_._instance.get_mutable()->data_ = const_cast< ::Proto::DBWorldData*>(
      ::Proto::DBWorldData::internal_default_instance());
}
class DBQueryWorldRet::_Internal {
 public:
  static const ::Proto::DBWorldData& data(const DBQueryWorldRet* msg);
};

const ::Proto::DBWorldData&
DBQueryWorldRet::_Internal::data(const DBQueryWorldRet* msg) {
  return *msg->data_;
}
void DBQueryWorldRet::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
DBQueryWorldRet::DBQueryWorldRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.DBQueryWorldRet)
}
DBQueryWorldRet::DBQueryWorldRet(const DBQueryWorldRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::Proto::DBWorldData(*from.data_);
  } else {
    data_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:Proto.DBQueryWorldRet)
}

void DBQueryWorldRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBQueryWorldRet_msg_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&data_)) + sizeof(ret_));
}

DBQueryWorldRet::~DBQueryWorldRet() {
  // @@protoc_insertion_point(destructor:Proto.DBQueryWorldRet)
  SharedDtor();
}

void DBQueryWorldRet::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void DBQueryWorldRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBQueryWorldRet& DBQueryWorldRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBQueryWorldRet_msg_2eproto.base);
  return *internal_default_instance();
}


void DBQueryWorldRet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.DBQueryWorldRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DBQueryWorldRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.DBWorldData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DBQueryWorldRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.DBQueryWorldRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.DBWorldData data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.DBQueryWorldRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.DBQueryWorldRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DBQueryWorldRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.DBQueryWorldRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // .Proto.DBWorldData data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.DBQueryWorldRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* DBQueryWorldRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.DBQueryWorldRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // .Proto.DBWorldData data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.DBQueryWorldRet)
  return target;
}

size_t DBQueryWorldRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.DBQueryWorldRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.DBWorldData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBQueryWorldRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.DBQueryWorldRet)
  GOOGLE_DCHECK_NE(&from, this);
  const DBQueryWorldRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBQueryWorldRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.DBQueryWorldRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.DBQueryWorldRet)
    MergeFrom(*source);
  }
}

void DBQueryWorldRet::MergeFrom(const DBQueryWorldRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.DBQueryWorldRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::Proto::DBWorldData::MergeFrom(from.data());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void DBQueryWorldRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.DBQueryWorldRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBQueryWorldRet::CopyFrom(const DBQueryWorldRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.DBQueryWorldRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBQueryWorldRet::IsInitialized() const {
  return true;
}

void DBQueryWorldRet::InternalSwap(DBQueryWorldRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBQueryWorldRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleDamage::InitAsDefaultInstance() {
}
class BattleDamage::_Internal {
 public:
};

BattleDamage::BattleDamage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleDamage)
}
BattleDamage::BattleDamage(const BattleDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_, &from.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:Proto.BattleDamage)
}

void BattleDamage::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(damage_));
}

BattleDamage::~BattleDamage() {
  // @@protoc_insertion_point(destructor:Proto.BattleDamage)
  SharedDtor();
}

void BattleDamage::SharedDtor() {
}

void BattleDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleDamage& BattleDamage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleDamage_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(damage_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleDamage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleDamage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 damage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleDamage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleDamage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleDamage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos = 1;
  if (this->pos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleDamage)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleDamage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos = 1;
  if (this->pos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleDamage)
  return target;
}

size_t BattleDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleDamage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pos = 1;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->damage());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleDamage)
    MergeFrom(*source);
  }
}

void BattleDamage::MergeFrom(const BattleDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
}

void BattleDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleDamage::CopyFrom(const BattleDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleDamage::IsInitialized() const {
  return true;
}

void BattleDamage::InternalSwap(BattleDamage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(damage_, other->damage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleDamage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleAction::InitAsDefaultInstance() {
}
class BattleAction::_Internal {
 public:
};

BattleAction::BattleAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleAction)
}
BattleAction::BattleAction(const BattleAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      damage_(from.damage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_sn_, &from.owner_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&owner_sn_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:Proto.BattleAction)
}

void BattleAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleAction_msg_2eproto.base);
  ::memset(&owner_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&owner_sn_)) + sizeof(action_type_));
}

BattleAction::~BattleAction() {
  // @@protoc_insertion_point(destructor:Proto.BattleAction)
  SharedDtor();
}

void BattleAction::SharedDtor() {
}

void BattleAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleAction& BattleAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleAction_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damage_.Clear();
  ::memset(&owner_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&owner_sn_)) + sizeof(action_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 owner_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.BattleActionType action_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action_type(static_cast<::Proto::BattleActionType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.BattleDamage damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_damage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 owner_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 skill_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.BattleActionType action_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_type(static_cast< ::Proto::BattleActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Proto.BattleDamage damage = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_damage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->owner_sn(), output);
  }

  // int32 pos = 2;
  if (this->pos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // int32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->skill_id(), output);
  }

  // .Proto.BattleActionType action_type = 4;
  if (this->action_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->action_type(), output);
  }

  // repeated .Proto.BattleDamage damage = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->damage_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->damage(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->owner_sn(), target);
  }

  // int32 pos = 2;
  if (this->pos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // int32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_id(), target);
  }

  // .Proto.BattleActionType action_type = 4;
  if (this->action_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->action_type(), target);
  }

  // repeated .Proto.BattleDamage damage = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->damage_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->damage(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleAction)
  return target;
}

size_t BattleAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.BattleDamage damage = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->damage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->damage(static_cast<int>(i)));
    }
  }

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->owner_sn());
  }

  // int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // int32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->skill_id());
  }

  // .Proto.BattleActionType action_type = 4;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleAction)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleAction)
    MergeFrom(*source);
  }
}

void BattleAction::MergeFrom(const BattleAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  damage_.MergeFrom(from.damage_);
  if (from.owner_sn() != 0) {
    set_owner_sn(from.owner_sn());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void BattleAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleAction::CopyFrom(const BattleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleAction::IsInitialized() const {
  return true;
}

void BattleAction::InternalSwap(BattleAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&damage_)->InternalSwap(CastToBase(&other->damage_));
  swap(owner_sn_, other->owner_sn_);
  swap(pos_, other->pos_);
  swap(skill_id_, other->skill_id_);
  swap(action_type_, other->action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleActionList::InitAsDefaultInstance() {
}
class BattleActionList::_Internal {
 public:
};

BattleActionList::BattleActionList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleActionList)
}
BattleActionList::BattleActionList(const BattleActionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.BattleActionList)
}

void BattleActionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleActionList_msg_2eproto.base);
}

BattleActionList::~BattleActionList() {
  // @@protoc_insertion_point(destructor:Proto.BattleActionList)
  SharedDtor();
}

void BattleActionList::SharedDtor() {
}

void BattleActionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleActionList& BattleActionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleActionList_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleActionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleActionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.BattleAction actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleActionList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleActionList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.BattleAction actions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleActionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleActionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleActionList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleActionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.BattleAction actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleActionList)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleActionList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleActionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.BattleAction actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->actions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleActionList)
  return target;
}

size_t BattleActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleActionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.BattleAction actions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleActionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleActionList)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleActionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleActionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleActionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleActionList)
    MergeFrom(*source);
  }
}

void BattleActionList::MergeFrom(const BattleActionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleActionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
}

void BattleActionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleActionList::CopyFrom(const BattleActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleActionList::IsInitialized() const {
  return true;
}

void BattleActionList::InternalSwap(BattleActionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleActionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleJoin::InitAsDefaultInstance() {
}
class BattleJoin::_Internal {
 public:
};

BattleJoin::BattleJoin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleJoin)
}
BattleJoin::BattleJoin(const BattleJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.BattleJoin)
}

void BattleJoin::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

BattleJoin::~BattleJoin() {
  // @@protoc_insertion_point(destructor:Proto.BattleJoin)
  SharedDtor();
}

void BattleJoin::SharedDtor() {
}

void BattleJoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleJoin& BattleJoin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleJoin_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleJoin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleJoin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleJoin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleJoin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleJoin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleJoin)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleJoin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleJoin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleJoin)
  return target;
}

size_t BattleJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleJoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleJoin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleJoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleJoin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleJoin)
    MergeFrom(*source);
  }
}

void BattleJoin::MergeFrom(const BattleJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void BattleJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleJoin::CopyFrom(const BattleJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleJoin::IsInitialized() const {
  return true;
}

void BattleJoin::InternalSwap(BattleJoin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleJoin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleCreate::InitAsDefaultInstance() {
}
class BattleCreate::_Internal {
 public:
};

BattleCreate::BattleCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleCreate)
}
BattleCreate::BattleCreate(const BattleCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monster_team_id_ = from.monster_team_id_;
  // @@protoc_insertion_point(copy_constructor:Proto.BattleCreate)
}

void BattleCreate::SharedCtor() {
  monster_team_id_ = 0;
}

BattleCreate::~BattleCreate() {
  // @@protoc_insertion_point(destructor:Proto.BattleCreate)
  SharedDtor();
}

void BattleCreate::SharedDtor() {
}

void BattleCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleCreate& BattleCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleCreate_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_team_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 monster_team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monster_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleCreate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleCreate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 monster_team_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleCreate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleCreate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monster_team_id = 1;
  if (this->monster_team_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->monster_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleCreate)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monster_team_id = 1;
  if (this->monster_team_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->monster_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleCreate)
  return target;
}

size_t BattleCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 monster_team_id = 1;
  if (this->monster_team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->monster_team_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleCreate)
    MergeFrom(*source);
  }
}

void BattleCreate::MergeFrom(const BattleCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monster_team_id() != 0) {
    set_monster_team_id(from.monster_team_id());
  }
}

void BattleCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleCreate::CopyFrom(const BattleCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleCreate::IsInitialized() const {
  return true;
}

void BattleCreate::InternalSwap(BattleCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(monster_team_id_, other->monster_team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleView::InitAsDefaultInstance() {
}
class BattleView::_Internal {
 public:
};

BattleView::BattleView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleView)
}
BattleView::BattleView(const BattleView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_sn_ = from.player_sn_;
  // @@protoc_insertion_point(copy_constructor:Proto.BattleView)
}

void BattleView::SharedCtor() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}

BattleView::~BattleView() {
  // @@protoc_insertion_point(destructor:Proto.BattleView)
  SharedDtor();
}

void BattleView::SharedDtor() {
}

void BattleView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleView& BattleView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleView_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleView::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_sn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 player_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleView::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleView)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 player_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleView::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->player_sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleView)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleView::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleView)
  return target;
}

size_t BattleView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_sn = 1;
  if (this->player_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->player_sn());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleView)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleView)
    MergeFrom(*source);
  }
}

void BattleView::MergeFrom(const BattleView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_sn() != 0) {
    set_player_sn(from.player_sn());
  }
}

void BattleView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleView::CopyFrom(const BattleView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleView::IsInitialized() const {
  return true;
}

void BattleView::InternalSwap(BattleView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_sn_, other->player_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleRs::InitAsDefaultInstance() {
}
class BattleRs::_Internal {
 public:
};

BattleRs::BattleRs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleRs)
}
BattleRs::BattleRs(const BattleRs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:Proto.BattleRs)
}

void BattleRs::SharedCtor() {
  return_code_ = 0;
}

BattleRs::~BattleRs() {
  // @@protoc_insertion_point(destructor:Proto.BattleRs)
  SharedDtor();
}

void BattleRs::SharedDtor() {
}

void BattleRs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleRs& BattleRs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleRs_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleRs::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleRs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.RsCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_code(static_cast<::Proto::RsCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleRs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleRs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Proto.RsCode return_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_code(static_cast< ::Proto::RsCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleRs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleRs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleRs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.RsCode return_code = 1;
  if (this->return_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->return_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleRs)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleRs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleRs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.RsCode return_code = 1;
  if (this->return_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->return_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleRs)
  return target;
}

size_t BattleRs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleRs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.RsCode return_code = 1;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleRs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleRs)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleRs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleRs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleRs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleRs)
    MergeFrom(*source);
  }
}

void BattleRs::MergeFrom(const BattleRs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleRs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.return_code() != 0) {
    set_return_code(from.return_code());
  }
}

void BattleRs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRs::CopyFrom(const BattleRs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleRs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRs::IsInitialized() const {
  return true;
}

void BattleRs::InternalSwap(BattleRs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleRs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleTeam::InitAsDefaultInstance() {
  ::Proto::_BattleTeam_default_instance_._instance.get_mutable()->card_ = const_cast< ::Proto::Card*>(
      ::Proto::Card::internal_default_instance());
}
class BattleTeam::_Internal {
 public:
  static const ::Proto::Card& card(const BattleTeam* msg);
};

const ::Proto::Card&
BattleTeam::_Internal::card(const BattleTeam* msg) {
  return *msg->card_;
}
void BattleTeam::clear_card() {
  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
}
BattleTeam::BattleTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleTeam)
}
BattleTeam::BattleTeam(const BattleTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_card()) {
    card_ = new ::Proto::Card(*from.card_);
  } else {
    card_ = nullptr;
  }
  ::memcpy(&owner_sn_, &from.owner_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&owner_sn_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:Proto.BattleTeam)
}

void BattleTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleTeam_msg_2eproto.base);
  ::memset(&card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&card_)) + sizeof(pos_));
}

BattleTeam::~BattleTeam() {
  // @@protoc_insertion_point(destructor:Proto.BattleTeam)
  SharedDtor();
}

void BattleTeam::SharedDtor() {
  if (this != internal_default_instance()) delete card_;
}

void BattleTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleTeam& BattleTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleTeam_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  ::memset(&owner_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&owner_sn_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 owner_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.Card card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 owner_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.Card card = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->owner_sn(), output);
  }

  // int32 pos = 2;
  if (this->pos() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // .Proto.Card card = 3;
  if (this->has_card()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::card(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->owner_sn(), target);
  }

  // int32 pos = 2;
  if (this->pos() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // .Proto.Card card = 3;
  if (this->has_card()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::card(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleTeam)
  return target;
}

size_t BattleTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.Card card = 3;
  if (this->has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->owner_sn());
  }

  // int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleTeam)
    MergeFrom(*source);
  }
}

void BattleTeam::MergeFrom(const BattleTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card()) {
    mutable_card()->::Proto::Card::MergeFrom(from.card());
  }
  if (from.owner_sn() != 0) {
    set_owner_sn(from.owner_sn());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void BattleTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleTeam::CopyFrom(const BattleTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTeam::IsInitialized() const {
  return true;
}

void BattleTeam::InternalSwap(BattleTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(card_, other->card_);
  swap(owner_sn_, other->owner_sn_);
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleSyncTeam::InitAsDefaultInstance() {
}
class BattleSyncTeam::_Internal {
 public:
};

BattleSyncTeam::BattleSyncTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleSyncTeam)
}
BattleSyncTeam::BattleSyncTeam(const BattleSyncTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      team_(from.team_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.BattleSyncTeam)
}

void BattleSyncTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleSyncTeam_msg_2eproto.base);
}

BattleSyncTeam::~BattleSyncTeam() {
  // @@protoc_insertion_point(destructor:Proto.BattleSyncTeam)
  SharedDtor();
}

void BattleSyncTeam::SharedDtor() {
}

void BattleSyncTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleSyncTeam& BattleSyncTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleSyncTeam_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleSyncTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleSyncTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleSyncTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Proto.BattleTeam team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_team(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleSyncTeam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleSyncTeam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.BattleTeam team = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleSyncTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleSyncTeam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleSyncTeam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleSyncTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.BattleTeam team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->team(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleSyncTeam)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleSyncTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleSyncTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.BattleTeam team = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->team(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleSyncTeam)
  return target;
}

size_t BattleSyncTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleSyncTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.BattleTeam team = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->team_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->team(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleSyncTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleSyncTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleSyncTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleSyncTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleSyncTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleSyncTeam)
    MergeFrom(*source);
  }
}

void BattleSyncTeam::MergeFrom(const BattleSyncTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleSyncTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_.MergeFrom(from.team_);
}

void BattleSyncTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleSyncTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSyncTeam::CopyFrom(const BattleSyncTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleSyncTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSyncTeam::IsInitialized() const {
  return true;
}

void BattleSyncTeam::InternalSwap(BattleSyncTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&team_)->InternalSwap(CastToBase(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleSyncTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleBegin::InitAsDefaultInstance() {
}
class BattleBegin::_Internal {
 public:
};

BattleBegin::BattleBegin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleBegin)
}
BattleBegin::BattleBegin(const BattleBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_sn_, &from.owner_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&monster_team_id_) -
    reinterpret_cast<char*>(&owner_sn_)) + sizeof(monster_team_id_));
  // @@protoc_insertion_point(copy_constructor:Proto.BattleBegin)
}

void BattleBegin::SharedCtor() {
  ::memset(&owner_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_team_id_) -
      reinterpret_cast<char*>(&owner_sn_)) + sizeof(monster_team_id_));
}

BattleBegin::~BattleBegin() {
  // @@protoc_insertion_point(destructor:Proto.BattleBegin)
  SharedDtor();
}

void BattleBegin::SharedDtor() {
}

void BattleBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleBegin& BattleBegin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleBegin_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&owner_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_team_id_) -
      reinterpret_cast<char*>(&owner_sn_)) + sizeof(monster_team_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleBegin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 owner_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monster_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monster_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleBegin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleBegin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 owner_sn = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 monster_team_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleBegin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleBegin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->owner_sn(), output);
  }

  // int32 monster_team_id = 2;
  if (this->monster_team_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->monster_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleBegin)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleBegin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->owner_sn(), target);
  }

  // int32 monster_team_id = 2;
  if (this->monster_team_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->monster_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleBegin)
  return target;
}

size_t BattleBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleBegin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 owner_sn = 1;
  if (this->owner_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->owner_sn());
  }

  // int32 monster_team_id = 2;
  if (this->monster_team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->monster_team_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleBegin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleBegin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleBegin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleBegin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleBegin)
    MergeFrom(*source);
  }
}

void BattleBegin::MergeFrom(const BattleBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_sn() != 0) {
    set_owner_sn(from.owner_sn());
  }
  if (from.monster_team_id() != 0) {
    set_monster_team_id(from.monster_team_id());
  }
}

void BattleBegin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleBegin::CopyFrom(const BattleBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleBegin::IsInitialized() const {
  return true;
}

void BattleBegin::InternalSwap(BattleBegin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(owner_sn_, other->owner_sn_);
  swap(monster_team_id_, other->monster_team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleBegin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleEnd::InitAsDefaultInstance() {
}
class BattleEnd::_Internal {
 public:
};

BattleEnd::BattleEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.BattleEnd)
}
BattleEnd::BattleEnd(const BattleEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.BattleEnd)
}

void BattleEnd::SharedCtor() {
}

BattleEnd::~BattleEnd() {
  // @@protoc_insertion_point(destructor:Proto.BattleEnd)
  SharedDtor();
}

void BattleEnd::SharedDtor() {
}

void BattleEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleEnd& BattleEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleEnd_msg_2eproto.base);
  return *internal_default_instance();
}


void BattleEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.BattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BattleEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BattleEnd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.BattleEnd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.BattleEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.BattleEnd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BattleEnd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.BattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.BattleEnd)
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleEnd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.BattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.BattleEnd)
  return target;
}

size_t BattleEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.BattleEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.BattleEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.BattleEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.BattleEnd)
    MergeFrom(*source);
  }
}

void BattleEnd::MergeFrom(const BattleEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.BattleEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BattleEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.BattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEnd::CopyFrom(const BattleEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.BattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleEnd::IsInitialized() const {
  return true;
}

void BattleEnd::InternalSwap(BattleEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqeustSkillLvUp::InitAsDefaultInstance() {
}
class ReqeustSkillLvUp::_Internal {
 public:
};

ReqeustSkillLvUp::ReqeustSkillLvUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReqeustSkillLvUp)
}
ReqeustSkillLvUp::ReqeustSkillLvUp(const ReqeustSkillLvUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Proto.ReqeustSkillLvUp)
}

void ReqeustSkillLvUp::SharedCtor() {
  id_ = 0;
}

ReqeustSkillLvUp::~ReqeustSkillLvUp() {
  // @@protoc_insertion_point(destructor:Proto.ReqeustSkillLvUp)
  SharedDtor();
}

void ReqeustSkillLvUp::SharedDtor() {
}

void ReqeustSkillLvUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqeustSkillLvUp& ReqeustSkillLvUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqeustSkillLvUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ReqeustSkillLvUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReqeustSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqeustSkillLvUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqeustSkillLvUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReqeustSkillLvUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReqeustSkillLvUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReqeustSkillLvUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqeustSkillLvUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReqeustSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReqeustSkillLvUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqeustSkillLvUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReqeustSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReqeustSkillLvUp)
  return target;
}

size_t ReqeustSkillLvUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReqeustSkillLvUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqeustSkillLvUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReqeustSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqeustSkillLvUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqeustSkillLvUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReqeustSkillLvUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReqeustSkillLvUp)
    MergeFrom(*source);
  }
}

void ReqeustSkillLvUp::MergeFrom(const ReqeustSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReqeustSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqeustSkillLvUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReqeustSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqeustSkillLvUp::CopyFrom(const ReqeustSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReqeustSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqeustSkillLvUp::IsInitialized() const {
  return true;
}

void ReqeustSkillLvUp::InternalSwap(ReqeustSkillLvUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqeustSkillLvUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseSkillLvUp::InitAsDefaultInstance() {
}
class ResponseSkillLvUp::_Internal {
 public:
};

ResponseSkillLvUp::ResponseSkillLvUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResponseSkillLvUp)
}
ResponseSkillLvUp::ResponseSkillLvUp(const ResponseSkillLvUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResponseSkillLvUp)
}

void ResponseSkillLvUp::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

ResponseSkillLvUp::~ResponseSkillLvUp() {
  // @@protoc_insertion_point(destructor:Proto.ResponseSkillLvUp)
  SharedDtor();
}

void ResponseSkillLvUp::SharedDtor() {
}

void ResponseSkillLvUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseSkillLvUp& ResponseSkillLvUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseSkillLvUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ResponseSkillLvUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResponseSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseSkillLvUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseSkillLvUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResponseSkillLvUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResponseSkillLvUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResponseSkillLvUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseSkillLvUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResponseSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResponseSkillLvUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseSkillLvUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResponseSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResponseSkillLvUp)
  return target;
}

size_t ResponseSkillLvUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResponseSkillLvUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSkillLvUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResponseSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSkillLvUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseSkillLvUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResponseSkillLvUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResponseSkillLvUp)
    MergeFrom(*source);
  }
}

void ResponseSkillLvUp::MergeFrom(const ResponseSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResponseSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void ResponseSkillLvUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResponseSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSkillLvUp::CopyFrom(const ResponseSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResponseSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSkillLvUp::IsInitialized() const {
  return true;
}

void ResponseSkillLvUp::InternalSwap(ResponseSkillLvUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSkillLvUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqeustEquipmentLvUp::InitAsDefaultInstance() {
}
class ReqeustEquipmentLvUp::_Internal {
 public:
};

ReqeustEquipmentLvUp::ReqeustEquipmentLvUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReqeustEquipmentLvUp)
}
ReqeustEquipmentLvUp::ReqeustEquipmentLvUp(const ReqeustEquipmentLvUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Proto.ReqeustEquipmentLvUp)
}

void ReqeustEquipmentLvUp::SharedCtor() {
  id_ = 0;
}

ReqeustEquipmentLvUp::~ReqeustEquipmentLvUp() {
  // @@protoc_insertion_point(destructor:Proto.ReqeustEquipmentLvUp)
  SharedDtor();
}

void ReqeustEquipmentLvUp::SharedDtor() {
}

void ReqeustEquipmentLvUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqeustEquipmentLvUp& ReqeustEquipmentLvUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqeustEquipmentLvUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ReqeustEquipmentLvUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReqeustEquipmentLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqeustEquipmentLvUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqeustEquipmentLvUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReqeustEquipmentLvUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReqeustEquipmentLvUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReqeustEquipmentLvUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqeustEquipmentLvUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReqeustEquipmentLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReqeustEquipmentLvUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqeustEquipmentLvUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReqeustEquipmentLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReqeustEquipmentLvUp)
  return target;
}

size_t ReqeustEquipmentLvUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReqeustEquipmentLvUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqeustEquipmentLvUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReqeustEquipmentLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqeustEquipmentLvUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqeustEquipmentLvUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReqeustEquipmentLvUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReqeustEquipmentLvUp)
    MergeFrom(*source);
  }
}

void ReqeustEquipmentLvUp::MergeFrom(const ReqeustEquipmentLvUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReqeustEquipmentLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReqeustEquipmentLvUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReqeustEquipmentLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqeustEquipmentLvUp::CopyFrom(const ReqeustEquipmentLvUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReqeustEquipmentLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqeustEquipmentLvUp::IsInitialized() const {
  return true;
}

void ReqeustEquipmentLvUp::InternalSwap(ReqeustEquipmentLvUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqeustEquipmentLvUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseEquipmentLvUp::InitAsDefaultInstance() {
}
class ResponseEquipmentLvUp::_Internal {
 public:
};

ResponseEquipmentLvUp::ResponseEquipmentLvUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResponseEquipmentLvUp)
}
ResponseEquipmentLvUp::ResponseEquipmentLvUp(const ResponseEquipmentLvUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResponseEquipmentLvUp)
}

void ResponseEquipmentLvUp::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
}

ResponseEquipmentLvUp::~ResponseEquipmentLvUp() {
  // @@protoc_insertion_point(destructor:Proto.ResponseEquipmentLvUp)
  SharedDtor();
}

void ResponseEquipmentLvUp::SharedDtor() {
}

void ResponseEquipmentLvUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseEquipmentLvUp& ResponseEquipmentLvUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseEquipmentLvUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ResponseEquipmentLvUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResponseEquipmentLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseEquipmentLvUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseEquipmentLvUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResponseEquipmentLvUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResponseEquipmentLvUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResponseEquipmentLvUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseEquipmentLvUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResponseEquipmentLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResponseEquipmentLvUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseEquipmentLvUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResponseEquipmentLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResponseEquipmentLvUp)
  return target;
}

size_t ResponseEquipmentLvUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResponseEquipmentLvUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseEquipmentLvUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResponseEquipmentLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEquipmentLvUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseEquipmentLvUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResponseEquipmentLvUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResponseEquipmentLvUp)
    MergeFrom(*source);
  }
}

void ResponseEquipmentLvUp::MergeFrom(const ResponseEquipmentLvUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResponseEquipmentLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void ResponseEquipmentLvUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResponseEquipmentLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEquipmentLvUp::CopyFrom(const ResponseEquipmentLvUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResponseEquipmentLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEquipmentLvUp::IsInitialized() const {
  return true;
}

void ResponseEquipmentLvUp::InternalSwap(ResponseEquipmentLvUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEquipmentLvUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCardSkillLvUp::InitAsDefaultInstance() {
  ::Proto::_ReqCardSkillLvUp_default_instance_._instance.get_mutable()->requestskill_ = const_cast< ::Proto::ReqeustSkillLvUp*>(
      ::Proto::ReqeustSkillLvUp::internal_default_instance());
}
class ReqCardSkillLvUp::_Internal {
 public:
  static const ::Proto::ReqeustSkillLvUp& requestskill(const ReqCardSkillLvUp* msg);
};

const ::Proto::ReqeustSkillLvUp&
ReqCardSkillLvUp::_Internal::requestskill(const ReqCardSkillLvUp* msg) {
  return *msg->requestskill_;
}
ReqCardSkillLvUp::ReqCardSkillLvUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ReqCardSkillLvUp)
}
ReqCardSkillLvUp::ReqCardSkillLvUp(const ReqCardSkillLvUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_requestskill()) {
    requestskill_ = new ::Proto::ReqeustSkillLvUp(*from.requestskill_);
  } else {
    requestskill_ = nullptr;
  }
  cardid_ = from.cardid_;
  // @@protoc_insertion_point(copy_constructor:Proto.ReqCardSkillLvUp)
}

void ReqCardSkillLvUp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCardSkillLvUp_msg_2eproto.base);
  ::memset(&requestskill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardid_) -
      reinterpret_cast<char*>(&requestskill_)) + sizeof(cardid_));
}

ReqCardSkillLvUp::~ReqCardSkillLvUp() {
  // @@protoc_insertion_point(destructor:Proto.ReqCardSkillLvUp)
  SharedDtor();
}

void ReqCardSkillLvUp::SharedDtor() {
  if (this != internal_default_instance()) delete requestskill_;
}

void ReqCardSkillLvUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCardSkillLvUp& ReqCardSkillLvUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCardSkillLvUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ReqCardSkillLvUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ReqCardSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && requestskill_ != nullptr) {
    delete requestskill_;
  }
  requestskill_ = nullptr;
  cardid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqCardSkillLvUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.ReqeustSkillLvUp requestSkill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_requestskill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqCardSkillLvUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ReqCardSkillLvUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cardID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.ReqeustSkillLvUp requestSkill = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requestskill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ReqCardSkillLvUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ReqCardSkillLvUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqCardSkillLvUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ReqCardSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // .Proto.ReqeustSkillLvUp requestSkill = 2;
  if (this->has_requestskill()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::requestskill(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ReqCardSkillLvUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCardSkillLvUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ReqCardSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // .Proto.ReqeustSkillLvUp requestSkill = 2;
  if (this->has_requestskill()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::requestskill(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ReqCardSkillLvUp)
  return target;
}

size_t ReqCardSkillLvUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ReqCardSkillLvUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.ReqeustSkillLvUp requestSkill = 2;
  if (this->has_requestskill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requestskill_);
  }

  // int32 cardID = 1;
  if (this->cardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cardid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCardSkillLvUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ReqCardSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCardSkillLvUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCardSkillLvUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ReqCardSkillLvUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ReqCardSkillLvUp)
    MergeFrom(*source);
  }
}

void ReqCardSkillLvUp::MergeFrom(const ReqCardSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ReqCardSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestskill()) {
    mutable_requestskill()->::Proto::ReqeustSkillLvUp::MergeFrom(from.requestskill());
  }
  if (from.cardid() != 0) {
    set_cardid(from.cardid());
  }
}

void ReqCardSkillLvUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ReqCardSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCardSkillLvUp::CopyFrom(const ReqCardSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ReqCardSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCardSkillLvUp::IsInitialized() const {
  return true;
}

void ReqCardSkillLvUp::InternalSwap(ReqCardSkillLvUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(requestskill_, other->requestskill_);
  swap(cardid_, other->cardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCardSkillLvUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResCardSkillLvUp::InitAsDefaultInstance() {
  ::Proto::_ResCardSkillLvUp_default_instance_._instance.get_mutable()->resskilllvup_ = const_cast< ::Proto::ResponseSkillLvUp*>(
      ::Proto::ResponseSkillLvUp::internal_default_instance());
}
class ResCardSkillLvUp::_Internal {
 public:
  static const ::Proto::ResponseSkillLvUp& resskilllvup(const ResCardSkillLvUp* msg);
};

const ::Proto::ResponseSkillLvUp&
ResCardSkillLvUp::_Internal::resskilllvup(const ResCardSkillLvUp* msg) {
  return *msg->resskilllvup_;
}
ResCardSkillLvUp::ResCardSkillLvUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.ResCardSkillLvUp)
}
ResCardSkillLvUp::ResCardSkillLvUp(const ResCardSkillLvUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resskilllvup()) {
    resskilllvup_ = new ::Proto::ResponseSkillLvUp(*from.resskilllvup_);
  } else {
    resskilllvup_ = nullptr;
  }
  ::memcpy(&rescode_, &from.rescode_,
    static_cast<size_t>(reinterpret_cast<char*>(&rescardid_) -
    reinterpret_cast<char*>(&rescode_)) + sizeof(rescardid_));
  // @@protoc_insertion_point(copy_constructor:Proto.ResCardSkillLvUp)
}

void ResCardSkillLvUp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResCardSkillLvUp_msg_2eproto.base);
  ::memset(&resskilllvup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescardid_) -
      reinterpret_cast<char*>(&resskilllvup_)) + sizeof(rescardid_));
}

ResCardSkillLvUp::~ResCardSkillLvUp() {
  // @@protoc_insertion_point(destructor:Proto.ResCardSkillLvUp)
  SharedDtor();
}

void ResCardSkillLvUp::SharedDtor() {
  if (this != internal_default_instance()) delete resskilllvup_;
}

void ResCardSkillLvUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResCardSkillLvUp& ResCardSkillLvUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResCardSkillLvUp_msg_2eproto.base);
  return *internal_default_instance();
}


void ResCardSkillLvUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.ResCardSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && resskilllvup_ != nullptr) {
    delete resskilllvup_;
  }
  resskilllvup_ = nullptr;
  ::memset(&rescode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rescardid_) -
      reinterpret_cast<char*>(&rescode_)) + sizeof(rescardid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResCardSkillLvUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rescode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rescode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rescardID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rescardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.ResponseSkillLvUp resSkillLvUp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_resskilllvup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResCardSkillLvUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.ResCardSkillLvUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rescode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rescardID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rescardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Proto.ResponseSkillLvUp resSkillLvUp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resskilllvup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.ResCardSkillLvUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.ResCardSkillLvUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResCardSkillLvUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.ResCardSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rescode = 1;
  if (this->rescode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->rescode(), output);
  }

  // int32 rescardID = 2;
  if (this->rescardid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->rescardid(), output);
  }

  // .Proto.ResponseSkillLvUp resSkillLvUp = 3;
  if (this->has_resskilllvup()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::resskilllvup(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.ResCardSkillLvUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResCardSkillLvUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.ResCardSkillLvUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rescode = 1;
  if (this->rescode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->rescode(), target);
  }

  // int32 rescardID = 2;
  if (this->rescardid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->rescardid(), target);
  }

  // .Proto.ResponseSkillLvUp resSkillLvUp = 3;
  if (this->has_resskilllvup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::resskilllvup(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.ResCardSkillLvUp)
  return target;
}

size_t ResCardSkillLvUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.ResCardSkillLvUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.ResponseSkillLvUp resSkillLvUp = 3;
  if (this->has_resskilllvup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resskilllvup_);
  }

  // int32 rescode = 1;
  if (this->rescode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rescode());
  }

  // int32 rescardID = 2;
  if (this->rescardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rescardid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResCardSkillLvUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.ResCardSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCardSkillLvUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResCardSkillLvUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.ResCardSkillLvUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.ResCardSkillLvUp)
    MergeFrom(*source);
  }
}

void ResCardSkillLvUp::MergeFrom(const ResCardSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.ResCardSkillLvUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resskilllvup()) {
    mutable_resskilllvup()->::Proto::ResponseSkillLvUp::MergeFrom(from.resskilllvup());
  }
  if (from.rescode() != 0) {
    set_rescode(from.rescode());
  }
  if (from.rescardid() != 0) {
    set_rescardid(from.rescardid());
  }
}

void ResCardSkillLvUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.ResCardSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCardSkillLvUp::CopyFrom(const ResCardSkillLvUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.ResCardSkillLvUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCardSkillLvUp::IsInitialized() const {
  return true;
}

void ResCardSkillLvUp::InternalSwap(ResCardSkillLvUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resskilllvup_, other->resskilllvup_);
  swap(rescode_, other->rescode_);
  swap(rescardid_, other->rescardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResCardSkillLvUp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::NullMsg* Arena::CreateMaybeMessage< ::Proto::NullMsg >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::NullMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::CmdThread* Arena::CreateMaybeMessage< ::Proto::CmdThread >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::CmdThread >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::CmdApp* Arena::CreateMaybeMessage< ::Proto::CmdApp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::CmdApp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Efficiency* Arena::CreateMaybeMessage< ::Proto::Efficiency >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Efficiency >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppRegister* Arena::CreateMaybeMessage< ::Proto::AppRegister >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AppRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppInfoSync* Arena::CreateMaybeMessage< ::Proto::AppInfoSync >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AppInfoSync >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AppInfoListSync* Arena::CreateMaybeMessage< ::Proto::AppInfoListSync >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AppInfoListSync >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::NetworkDisconnect* Arena::CreateMaybeMessage< ::Proto::NetworkDisconnect >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::NetworkDisconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TagValue* Arena::CreateMaybeMessage< ::Proto::TagValue >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TagValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Tag* Arena::CreateMaybeMessage< ::Proto::Tag >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::NetworkConnect* Arena::CreateMaybeMessage< ::Proto::NetworkConnect >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::NetworkConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Http* Arena::CreateMaybeMessage< ::Proto::Http >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Http >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::CreateComponentParam* Arena::CreateMaybeMessage< ::Proto::CreateComponentParam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::CreateComponentParam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::CreateComponent* Arena::CreateMaybeMessage< ::Proto::CreateComponent >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::CreateComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RemoveComponent* Arena::CreateMaybeMessage< ::Proto::RemoveComponent >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RemoveComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::CreateSystem* Arena::CreateMaybeMessage< ::Proto::CreateSystem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::CreateSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AccountCheck* Arena::CreateMaybeMessage< ::Proto::AccountCheck >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AccountCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AccountCheckRs* Arena::CreateMaybeMessage< ::Proto::AccountCheckRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AccountCheckRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RobotState* Arena::CreateMaybeMessage< ::Proto::RobotState >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RobotState >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RobotSyncState* Arena::CreateMaybeMessage< ::Proto::RobotSyncState >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RobotSyncState >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RobotCreate* Arena::CreateMaybeMessage< ::Proto::RobotCreate >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RobotCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PlayerLittle* Arena::CreateMaybeMessage< ::Proto::PlayerLittle >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PlayerLittle >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PlayerList* Arena::CreateMaybeMessage< ::Proto::PlayerList >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryPlayerList* Arena::CreateMaybeMessage< ::Proto::QueryPlayerList >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryPlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryPlayer* Arena::CreateMaybeMessage< ::Proto::QueryPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryPlayerRs* Arena::CreateMaybeMessage< ::Proto::QueryPlayerRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryPlayerRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoadAllAccount* Arena::CreateMaybeMessage< ::Proto::LoadAllAccount >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoadAllAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoadAllAccountRet* Arena::CreateMaybeMessage< ::Proto::LoadAllAccountRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoadAllAccountRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoadAllPlayer* Arena::CreateMaybeMessage< ::Proto::LoadAllPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoadAllPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoadAllPlayerRet* Arena::CreateMaybeMessage< ::Proto::LoadAllPlayerRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoadAllPlayerRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoadPlayer* Arena::CreateMaybeMessage< ::Proto::LoadPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoadPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoadPlayerRet* Arena::CreateMaybeMessage< ::Proto::LoadPlayerRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoadPlayerRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PlayerLogin* Arena::CreateMaybeMessage< ::Proto::PlayerLogin >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PlayerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PlayerLoginRet* Arena::CreateMaybeMessage< ::Proto::PlayerLoginRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PlayerLoginRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PlayerCreate* Arena::CreateMaybeMessage< ::Proto::PlayerCreate >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PlayerCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PlayerCreateRet* Arena::CreateMaybeMessage< ::Proto::PlayerCreateRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PlayerCreateRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SelectPlayer* Arena::CreateMaybeMessage< ::Proto::SelectPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SelectPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SelectPlayerRs* Arena::CreateMaybeMessage< ::Proto::SelectPlayerRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SelectPlayerRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SavePlayer* Arena::CreateMaybeMessage< ::Proto::SavePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SavePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::WorldSyncToGather* Arena::CreateMaybeMessage< ::Proto::WorldSyncToGather >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::WorldSyncToGather >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::WorldProxySyncToGather* Arena::CreateMaybeMessage< ::Proto::WorldProxySyncToGather >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::WorldProxySyncToGather >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GameToken* Arena::CreateMaybeMessage< ::Proto::GameToken >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GameToken >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoginByToken* Arena::CreateMaybeMessage< ::Proto::LoginByToken >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoginByToken >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::LoginByTokenRs* Arena::CreateMaybeMessage< ::Proto::LoginByTokenRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::LoginByTokenRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TokenInfo* Arena::CreateMaybeMessage< ::Proto::TokenInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TokenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SyncPlayer* Arena::CreateMaybeMessage< ::Proto::SyncPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SyncPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::EnterWorld* Arena::CreateMaybeMessage< ::Proto::EnterWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::EnterWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::EnterHome* Arena::CreateMaybeMessage< ::Proto::EnterHome >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::EnterHome >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryDungeonBySn* Arena::CreateMaybeMessage< ::Proto::QueryDungeonBySn >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryDungeonBySn >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryDungeonBySnRs* Arena::CreateMaybeMessage< ::Proto::QueryDungeonBySnRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryDungeonBySnRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestWorld* Arena::CreateMaybeMessage< ::Proto::RequestWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::CreateWorld* Arena::CreateMaybeMessage< ::Proto::CreateWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::CreateWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DestoryWorld* Arena::CreateMaybeMessage< ::Proto::DestoryWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DestoryWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BroadcastCreateWorld* Arena::CreateMaybeMessage< ::Proto::BroadcastCreateWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BroadcastCreateWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestCreateWorldProxy* Arena::CreateMaybeMessage< ::Proto::RequestCreateWorldProxy >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestCreateWorldProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BroadcastCreateWorldProxy* Arena::CreateMaybeMessage< ::Proto::BroadcastCreateWorldProxy >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BroadcastCreateWorldProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryWorldData* Arena::CreateMaybeMessage< ::Proto::QueryWorldData >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryWorldData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryWorldDataRet* Arena::CreateMaybeMessage< ::Proto::QueryWorldDataRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryWorldDataRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SyncWorldData* Arena::CreateMaybeMessage< ::Proto::SyncWorldData >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SyncWorldData >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::WorldAction* Arena::CreateMaybeMessage< ::Proto::WorldAction >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::WorldAction >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::WorldActionRet* Arena::CreateMaybeMessage< ::Proto::WorldActionRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::WorldActionRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SyncWorldAction* Arena::CreateMaybeMessage< ::Proto::SyncWorldAction >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SyncWorldAction >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RemovePlayer* Arena::CreateMaybeMessage< ::Proto::RemovePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RemovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestSyncPlayer* Arena::CreateMaybeMessage< ::Proto::RequestSyncPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestSyncPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Role* Arena::CreateMaybeMessage< ::Proto::Role >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Role >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RoleAppear* Arena::CreateMaybeMessage< ::Proto::RoleAppear >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RoleAppear >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RoleDisAppear* Arena::CreateMaybeMessage< ::Proto::RoleDisAppear >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RoleDisAppear >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Teleport* Arena::CreateMaybeMessage< ::Proto::Teleport >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Teleport >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TeleportAfter* Arena::CreateMaybeMessage< ::Proto::TeleportAfter >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TeleportAfter >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::MoveByRotation* Arena::CreateMaybeMessage< ::Proto::MoveByRotation >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::MoveByRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AddItem* Arena::CreateMaybeMessage< ::Proto::AddItem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AddItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AddItemRet* Arena::CreateMaybeMessage< ::Proto::AddItemRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AddItemRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AddExp* Arena::CreateMaybeMessage< ::Proto::AddExp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AddExp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AddExpRet* Arena::CreateMaybeMessage< ::Proto::AddExpRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AddExpRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Dungeon* Arena::CreateMaybeMessage< ::Proto::Dungeon >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Dungeon >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DungeonRs* Arena::CreateMaybeMessage< ::Proto::DungeonRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DungeonRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Chat* Arena::CreateMaybeMessage< ::Proto::Chat >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ChatRet* Arena::CreateMaybeMessage< ::Proto::ChatRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ChatRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SyncChat* Arena::CreateMaybeMessage< ::Proto::SyncChat >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SyncChat >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GetChatRecord* Arena::CreateMaybeMessage< ::Proto::GetChatRecord >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GetChatRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::STChatInfo* Arena::CreateMaybeMessage< ::Proto::STChatInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::STChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GetChatRecordRet* Arena::CreateMaybeMessage< ::Proto::GetChatRecordRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GetChatRecordRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryAllPlayerName* Arena::CreateMaybeMessage< ::Proto::QueryAllPlayerName >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryAllPlayerName >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::STPlayerSnName* Arena::CreateMaybeMessage< ::Proto::STPlayerSnName >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::STPlayerSnName >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QueryAllPlayerNameRet* Arena::CreateMaybeMessage< ::Proto::QueryAllPlayerNameRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QueryAllPlayerNameRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::Mute* Arena::CreateMaybeMessage< ::Proto::Mute >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::Mute >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::MuteRet* Arena::CreateMaybeMessage< ::Proto::MuteRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::MuteRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GetTargetInfo* Arena::CreateMaybeMessage< ::Proto::GetTargetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GetTargetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GetTargetInfoRet* Arena::CreateMaybeMessage< ::Proto::GetTargetInfoRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GetTargetInfoRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BoardcastLogin* Arena::CreateMaybeMessage< ::Proto::BoardcastLogin >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BoardcastLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::STFriendInfo* Arena::CreateMaybeMessage< ::Proto::STFriendInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::STFriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GetFriendList* Arena::CreateMaybeMessage< ::Proto::GetFriendList >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GetFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GetFriendListRet* Arena::CreateMaybeMessage< ::Proto::GetFriendListRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GetFriendListRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AddFriend* Arena::CreateMaybeMessage< ::Proto::AddFriend >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::AddFriendRet* Arena::CreateMaybeMessage< ::Proto::AddFriendRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::AddFriendRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DelFriend* Arena::CreateMaybeMessage< ::Proto::DelFriend >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DelFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DelFriendRet* Arena::CreateMaybeMessage< ::Proto::DelFriendRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DelFriendRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RefreshFriend* Arena::CreateMaybeMessage< ::Proto::RefreshFriend >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RefreshFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RefreshFriendRet* Arena::CreateMaybeMessage< ::Proto::RefreshFriendRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RefreshFriendRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::JoinGuild* Arena::CreateMaybeMessage< ::Proto::JoinGuild >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::JoinGuild >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::JoinGuildRet* Arena::CreateMaybeMessage< ::Proto::JoinGuildRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::JoinGuildRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QuitGuild* Arena::CreateMaybeMessage< ::Proto::QuitGuild >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QuitGuild >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QuitGuildRet* Arena::CreateMaybeMessage< ::Proto::QuitGuildRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QuitGuildRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::JoinTeam* Arena::CreateMaybeMessage< ::Proto::JoinTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::JoinTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::JoinTeamRet* Arena::CreateMaybeMessage< ::Proto::JoinTeamRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::JoinTeamRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QuitTeam* Arena::CreateMaybeMessage< ::Proto::QuitTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QuitTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::QuitTeamRet* Arena::CreateMaybeMessage< ::Proto::QuitTeamRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::QuitTeamRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SyncPlayerProperty* Arena::CreateMaybeMessage< ::Proto::SyncPlayerProperty >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SyncPlayerProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::SyncPlayerPropertyList* Arena::CreateMaybeMessage< ::Proto::SyncPlayerPropertyList >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::SyncPlayerPropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestChangeTeam* Arena::CreateMaybeMessage< ::Proto::RequestChangeTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestChangeTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReseponseChangeTeam* Arena::CreateMaybeMessage< ::Proto::ReseponseChangeTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReseponseChangeTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReqCardLevelUp* Arena::CreateMaybeMessage< ::Proto::ReqCardLevelUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReqCardLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReqCardStar* Arena::CreateMaybeMessage< ::Proto::ReqCardStar >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReqCardStar >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReqCardQlt* Arena::CreateMaybeMessage< ::Proto::ReqCardQlt >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReqCardQlt >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResCardLevel* Arena::CreateMaybeMessage< ::Proto::ResCardLevel >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResCardLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResCardStar* Arena::CreateMaybeMessage< ::Proto::ResCardStar >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResCardStar >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResCardQlt* Arena::CreateMaybeMessage< ::Proto::ResCardQlt >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResCardQlt >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResInten* Arena::CreateMaybeMessage< ::Proto::ResInten >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResInten >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReuqestGMAddItem* Arena::CreateMaybeMessage< ::Proto::ReuqestGMAddItem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReuqestGMAddItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ItemChange* Arena::CreateMaybeMessage< ::Proto::ItemChange >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ItemChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PushItemChange_ChangeShow* Arena::CreateMaybeMessage< ::Proto::PushItemChange_ChangeShow >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PushItemChange_ChangeShow >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::PushItemChange* Arena::CreateMaybeMessage< ::Proto::PushItemChange >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::PushItemChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestUseItem* Arena::CreateMaybeMessage< ::Proto::RequestUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResponseUseItem* Arena::CreateMaybeMessage< ::Proto::ResponseUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResponseUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestSortBag* Arena::CreateMaybeMessage< ::Proto::RequestSortBag >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestSortBag >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResponseSortBag* Arena::CreateMaybeMessage< ::Proto::ResponseSortBag >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResponseSortBag >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestSellItem* Arena::CreateMaybeMessage< ::Proto::RequestSellItem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestSellItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResponseSellItem* Arena::CreateMaybeMessage< ::Proto::ResponseSellItem >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResponseSellItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::RequestGachaPull* Arena::CreateMaybeMessage< ::Proto::RequestGachaPull >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::RequestGachaPull >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResponseGachaPull* Arena::CreateMaybeMessage< ::Proto::ResponseGachaPull >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResponseGachaPull >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBQueryPlayer* Arena::CreateMaybeMessage< ::Proto::DBQueryPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBQueryPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBQueryPlayerRet* Arena::CreateMaybeMessage< ::Proto::DBQueryPlayerRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBQueryPlayerRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBCreatePlayer* Arena::CreateMaybeMessage< ::Proto::DBCreatePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBCreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBCreatePlayerRet* Arena::CreateMaybeMessage< ::Proto::DBCreatePlayerRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBCreatePlayerRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBSavePlayer* Arena::CreateMaybeMessage< ::Proto::DBSavePlayer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBSavePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBSavePlayerRet* Arena::CreateMaybeMessage< ::Proto::DBSavePlayerRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBSavePlayerRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBSaveList* Arena::CreateMaybeMessage< ::Proto::DBSaveList >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBSaveList >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBSaveListRet* Arena::CreateMaybeMessage< ::Proto::DBSaveListRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBSaveListRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBSaveWorld* Arena::CreateMaybeMessage< ::Proto::DBSaveWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBSaveWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBSaveWorldRet* Arena::CreateMaybeMessage< ::Proto::DBSaveWorldRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBSaveWorldRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBQueryWorld* Arena::CreateMaybeMessage< ::Proto::DBQueryWorld >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBQueryWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::DBQueryWorldRet* Arena::CreateMaybeMessage< ::Proto::DBQueryWorldRet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::DBQueryWorldRet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleDamage* Arena::CreateMaybeMessage< ::Proto::BattleDamage >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleAction* Arena::CreateMaybeMessage< ::Proto::BattleAction >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleAction >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleActionList* Arena::CreateMaybeMessage< ::Proto::BattleActionList >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleActionList >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleJoin* Arena::CreateMaybeMessage< ::Proto::BattleJoin >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleCreate* Arena::CreateMaybeMessage< ::Proto::BattleCreate >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleView* Arena::CreateMaybeMessage< ::Proto::BattleView >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleView >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleRs* Arena::CreateMaybeMessage< ::Proto::BattleRs >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleRs >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleTeam* Arena::CreateMaybeMessage< ::Proto::BattleTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleSyncTeam* Arena::CreateMaybeMessage< ::Proto::BattleSyncTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleSyncTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleBegin* Arena::CreateMaybeMessage< ::Proto::BattleBegin >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleBegin >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::BattleEnd* Arena::CreateMaybeMessage< ::Proto::BattleEnd >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::BattleEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReqeustSkillLvUp* Arena::CreateMaybeMessage< ::Proto::ReqeustSkillLvUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReqeustSkillLvUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResponseSkillLvUp* Arena::CreateMaybeMessage< ::Proto::ResponseSkillLvUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResponseSkillLvUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReqeustEquipmentLvUp* Arena::CreateMaybeMessage< ::Proto::ReqeustEquipmentLvUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReqeustEquipmentLvUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResponseEquipmentLvUp* Arena::CreateMaybeMessage< ::Proto::ResponseEquipmentLvUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResponseEquipmentLvUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ReqCardSkillLvUp* Arena::CreateMaybeMessage< ::Proto::ReqCardSkillLvUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ReqCardSkillLvUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::ResCardSkillLvUp* Arena::CreateMaybeMessage< ::Proto::ResCardSkillLvUp >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::ResCardSkillLvUp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
