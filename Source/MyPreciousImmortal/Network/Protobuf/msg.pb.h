// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db.pb.h"
#include "x_enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[159]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace Proto {
class AccountCheck;
class AccountCheckDefaultTypeInternal;
extern AccountCheckDefaultTypeInternal _AccountCheck_default_instance_;
class AccountCheckRs;
class AccountCheckRsDefaultTypeInternal;
extern AccountCheckRsDefaultTypeInternal _AccountCheckRs_default_instance_;
class AddExp;
class AddExpDefaultTypeInternal;
extern AddExpDefaultTypeInternal _AddExp_default_instance_;
class AddExpRet;
class AddExpRetDefaultTypeInternal;
extern AddExpRetDefaultTypeInternal _AddExpRet_default_instance_;
class AddFriend;
class AddFriendDefaultTypeInternal;
extern AddFriendDefaultTypeInternal _AddFriend_default_instance_;
class AddFriendRet;
class AddFriendRetDefaultTypeInternal;
extern AddFriendRetDefaultTypeInternal _AddFriendRet_default_instance_;
class AddItem;
class AddItemDefaultTypeInternal;
extern AddItemDefaultTypeInternal _AddItem_default_instance_;
class AddItemRet;
class AddItemRetDefaultTypeInternal;
extern AddItemRetDefaultTypeInternal _AddItemRet_default_instance_;
class AppInfoListSync;
class AppInfoListSyncDefaultTypeInternal;
extern AppInfoListSyncDefaultTypeInternal _AppInfoListSync_default_instance_;
class AppInfoSync;
class AppInfoSyncDefaultTypeInternal;
extern AppInfoSyncDefaultTypeInternal _AppInfoSync_default_instance_;
class AppRegister;
class AppRegisterDefaultTypeInternal;
extern AppRegisterDefaultTypeInternal _AppRegister_default_instance_;
class BattleAction;
class BattleActionDefaultTypeInternal;
extern BattleActionDefaultTypeInternal _BattleAction_default_instance_;
class BattleActionList;
class BattleActionListDefaultTypeInternal;
extern BattleActionListDefaultTypeInternal _BattleActionList_default_instance_;
class BattleBegin;
class BattleBeginDefaultTypeInternal;
extern BattleBeginDefaultTypeInternal _BattleBegin_default_instance_;
class BattleCreate;
class BattleCreateDefaultTypeInternal;
extern BattleCreateDefaultTypeInternal _BattleCreate_default_instance_;
class BattleDamage;
class BattleDamageDefaultTypeInternal;
extern BattleDamageDefaultTypeInternal _BattleDamage_default_instance_;
class BattleEnd;
class BattleEndDefaultTypeInternal;
extern BattleEndDefaultTypeInternal _BattleEnd_default_instance_;
class BattleJoin;
class BattleJoinDefaultTypeInternal;
extern BattleJoinDefaultTypeInternal _BattleJoin_default_instance_;
class BattleRs;
class BattleRsDefaultTypeInternal;
extern BattleRsDefaultTypeInternal _BattleRs_default_instance_;
class BattleSyncTeam;
class BattleSyncTeamDefaultTypeInternal;
extern BattleSyncTeamDefaultTypeInternal _BattleSyncTeam_default_instance_;
class BattleTeam;
class BattleTeamDefaultTypeInternal;
extern BattleTeamDefaultTypeInternal _BattleTeam_default_instance_;
class BattleView;
class BattleViewDefaultTypeInternal;
extern BattleViewDefaultTypeInternal _BattleView_default_instance_;
class BoardcastLogin;
class BoardcastLoginDefaultTypeInternal;
extern BoardcastLoginDefaultTypeInternal _BoardcastLogin_default_instance_;
class BroadcastCreateWorld;
class BroadcastCreateWorldDefaultTypeInternal;
extern BroadcastCreateWorldDefaultTypeInternal _BroadcastCreateWorld_default_instance_;
class BroadcastCreateWorldProxy;
class BroadcastCreateWorldProxyDefaultTypeInternal;
extern BroadcastCreateWorldProxyDefaultTypeInternal _BroadcastCreateWorldProxy_default_instance_;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class ChatRet;
class ChatRetDefaultTypeInternal;
extern ChatRetDefaultTypeInternal _ChatRet_default_instance_;
class CmdApp;
class CmdAppDefaultTypeInternal;
extern CmdAppDefaultTypeInternal _CmdApp_default_instance_;
class CmdThread;
class CmdThreadDefaultTypeInternal;
extern CmdThreadDefaultTypeInternal _CmdThread_default_instance_;
class CreateComponent;
class CreateComponentDefaultTypeInternal;
extern CreateComponentDefaultTypeInternal _CreateComponent_default_instance_;
class CreateComponentParam;
class CreateComponentParamDefaultTypeInternal;
extern CreateComponentParamDefaultTypeInternal _CreateComponentParam_default_instance_;
class CreateSystem;
class CreateSystemDefaultTypeInternal;
extern CreateSystemDefaultTypeInternal _CreateSystem_default_instance_;
class CreateWorld;
class CreateWorldDefaultTypeInternal;
extern CreateWorldDefaultTypeInternal _CreateWorld_default_instance_;
class DBCreatePlayer;
class DBCreatePlayerDefaultTypeInternal;
extern DBCreatePlayerDefaultTypeInternal _DBCreatePlayer_default_instance_;
class DBCreatePlayerRet;
class DBCreatePlayerRetDefaultTypeInternal;
extern DBCreatePlayerRetDefaultTypeInternal _DBCreatePlayerRet_default_instance_;
class DBQueryPlayer;
class DBQueryPlayerDefaultTypeInternal;
extern DBQueryPlayerDefaultTypeInternal _DBQueryPlayer_default_instance_;
class DBQueryPlayerRet;
class DBQueryPlayerRetDefaultTypeInternal;
extern DBQueryPlayerRetDefaultTypeInternal _DBQueryPlayerRet_default_instance_;
class DBQueryWorld;
class DBQueryWorldDefaultTypeInternal;
extern DBQueryWorldDefaultTypeInternal _DBQueryWorld_default_instance_;
class DBQueryWorldRet;
class DBQueryWorldRetDefaultTypeInternal;
extern DBQueryWorldRetDefaultTypeInternal _DBQueryWorldRet_default_instance_;
class DBSaveList;
class DBSaveListDefaultTypeInternal;
extern DBSaveListDefaultTypeInternal _DBSaveList_default_instance_;
class DBSaveListRet;
class DBSaveListRetDefaultTypeInternal;
extern DBSaveListRetDefaultTypeInternal _DBSaveListRet_default_instance_;
class DBSavePlayer;
class DBSavePlayerDefaultTypeInternal;
extern DBSavePlayerDefaultTypeInternal _DBSavePlayer_default_instance_;
class DBSavePlayerRet;
class DBSavePlayerRetDefaultTypeInternal;
extern DBSavePlayerRetDefaultTypeInternal _DBSavePlayerRet_default_instance_;
class DBSaveWorld;
class DBSaveWorldDefaultTypeInternal;
extern DBSaveWorldDefaultTypeInternal _DBSaveWorld_default_instance_;
class DBSaveWorldRet;
class DBSaveWorldRetDefaultTypeInternal;
extern DBSaveWorldRetDefaultTypeInternal _DBSaveWorldRet_default_instance_;
class DelFriend;
class DelFriendDefaultTypeInternal;
extern DelFriendDefaultTypeInternal _DelFriend_default_instance_;
class DelFriendRet;
class DelFriendRetDefaultTypeInternal;
extern DelFriendRetDefaultTypeInternal _DelFriendRet_default_instance_;
class DestoryWorld;
class DestoryWorldDefaultTypeInternal;
extern DestoryWorldDefaultTypeInternal _DestoryWorld_default_instance_;
class Dungeon;
class DungeonDefaultTypeInternal;
extern DungeonDefaultTypeInternal _Dungeon_default_instance_;
class DungeonRs;
class DungeonRsDefaultTypeInternal;
extern DungeonRsDefaultTypeInternal _DungeonRs_default_instance_;
class Efficiency;
class EfficiencyDefaultTypeInternal;
extern EfficiencyDefaultTypeInternal _Efficiency_default_instance_;
class EnterHome;
class EnterHomeDefaultTypeInternal;
extern EnterHomeDefaultTypeInternal _EnterHome_default_instance_;
class EnterWorld;
class EnterWorldDefaultTypeInternal;
extern EnterWorldDefaultTypeInternal _EnterWorld_default_instance_;
class GameToken;
class GameTokenDefaultTypeInternal;
extern GameTokenDefaultTypeInternal _GameToken_default_instance_;
class GetChatRecord;
class GetChatRecordDefaultTypeInternal;
extern GetChatRecordDefaultTypeInternal _GetChatRecord_default_instance_;
class GetChatRecordRet;
class GetChatRecordRetDefaultTypeInternal;
extern GetChatRecordRetDefaultTypeInternal _GetChatRecordRet_default_instance_;
class GetFriendList;
class GetFriendListDefaultTypeInternal;
extern GetFriendListDefaultTypeInternal _GetFriendList_default_instance_;
class GetFriendListRet;
class GetFriendListRetDefaultTypeInternal;
extern GetFriendListRetDefaultTypeInternal _GetFriendListRet_default_instance_;
class GetTargetInfo;
class GetTargetInfoDefaultTypeInternal;
extern GetTargetInfoDefaultTypeInternal _GetTargetInfo_default_instance_;
class GetTargetInfoRet;
class GetTargetInfoRetDefaultTypeInternal;
extern GetTargetInfoRetDefaultTypeInternal _GetTargetInfoRet_default_instance_;
class Http;
class HttpDefaultTypeInternal;
extern HttpDefaultTypeInternal _Http_default_instance_;
class ItemChange;
class ItemChangeDefaultTypeInternal;
extern ItemChangeDefaultTypeInternal _ItemChange_default_instance_;
class JoinGuild;
class JoinGuildDefaultTypeInternal;
extern JoinGuildDefaultTypeInternal _JoinGuild_default_instance_;
class JoinGuildRet;
class JoinGuildRetDefaultTypeInternal;
extern JoinGuildRetDefaultTypeInternal _JoinGuildRet_default_instance_;
class JoinTeam;
class JoinTeamDefaultTypeInternal;
extern JoinTeamDefaultTypeInternal _JoinTeam_default_instance_;
class JoinTeamRet;
class JoinTeamRetDefaultTypeInternal;
extern JoinTeamRetDefaultTypeInternal _JoinTeamRet_default_instance_;
class LoadAllAccount;
class LoadAllAccountDefaultTypeInternal;
extern LoadAllAccountDefaultTypeInternal _LoadAllAccount_default_instance_;
class LoadAllAccountRet;
class LoadAllAccountRetDefaultTypeInternal;
extern LoadAllAccountRetDefaultTypeInternal _LoadAllAccountRet_default_instance_;
class LoadAllPlayer;
class LoadAllPlayerDefaultTypeInternal;
extern LoadAllPlayerDefaultTypeInternal _LoadAllPlayer_default_instance_;
class LoadAllPlayerRet;
class LoadAllPlayerRetDefaultTypeInternal;
extern LoadAllPlayerRetDefaultTypeInternal _LoadAllPlayerRet_default_instance_;
class LoadPlayer;
class LoadPlayerDefaultTypeInternal;
extern LoadPlayerDefaultTypeInternal _LoadPlayer_default_instance_;
class LoadPlayerRet;
class LoadPlayerRetDefaultTypeInternal;
extern LoadPlayerRetDefaultTypeInternal _LoadPlayerRet_default_instance_;
class LoginByToken;
class LoginByTokenDefaultTypeInternal;
extern LoginByTokenDefaultTypeInternal _LoginByToken_default_instance_;
class LoginByTokenRs;
class LoginByTokenRsDefaultTypeInternal;
extern LoginByTokenRsDefaultTypeInternal _LoginByTokenRs_default_instance_;
class MoveByRotation;
class MoveByRotationDefaultTypeInternal;
extern MoveByRotationDefaultTypeInternal _MoveByRotation_default_instance_;
class Mute;
class MuteDefaultTypeInternal;
extern MuteDefaultTypeInternal _Mute_default_instance_;
class MuteRet;
class MuteRetDefaultTypeInternal;
extern MuteRetDefaultTypeInternal _MuteRet_default_instance_;
class NetworkConnect;
class NetworkConnectDefaultTypeInternal;
extern NetworkConnectDefaultTypeInternal _NetworkConnect_default_instance_;
class NetworkDisconnect;
class NetworkDisconnectDefaultTypeInternal;
extern NetworkDisconnectDefaultTypeInternal _NetworkDisconnect_default_instance_;
class NullMsg;
class NullMsgDefaultTypeInternal;
extern NullMsgDefaultTypeInternal _NullMsg_default_instance_;
class PlayerCreate;
class PlayerCreateDefaultTypeInternal;
extern PlayerCreateDefaultTypeInternal _PlayerCreate_default_instance_;
class PlayerCreateRet;
class PlayerCreateRetDefaultTypeInternal;
extern PlayerCreateRetDefaultTypeInternal _PlayerCreateRet_default_instance_;
class PlayerList;
class PlayerListDefaultTypeInternal;
extern PlayerListDefaultTypeInternal _PlayerList_default_instance_;
class PlayerLittle;
class PlayerLittleDefaultTypeInternal;
extern PlayerLittleDefaultTypeInternal _PlayerLittle_default_instance_;
class PlayerLogin;
class PlayerLoginDefaultTypeInternal;
extern PlayerLoginDefaultTypeInternal _PlayerLogin_default_instance_;
class PlayerLoginRet;
class PlayerLoginRetDefaultTypeInternal;
extern PlayerLoginRetDefaultTypeInternal _PlayerLoginRet_default_instance_;
class PushItemChange;
class PushItemChangeDefaultTypeInternal;
extern PushItemChangeDefaultTypeInternal _PushItemChange_default_instance_;
class PushItemChange_ChangeShow;
class PushItemChange_ChangeShowDefaultTypeInternal;
extern PushItemChange_ChangeShowDefaultTypeInternal _PushItemChange_ChangeShow_default_instance_;
class QueryAllPlayerName;
class QueryAllPlayerNameDefaultTypeInternal;
extern QueryAllPlayerNameDefaultTypeInternal _QueryAllPlayerName_default_instance_;
class QueryAllPlayerNameRet;
class QueryAllPlayerNameRetDefaultTypeInternal;
extern QueryAllPlayerNameRetDefaultTypeInternal _QueryAllPlayerNameRet_default_instance_;
class QueryDungeonBySn;
class QueryDungeonBySnDefaultTypeInternal;
extern QueryDungeonBySnDefaultTypeInternal _QueryDungeonBySn_default_instance_;
class QueryDungeonBySnRs;
class QueryDungeonBySnRsDefaultTypeInternal;
extern QueryDungeonBySnRsDefaultTypeInternal _QueryDungeonBySnRs_default_instance_;
class QueryPlayer;
class QueryPlayerDefaultTypeInternal;
extern QueryPlayerDefaultTypeInternal _QueryPlayer_default_instance_;
class QueryPlayerList;
class QueryPlayerListDefaultTypeInternal;
extern QueryPlayerListDefaultTypeInternal _QueryPlayerList_default_instance_;
class QueryPlayerRs;
class QueryPlayerRsDefaultTypeInternal;
extern QueryPlayerRsDefaultTypeInternal _QueryPlayerRs_default_instance_;
class QueryWorldData;
class QueryWorldDataDefaultTypeInternal;
extern QueryWorldDataDefaultTypeInternal _QueryWorldData_default_instance_;
class QueryWorldDataRet;
class QueryWorldDataRetDefaultTypeInternal;
extern QueryWorldDataRetDefaultTypeInternal _QueryWorldDataRet_default_instance_;
class QuitGuild;
class QuitGuildDefaultTypeInternal;
extern QuitGuildDefaultTypeInternal _QuitGuild_default_instance_;
class QuitGuildRet;
class QuitGuildRetDefaultTypeInternal;
extern QuitGuildRetDefaultTypeInternal _QuitGuildRet_default_instance_;
class QuitTeam;
class QuitTeamDefaultTypeInternal;
extern QuitTeamDefaultTypeInternal _QuitTeam_default_instance_;
class QuitTeamRet;
class QuitTeamRetDefaultTypeInternal;
extern QuitTeamRetDefaultTypeInternal _QuitTeamRet_default_instance_;
class RefreshFriend;
class RefreshFriendDefaultTypeInternal;
extern RefreshFriendDefaultTypeInternal _RefreshFriend_default_instance_;
class RefreshFriendRet;
class RefreshFriendRetDefaultTypeInternal;
extern RefreshFriendRetDefaultTypeInternal _RefreshFriendRet_default_instance_;
class RemoveComponent;
class RemoveComponentDefaultTypeInternal;
extern RemoveComponentDefaultTypeInternal _RemoveComponent_default_instance_;
class RemovePlayer;
class RemovePlayerDefaultTypeInternal;
extern RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
class ReqCardLevelUp;
class ReqCardLevelUpDefaultTypeInternal;
extern ReqCardLevelUpDefaultTypeInternal _ReqCardLevelUp_default_instance_;
class ReqCardQlt;
class ReqCardQltDefaultTypeInternal;
extern ReqCardQltDefaultTypeInternal _ReqCardQlt_default_instance_;
class ReqCardSkillLvUp;
class ReqCardSkillLvUpDefaultTypeInternal;
extern ReqCardSkillLvUpDefaultTypeInternal _ReqCardSkillLvUp_default_instance_;
class ReqCardStar;
class ReqCardStarDefaultTypeInternal;
extern ReqCardStarDefaultTypeInternal _ReqCardStar_default_instance_;
class ReqeustEquipmentLvUp;
class ReqeustEquipmentLvUpDefaultTypeInternal;
extern ReqeustEquipmentLvUpDefaultTypeInternal _ReqeustEquipmentLvUp_default_instance_;
class ReqeustSkillLvUp;
class ReqeustSkillLvUpDefaultTypeInternal;
extern ReqeustSkillLvUpDefaultTypeInternal _ReqeustSkillLvUp_default_instance_;
class RequestChangeTeam;
class RequestChangeTeamDefaultTypeInternal;
extern RequestChangeTeamDefaultTypeInternal _RequestChangeTeam_default_instance_;
class RequestCreateWorldProxy;
class RequestCreateWorldProxyDefaultTypeInternal;
extern RequestCreateWorldProxyDefaultTypeInternal _RequestCreateWorldProxy_default_instance_;
class RequestGachaPull;
class RequestGachaPullDefaultTypeInternal;
extern RequestGachaPullDefaultTypeInternal _RequestGachaPull_default_instance_;
class RequestSellItem;
class RequestSellItemDefaultTypeInternal;
extern RequestSellItemDefaultTypeInternal _RequestSellItem_default_instance_;
class RequestSortBag;
class RequestSortBagDefaultTypeInternal;
extern RequestSortBagDefaultTypeInternal _RequestSortBag_default_instance_;
class RequestSyncPlayer;
class RequestSyncPlayerDefaultTypeInternal;
extern RequestSyncPlayerDefaultTypeInternal _RequestSyncPlayer_default_instance_;
class RequestUseItem;
class RequestUseItemDefaultTypeInternal;
extern RequestUseItemDefaultTypeInternal _RequestUseItem_default_instance_;
class RequestWorld;
class RequestWorldDefaultTypeInternal;
extern RequestWorldDefaultTypeInternal _RequestWorld_default_instance_;
class ResCardLevel;
class ResCardLevelDefaultTypeInternal;
extern ResCardLevelDefaultTypeInternal _ResCardLevel_default_instance_;
class ResCardQlt;
class ResCardQltDefaultTypeInternal;
extern ResCardQltDefaultTypeInternal _ResCardQlt_default_instance_;
class ResCardSkillLvUp;
class ResCardSkillLvUpDefaultTypeInternal;
extern ResCardSkillLvUpDefaultTypeInternal _ResCardSkillLvUp_default_instance_;
class ResCardStar;
class ResCardStarDefaultTypeInternal;
extern ResCardStarDefaultTypeInternal _ResCardStar_default_instance_;
class ResInten;
class ResIntenDefaultTypeInternal;
extern ResIntenDefaultTypeInternal _ResInten_default_instance_;
class ReseponseChangeTeam;
class ReseponseChangeTeamDefaultTypeInternal;
extern ReseponseChangeTeamDefaultTypeInternal _ReseponseChangeTeam_default_instance_;
class ResponseEquipmentLvUp;
class ResponseEquipmentLvUpDefaultTypeInternal;
extern ResponseEquipmentLvUpDefaultTypeInternal _ResponseEquipmentLvUp_default_instance_;
class ResponseGachaPull;
class ResponseGachaPullDefaultTypeInternal;
extern ResponseGachaPullDefaultTypeInternal _ResponseGachaPull_default_instance_;
class ResponseSellItem;
class ResponseSellItemDefaultTypeInternal;
extern ResponseSellItemDefaultTypeInternal _ResponseSellItem_default_instance_;
class ResponseSkillLvUp;
class ResponseSkillLvUpDefaultTypeInternal;
extern ResponseSkillLvUpDefaultTypeInternal _ResponseSkillLvUp_default_instance_;
class ResponseSortBag;
class ResponseSortBagDefaultTypeInternal;
extern ResponseSortBagDefaultTypeInternal _ResponseSortBag_default_instance_;
class ResponseUseItem;
class ResponseUseItemDefaultTypeInternal;
extern ResponseUseItemDefaultTypeInternal _ResponseUseItem_default_instance_;
class ReuqestGMAddItem;
class ReuqestGMAddItemDefaultTypeInternal;
extern ReuqestGMAddItemDefaultTypeInternal _ReuqestGMAddItem_default_instance_;
class RobotCreate;
class RobotCreateDefaultTypeInternal;
extern RobotCreateDefaultTypeInternal _RobotCreate_default_instance_;
class RobotState;
class RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
class RobotSyncState;
class RobotSyncStateDefaultTypeInternal;
extern RobotSyncStateDefaultTypeInternal _RobotSyncState_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class RoleAppear;
class RoleAppearDefaultTypeInternal;
extern RoleAppearDefaultTypeInternal _RoleAppear_default_instance_;
class RoleDisAppear;
class RoleDisAppearDefaultTypeInternal;
extern RoleDisAppearDefaultTypeInternal _RoleDisAppear_default_instance_;
class STChatInfo;
class STChatInfoDefaultTypeInternal;
extern STChatInfoDefaultTypeInternal _STChatInfo_default_instance_;
class STFriendInfo;
class STFriendInfoDefaultTypeInternal;
extern STFriendInfoDefaultTypeInternal _STFriendInfo_default_instance_;
class STPlayerSnName;
class STPlayerSnNameDefaultTypeInternal;
extern STPlayerSnNameDefaultTypeInternal _STPlayerSnName_default_instance_;
class SavePlayer;
class SavePlayerDefaultTypeInternal;
extern SavePlayerDefaultTypeInternal _SavePlayer_default_instance_;
class SelectPlayer;
class SelectPlayerDefaultTypeInternal;
extern SelectPlayerDefaultTypeInternal _SelectPlayer_default_instance_;
class SelectPlayerRs;
class SelectPlayerRsDefaultTypeInternal;
extern SelectPlayerRsDefaultTypeInternal _SelectPlayerRs_default_instance_;
class SyncChat;
class SyncChatDefaultTypeInternal;
extern SyncChatDefaultTypeInternal _SyncChat_default_instance_;
class SyncPlayer;
class SyncPlayerDefaultTypeInternal;
extern SyncPlayerDefaultTypeInternal _SyncPlayer_default_instance_;
class SyncPlayerProperty;
class SyncPlayerPropertyDefaultTypeInternal;
extern SyncPlayerPropertyDefaultTypeInternal _SyncPlayerProperty_default_instance_;
class SyncPlayerPropertyList;
class SyncPlayerPropertyListDefaultTypeInternal;
extern SyncPlayerPropertyListDefaultTypeInternal _SyncPlayerPropertyList_default_instance_;
class SyncWorldAction;
class SyncWorldActionDefaultTypeInternal;
extern SyncWorldActionDefaultTypeInternal _SyncWorldAction_default_instance_;
class SyncWorldData;
class SyncWorldDataDefaultTypeInternal;
extern SyncWorldDataDefaultTypeInternal _SyncWorldData_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class TagValue;
class TagValueDefaultTypeInternal;
extern TagValueDefaultTypeInternal _TagValue_default_instance_;
class Teleport;
class TeleportDefaultTypeInternal;
extern TeleportDefaultTypeInternal _Teleport_default_instance_;
class TeleportAfter;
class TeleportAfterDefaultTypeInternal;
extern TeleportAfterDefaultTypeInternal _TeleportAfter_default_instance_;
class TokenInfo;
class TokenInfoDefaultTypeInternal;
extern TokenInfoDefaultTypeInternal _TokenInfo_default_instance_;
class WorldAction;
class WorldActionDefaultTypeInternal;
extern WorldActionDefaultTypeInternal _WorldAction_default_instance_;
class WorldActionRet;
class WorldActionRetDefaultTypeInternal;
extern WorldActionRetDefaultTypeInternal _WorldActionRet_default_instance_;
class WorldProxySyncToGather;
class WorldProxySyncToGatherDefaultTypeInternal;
extern WorldProxySyncToGatherDefaultTypeInternal _WorldProxySyncToGather_default_instance_;
class WorldSyncToGather;
class WorldSyncToGatherDefaultTypeInternal;
extern WorldSyncToGatherDefaultTypeInternal _WorldSyncToGather_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::AccountCheck* Arena::CreateMaybeMessage<::Proto::AccountCheck>(Arena*);
template<> ::Proto::AccountCheckRs* Arena::CreateMaybeMessage<::Proto::AccountCheckRs>(Arena*);
template<> ::Proto::AddExp* Arena::CreateMaybeMessage<::Proto::AddExp>(Arena*);
template<> ::Proto::AddExpRet* Arena::CreateMaybeMessage<::Proto::AddExpRet>(Arena*);
template<> ::Proto::AddFriend* Arena::CreateMaybeMessage<::Proto::AddFriend>(Arena*);
template<> ::Proto::AddFriendRet* Arena::CreateMaybeMessage<::Proto::AddFriendRet>(Arena*);
template<> ::Proto::AddItem* Arena::CreateMaybeMessage<::Proto::AddItem>(Arena*);
template<> ::Proto::AddItemRet* Arena::CreateMaybeMessage<::Proto::AddItemRet>(Arena*);
template<> ::Proto::AppInfoListSync* Arena::CreateMaybeMessage<::Proto::AppInfoListSync>(Arena*);
template<> ::Proto::AppInfoSync* Arena::CreateMaybeMessage<::Proto::AppInfoSync>(Arena*);
template<> ::Proto::AppRegister* Arena::CreateMaybeMessage<::Proto::AppRegister>(Arena*);
template<> ::Proto::BattleAction* Arena::CreateMaybeMessage<::Proto::BattleAction>(Arena*);
template<> ::Proto::BattleActionList* Arena::CreateMaybeMessage<::Proto::BattleActionList>(Arena*);
template<> ::Proto::BattleBegin* Arena::CreateMaybeMessage<::Proto::BattleBegin>(Arena*);
template<> ::Proto::BattleCreate* Arena::CreateMaybeMessage<::Proto::BattleCreate>(Arena*);
template<> ::Proto::BattleDamage* Arena::CreateMaybeMessage<::Proto::BattleDamage>(Arena*);
template<> ::Proto::BattleEnd* Arena::CreateMaybeMessage<::Proto::BattleEnd>(Arena*);
template<> ::Proto::BattleJoin* Arena::CreateMaybeMessage<::Proto::BattleJoin>(Arena*);
template<> ::Proto::BattleRs* Arena::CreateMaybeMessage<::Proto::BattleRs>(Arena*);
template<> ::Proto::BattleSyncTeam* Arena::CreateMaybeMessage<::Proto::BattleSyncTeam>(Arena*);
template<> ::Proto::BattleTeam* Arena::CreateMaybeMessage<::Proto::BattleTeam>(Arena*);
template<> ::Proto::BattleView* Arena::CreateMaybeMessage<::Proto::BattleView>(Arena*);
template<> ::Proto::BoardcastLogin* Arena::CreateMaybeMessage<::Proto::BoardcastLogin>(Arena*);
template<> ::Proto::BroadcastCreateWorld* Arena::CreateMaybeMessage<::Proto::BroadcastCreateWorld>(Arena*);
template<> ::Proto::BroadcastCreateWorldProxy* Arena::CreateMaybeMessage<::Proto::BroadcastCreateWorldProxy>(Arena*);
template<> ::Proto::Chat* Arena::CreateMaybeMessage<::Proto::Chat>(Arena*);
template<> ::Proto::ChatRet* Arena::CreateMaybeMessage<::Proto::ChatRet>(Arena*);
template<> ::Proto::CmdApp* Arena::CreateMaybeMessage<::Proto::CmdApp>(Arena*);
template<> ::Proto::CmdThread* Arena::CreateMaybeMessage<::Proto::CmdThread>(Arena*);
template<> ::Proto::CreateComponent* Arena::CreateMaybeMessage<::Proto::CreateComponent>(Arena*);
template<> ::Proto::CreateComponentParam* Arena::CreateMaybeMessage<::Proto::CreateComponentParam>(Arena*);
template<> ::Proto::CreateSystem* Arena::CreateMaybeMessage<::Proto::CreateSystem>(Arena*);
template<> ::Proto::CreateWorld* Arena::CreateMaybeMessage<::Proto::CreateWorld>(Arena*);
template<> ::Proto::DBCreatePlayer* Arena::CreateMaybeMessage<::Proto::DBCreatePlayer>(Arena*);
template<> ::Proto::DBCreatePlayerRet* Arena::CreateMaybeMessage<::Proto::DBCreatePlayerRet>(Arena*);
template<> ::Proto::DBQueryPlayer* Arena::CreateMaybeMessage<::Proto::DBQueryPlayer>(Arena*);
template<> ::Proto::DBQueryPlayerRet* Arena::CreateMaybeMessage<::Proto::DBQueryPlayerRet>(Arena*);
template<> ::Proto::DBQueryWorld* Arena::CreateMaybeMessage<::Proto::DBQueryWorld>(Arena*);
template<> ::Proto::DBQueryWorldRet* Arena::CreateMaybeMessage<::Proto::DBQueryWorldRet>(Arena*);
template<> ::Proto::DBSaveList* Arena::CreateMaybeMessage<::Proto::DBSaveList>(Arena*);
template<> ::Proto::DBSaveListRet* Arena::CreateMaybeMessage<::Proto::DBSaveListRet>(Arena*);
template<> ::Proto::DBSavePlayer* Arena::CreateMaybeMessage<::Proto::DBSavePlayer>(Arena*);
template<> ::Proto::DBSavePlayerRet* Arena::CreateMaybeMessage<::Proto::DBSavePlayerRet>(Arena*);
template<> ::Proto::DBSaveWorld* Arena::CreateMaybeMessage<::Proto::DBSaveWorld>(Arena*);
template<> ::Proto::DBSaveWorldRet* Arena::CreateMaybeMessage<::Proto::DBSaveWorldRet>(Arena*);
template<> ::Proto::DelFriend* Arena::CreateMaybeMessage<::Proto::DelFriend>(Arena*);
template<> ::Proto::DelFriendRet* Arena::CreateMaybeMessage<::Proto::DelFriendRet>(Arena*);
template<> ::Proto::DestoryWorld* Arena::CreateMaybeMessage<::Proto::DestoryWorld>(Arena*);
template<> ::Proto::Dungeon* Arena::CreateMaybeMessage<::Proto::Dungeon>(Arena*);
template<> ::Proto::DungeonRs* Arena::CreateMaybeMessage<::Proto::DungeonRs>(Arena*);
template<> ::Proto::Efficiency* Arena::CreateMaybeMessage<::Proto::Efficiency>(Arena*);
template<> ::Proto::EnterHome* Arena::CreateMaybeMessage<::Proto::EnterHome>(Arena*);
template<> ::Proto::EnterWorld* Arena::CreateMaybeMessage<::Proto::EnterWorld>(Arena*);
template<> ::Proto::GameToken* Arena::CreateMaybeMessage<::Proto::GameToken>(Arena*);
template<> ::Proto::GetChatRecord* Arena::CreateMaybeMessage<::Proto::GetChatRecord>(Arena*);
template<> ::Proto::GetChatRecordRet* Arena::CreateMaybeMessage<::Proto::GetChatRecordRet>(Arena*);
template<> ::Proto::GetFriendList* Arena::CreateMaybeMessage<::Proto::GetFriendList>(Arena*);
template<> ::Proto::GetFriendListRet* Arena::CreateMaybeMessage<::Proto::GetFriendListRet>(Arena*);
template<> ::Proto::GetTargetInfo* Arena::CreateMaybeMessage<::Proto::GetTargetInfo>(Arena*);
template<> ::Proto::GetTargetInfoRet* Arena::CreateMaybeMessage<::Proto::GetTargetInfoRet>(Arena*);
template<> ::Proto::Http* Arena::CreateMaybeMessage<::Proto::Http>(Arena*);
template<> ::Proto::ItemChange* Arena::CreateMaybeMessage<::Proto::ItemChange>(Arena*);
template<> ::Proto::JoinGuild* Arena::CreateMaybeMessage<::Proto::JoinGuild>(Arena*);
template<> ::Proto::JoinGuildRet* Arena::CreateMaybeMessage<::Proto::JoinGuildRet>(Arena*);
template<> ::Proto::JoinTeam* Arena::CreateMaybeMessage<::Proto::JoinTeam>(Arena*);
template<> ::Proto::JoinTeamRet* Arena::CreateMaybeMessage<::Proto::JoinTeamRet>(Arena*);
template<> ::Proto::LoadAllAccount* Arena::CreateMaybeMessage<::Proto::LoadAllAccount>(Arena*);
template<> ::Proto::LoadAllAccountRet* Arena::CreateMaybeMessage<::Proto::LoadAllAccountRet>(Arena*);
template<> ::Proto::LoadAllPlayer* Arena::CreateMaybeMessage<::Proto::LoadAllPlayer>(Arena*);
template<> ::Proto::LoadAllPlayerRet* Arena::CreateMaybeMessage<::Proto::LoadAllPlayerRet>(Arena*);
template<> ::Proto::LoadPlayer* Arena::CreateMaybeMessage<::Proto::LoadPlayer>(Arena*);
template<> ::Proto::LoadPlayerRet* Arena::CreateMaybeMessage<::Proto::LoadPlayerRet>(Arena*);
template<> ::Proto::LoginByToken* Arena::CreateMaybeMessage<::Proto::LoginByToken>(Arena*);
template<> ::Proto::LoginByTokenRs* Arena::CreateMaybeMessage<::Proto::LoginByTokenRs>(Arena*);
template<> ::Proto::MoveByRotation* Arena::CreateMaybeMessage<::Proto::MoveByRotation>(Arena*);
template<> ::Proto::Mute* Arena::CreateMaybeMessage<::Proto::Mute>(Arena*);
template<> ::Proto::MuteRet* Arena::CreateMaybeMessage<::Proto::MuteRet>(Arena*);
template<> ::Proto::NetworkConnect* Arena::CreateMaybeMessage<::Proto::NetworkConnect>(Arena*);
template<> ::Proto::NetworkDisconnect* Arena::CreateMaybeMessage<::Proto::NetworkDisconnect>(Arena*);
template<> ::Proto::NullMsg* Arena::CreateMaybeMessage<::Proto::NullMsg>(Arena*);
template<> ::Proto::PlayerCreate* Arena::CreateMaybeMessage<::Proto::PlayerCreate>(Arena*);
template<> ::Proto::PlayerCreateRet* Arena::CreateMaybeMessage<::Proto::PlayerCreateRet>(Arena*);
template<> ::Proto::PlayerList* Arena::CreateMaybeMessage<::Proto::PlayerList>(Arena*);
template<> ::Proto::PlayerLittle* Arena::CreateMaybeMessage<::Proto::PlayerLittle>(Arena*);
template<> ::Proto::PlayerLogin* Arena::CreateMaybeMessage<::Proto::PlayerLogin>(Arena*);
template<> ::Proto::PlayerLoginRet* Arena::CreateMaybeMessage<::Proto::PlayerLoginRet>(Arena*);
template<> ::Proto::PushItemChange* Arena::CreateMaybeMessage<::Proto::PushItemChange>(Arena*);
template<> ::Proto::PushItemChange_ChangeShow* Arena::CreateMaybeMessage<::Proto::PushItemChange_ChangeShow>(Arena*);
template<> ::Proto::QueryAllPlayerName* Arena::CreateMaybeMessage<::Proto::QueryAllPlayerName>(Arena*);
template<> ::Proto::QueryAllPlayerNameRet* Arena::CreateMaybeMessage<::Proto::QueryAllPlayerNameRet>(Arena*);
template<> ::Proto::QueryDungeonBySn* Arena::CreateMaybeMessage<::Proto::QueryDungeonBySn>(Arena*);
template<> ::Proto::QueryDungeonBySnRs* Arena::CreateMaybeMessage<::Proto::QueryDungeonBySnRs>(Arena*);
template<> ::Proto::QueryPlayer* Arena::CreateMaybeMessage<::Proto::QueryPlayer>(Arena*);
template<> ::Proto::QueryPlayerList* Arena::CreateMaybeMessage<::Proto::QueryPlayerList>(Arena*);
template<> ::Proto::QueryPlayerRs* Arena::CreateMaybeMessage<::Proto::QueryPlayerRs>(Arena*);
template<> ::Proto::QueryWorldData* Arena::CreateMaybeMessage<::Proto::QueryWorldData>(Arena*);
template<> ::Proto::QueryWorldDataRet* Arena::CreateMaybeMessage<::Proto::QueryWorldDataRet>(Arena*);
template<> ::Proto::QuitGuild* Arena::CreateMaybeMessage<::Proto::QuitGuild>(Arena*);
template<> ::Proto::QuitGuildRet* Arena::CreateMaybeMessage<::Proto::QuitGuildRet>(Arena*);
template<> ::Proto::QuitTeam* Arena::CreateMaybeMessage<::Proto::QuitTeam>(Arena*);
template<> ::Proto::QuitTeamRet* Arena::CreateMaybeMessage<::Proto::QuitTeamRet>(Arena*);
template<> ::Proto::RefreshFriend* Arena::CreateMaybeMessage<::Proto::RefreshFriend>(Arena*);
template<> ::Proto::RefreshFriendRet* Arena::CreateMaybeMessage<::Proto::RefreshFriendRet>(Arena*);
template<> ::Proto::RemoveComponent* Arena::CreateMaybeMessage<::Proto::RemoveComponent>(Arena*);
template<> ::Proto::RemovePlayer* Arena::CreateMaybeMessage<::Proto::RemovePlayer>(Arena*);
template<> ::Proto::ReqCardLevelUp* Arena::CreateMaybeMessage<::Proto::ReqCardLevelUp>(Arena*);
template<> ::Proto::ReqCardQlt* Arena::CreateMaybeMessage<::Proto::ReqCardQlt>(Arena*);
template<> ::Proto::ReqCardSkillLvUp* Arena::CreateMaybeMessage<::Proto::ReqCardSkillLvUp>(Arena*);
template<> ::Proto::ReqCardStar* Arena::CreateMaybeMessage<::Proto::ReqCardStar>(Arena*);
template<> ::Proto::ReqeustEquipmentLvUp* Arena::CreateMaybeMessage<::Proto::ReqeustEquipmentLvUp>(Arena*);
template<> ::Proto::ReqeustSkillLvUp* Arena::CreateMaybeMessage<::Proto::ReqeustSkillLvUp>(Arena*);
template<> ::Proto::RequestChangeTeam* Arena::CreateMaybeMessage<::Proto::RequestChangeTeam>(Arena*);
template<> ::Proto::RequestCreateWorldProxy* Arena::CreateMaybeMessage<::Proto::RequestCreateWorldProxy>(Arena*);
template<> ::Proto::RequestGachaPull* Arena::CreateMaybeMessage<::Proto::RequestGachaPull>(Arena*);
template<> ::Proto::RequestSellItem* Arena::CreateMaybeMessage<::Proto::RequestSellItem>(Arena*);
template<> ::Proto::RequestSortBag* Arena::CreateMaybeMessage<::Proto::RequestSortBag>(Arena*);
template<> ::Proto::RequestSyncPlayer* Arena::CreateMaybeMessage<::Proto::RequestSyncPlayer>(Arena*);
template<> ::Proto::RequestUseItem* Arena::CreateMaybeMessage<::Proto::RequestUseItem>(Arena*);
template<> ::Proto::RequestWorld* Arena::CreateMaybeMessage<::Proto::RequestWorld>(Arena*);
template<> ::Proto::ResCardLevel* Arena::CreateMaybeMessage<::Proto::ResCardLevel>(Arena*);
template<> ::Proto::ResCardQlt* Arena::CreateMaybeMessage<::Proto::ResCardQlt>(Arena*);
template<> ::Proto::ResCardSkillLvUp* Arena::CreateMaybeMessage<::Proto::ResCardSkillLvUp>(Arena*);
template<> ::Proto::ResCardStar* Arena::CreateMaybeMessage<::Proto::ResCardStar>(Arena*);
template<> ::Proto::ResInten* Arena::CreateMaybeMessage<::Proto::ResInten>(Arena*);
template<> ::Proto::ReseponseChangeTeam* Arena::CreateMaybeMessage<::Proto::ReseponseChangeTeam>(Arena*);
template<> ::Proto::ResponseEquipmentLvUp* Arena::CreateMaybeMessage<::Proto::ResponseEquipmentLvUp>(Arena*);
template<> ::Proto::ResponseGachaPull* Arena::CreateMaybeMessage<::Proto::ResponseGachaPull>(Arena*);
template<> ::Proto::ResponseSellItem* Arena::CreateMaybeMessage<::Proto::ResponseSellItem>(Arena*);
template<> ::Proto::ResponseSkillLvUp* Arena::CreateMaybeMessage<::Proto::ResponseSkillLvUp>(Arena*);
template<> ::Proto::ResponseSortBag* Arena::CreateMaybeMessage<::Proto::ResponseSortBag>(Arena*);
template<> ::Proto::ResponseUseItem* Arena::CreateMaybeMessage<::Proto::ResponseUseItem>(Arena*);
template<> ::Proto::ReuqestGMAddItem* Arena::CreateMaybeMessage<::Proto::ReuqestGMAddItem>(Arena*);
template<> ::Proto::RobotCreate* Arena::CreateMaybeMessage<::Proto::RobotCreate>(Arena*);
template<> ::Proto::RobotState* Arena::CreateMaybeMessage<::Proto::RobotState>(Arena*);
template<> ::Proto::RobotSyncState* Arena::CreateMaybeMessage<::Proto::RobotSyncState>(Arena*);
template<> ::Proto::Role* Arena::CreateMaybeMessage<::Proto::Role>(Arena*);
template<> ::Proto::RoleAppear* Arena::CreateMaybeMessage<::Proto::RoleAppear>(Arena*);
template<> ::Proto::RoleDisAppear* Arena::CreateMaybeMessage<::Proto::RoleDisAppear>(Arena*);
template<> ::Proto::STChatInfo* Arena::CreateMaybeMessage<::Proto::STChatInfo>(Arena*);
template<> ::Proto::STFriendInfo* Arena::CreateMaybeMessage<::Proto::STFriendInfo>(Arena*);
template<> ::Proto::STPlayerSnName* Arena::CreateMaybeMessage<::Proto::STPlayerSnName>(Arena*);
template<> ::Proto::SavePlayer* Arena::CreateMaybeMessage<::Proto::SavePlayer>(Arena*);
template<> ::Proto::SelectPlayer* Arena::CreateMaybeMessage<::Proto::SelectPlayer>(Arena*);
template<> ::Proto::SelectPlayerRs* Arena::CreateMaybeMessage<::Proto::SelectPlayerRs>(Arena*);
template<> ::Proto::SyncChat* Arena::CreateMaybeMessage<::Proto::SyncChat>(Arena*);
template<> ::Proto::SyncPlayer* Arena::CreateMaybeMessage<::Proto::SyncPlayer>(Arena*);
template<> ::Proto::SyncPlayerProperty* Arena::CreateMaybeMessage<::Proto::SyncPlayerProperty>(Arena*);
template<> ::Proto::SyncPlayerPropertyList* Arena::CreateMaybeMessage<::Proto::SyncPlayerPropertyList>(Arena*);
template<> ::Proto::SyncWorldAction* Arena::CreateMaybeMessage<::Proto::SyncWorldAction>(Arena*);
template<> ::Proto::SyncWorldData* Arena::CreateMaybeMessage<::Proto::SyncWorldData>(Arena*);
template<> ::Proto::Tag* Arena::CreateMaybeMessage<::Proto::Tag>(Arena*);
template<> ::Proto::TagValue* Arena::CreateMaybeMessage<::Proto::TagValue>(Arena*);
template<> ::Proto::Teleport* Arena::CreateMaybeMessage<::Proto::Teleport>(Arena*);
template<> ::Proto::TeleportAfter* Arena::CreateMaybeMessage<::Proto::TeleportAfter>(Arena*);
template<> ::Proto::TokenInfo* Arena::CreateMaybeMessage<::Proto::TokenInfo>(Arena*);
template<> ::Proto::WorldAction* Arena::CreateMaybeMessage<::Proto::WorldAction>(Arena*);
template<> ::Proto::WorldActionRet* Arena::CreateMaybeMessage<::Proto::WorldActionRet>(Arena*);
template<> ::Proto::WorldProxySyncToGather* Arena::CreateMaybeMessage<::Proto::WorldProxySyncToGather>(Arena*);
template<> ::Proto::WorldSyncToGather* Arena::CreateMaybeMessage<::Proto::WorldSyncToGather>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum CmdThread_CmdType : int {
  CmdThread_CmdType_Entity = 0,
  CmdThread_CmdType_Pool = 1,
  CmdThread_CmdType_Connect = 2,
  CmdThread_CmdType_CmdThread_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdThread_CmdType_CmdThread_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdThread_CmdType_IsValid(int value);
constexpr CmdThread_CmdType CmdThread_CmdType_CmdType_MIN = CmdThread_CmdType_Entity;
constexpr CmdThread_CmdType CmdThread_CmdType_CmdType_MAX = CmdThread_CmdType_Connect;
constexpr int CmdThread_CmdType_CmdType_ARRAYSIZE = CmdThread_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdThread_CmdType_descriptor();
template<typename T>
inline const std::string& CmdThread_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdThread_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdThread_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdThread_CmdType_descriptor(), enum_t_value);
}
inline bool CmdThread_CmdType_Parse(
    const std::string& name, CmdThread_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdThread_CmdType>(
    CmdThread_CmdType_descriptor(), name, value);
}
enum CmdApp_CmdType : int {
  CmdApp_CmdType_Info = 0,
  CmdApp_CmdType_CmdApp_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdApp_CmdType_CmdApp_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdApp_CmdType_IsValid(int value);
constexpr CmdApp_CmdType CmdApp_CmdType_CmdType_MIN = CmdApp_CmdType_Info;
constexpr CmdApp_CmdType CmdApp_CmdType_CmdType_MAX = CmdApp_CmdType_Info;
constexpr int CmdApp_CmdType_CmdType_ARRAYSIZE = CmdApp_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdApp_CmdType_descriptor();
template<typename T>
inline const std::string& CmdApp_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdApp_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdApp_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdApp_CmdType_descriptor(), enum_t_value);
}
inline bool CmdApp_CmdType_Parse(
    const std::string& name, CmdApp_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdApp_CmdType>(
    CmdApp_CmdType_descriptor(), name, value);
}
enum CreateComponentParam_ParamType : int {
  CreateComponentParam_ParamType_Int = 0,
  CreateComponentParam_ParamType_String = 1,
  CreateComponentParam_ParamType_UInt64 = 2,
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateComponentParam_ParamType_IsValid(int value);
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MIN = CreateComponentParam_ParamType_Int;
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MAX = CreateComponentParam_ParamType_UInt64;
constexpr int CreateComponentParam_ParamType_ParamType_ARRAYSIZE = CreateComponentParam_ParamType_ParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateComponentParam_ParamType_descriptor();
template<typename T>
inline const std::string& CreateComponentParam_ParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateComponentParam_ParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateComponentParam_ParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateComponentParam_ParamType_descriptor(), enum_t_value);
}
inline bool CreateComponentParam_ParamType_Parse(
    const std::string& name, CreateComponentParam_ParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateComponentParam_ParamType>(
    CreateComponentParam_ParamType_descriptor(), name, value);
}
enum SelectPlayerRs_SelectPlayerReturnCode : int {
  SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK = 0,
  SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound = 1,
  SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerRs_SelectPlayerReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerRs_SelectPlayerReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelectPlayerRs_SelectPlayerReturnCode_IsValid(int value);
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MIN = SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK;
constexpr SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX = SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound;
constexpr int SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_ARRAYSIZE = SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectPlayerRs_SelectPlayerReturnCode_descriptor();
template<typename T>
inline const std::string& SelectPlayerRs_SelectPlayerReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectPlayerRs_SelectPlayerReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectPlayerRs_SelectPlayerReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectPlayerRs_SelectPlayerReturnCode_descriptor(), enum_t_value);
}
inline bool SelectPlayerRs_SelectPlayerReturnCode_Parse(
    const std::string& name, SelectPlayerRs_SelectPlayerReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectPlayerRs_SelectPlayerReturnCode>(
    SelectPlayerRs_SelectPlayerReturnCode_descriptor(), name, value);
}
enum GameToken_ReturnCode : int {
  GameToken_ReturnCode_GameToken_OK = 0,
  GameToken_ReturnCode_GameToken_NO_GAME = 1,
  GameToken_ReturnCode_GameToken_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameToken_ReturnCode_GameToken_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameToken_ReturnCode_IsValid(int value);
constexpr GameToken_ReturnCode GameToken_ReturnCode_ReturnCode_MIN = GameToken_ReturnCode_GameToken_OK;
constexpr GameToken_ReturnCode GameToken_ReturnCode_ReturnCode_MAX = GameToken_ReturnCode_GameToken_NO_GAME;
constexpr int GameToken_ReturnCode_ReturnCode_ARRAYSIZE = GameToken_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameToken_ReturnCode_descriptor();
template<typename T>
inline const std::string& GameToken_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameToken_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameToken_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameToken_ReturnCode_descriptor(), enum_t_value);
}
inline bool GameToken_ReturnCode_Parse(
    const std::string& name, GameToken_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameToken_ReturnCode>(
    GameToken_ReturnCode_descriptor(), name, value);
}
enum LoginByTokenRs_ReturnCode : int {
  LoginByTokenRs_ReturnCode_LGRC_OK = 0,
  LoginByTokenRs_ReturnCode_LGRC_UNKONWN = 1,
  LoginByTokenRs_ReturnCode_LGRC_NOT_FOUND_ACCOUNT = 2,
  LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG = 3,
  LoginByTokenRs_ReturnCode_LoginByTokenRs_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginByTokenRs_ReturnCode_LoginByTokenRs_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginByTokenRs_ReturnCode_IsValid(int value);
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs_ReturnCode_ReturnCode_MIN = LoginByTokenRs_ReturnCode_LGRC_OK;
constexpr LoginByTokenRs_ReturnCode LoginByTokenRs_ReturnCode_ReturnCode_MAX = LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG;
constexpr int LoginByTokenRs_ReturnCode_ReturnCode_ARRAYSIZE = LoginByTokenRs_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginByTokenRs_ReturnCode_descriptor();
template<typename T>
inline const std::string& LoginByTokenRs_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginByTokenRs_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginByTokenRs_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginByTokenRs_ReturnCode_descriptor(), enum_t_value);
}
inline bool LoginByTokenRs_ReturnCode_Parse(
    const std::string& name, LoginByTokenRs_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginByTokenRs_ReturnCode>(
    LoginByTokenRs_ReturnCode_descriptor(), name, value);
}
enum QueryDungeonBySnRs_ReturnCode : int {
  QueryDungeonBySnRs_ReturnCode_QueryWorld_OK = 0,
  QueryDungeonBySnRs_ReturnCode_QueryWorld_Failed = 1,
  QueryDungeonBySnRs_ReturnCode_QueryDungeonBySnRs_ReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QueryDungeonBySnRs_ReturnCode_QueryDungeonBySnRs_ReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QueryDungeonBySnRs_ReturnCode_IsValid(int value);
constexpr QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs_ReturnCode_ReturnCode_MIN = QueryDungeonBySnRs_ReturnCode_QueryWorld_OK;
constexpr QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs_ReturnCode_ReturnCode_MAX = QueryDungeonBySnRs_ReturnCode_QueryWorld_Failed;
constexpr int QueryDungeonBySnRs_ReturnCode_ReturnCode_ARRAYSIZE = QueryDungeonBySnRs_ReturnCode_ReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryDungeonBySnRs_ReturnCode_descriptor();
template<typename T>
inline const std::string& QueryDungeonBySnRs_ReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryDungeonBySnRs_ReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryDungeonBySnRs_ReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryDungeonBySnRs_ReturnCode_descriptor(), enum_t_value);
}
inline bool QueryDungeonBySnRs_ReturnCode_Parse(
    const std::string& name, QueryDungeonBySnRs_ReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryDungeonBySnRs_ReturnCode>(
    QueryDungeonBySnRs_ReturnCode_descriptor(), name, value);
}
enum SyncPlayerProperty_PlayerPropertyType : int {
  SyncPlayerProperty_PlayerPropertyType_Level = 0,
  SyncPlayerProperty_PlayerPropertyType_Exp = 1,
  SyncPlayerProperty_PlayerPropertyType_Gold = 2,
  SyncPlayerProperty_PlayerPropertyType_Diamond = 3,
  SyncPlayerProperty_PlayerPropertyType_SyncPlayerProperty_PlayerPropertyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SyncPlayerProperty_PlayerPropertyType_SyncPlayerProperty_PlayerPropertyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SyncPlayerProperty_PlayerPropertyType_IsValid(int value);
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_MIN = SyncPlayerProperty_PlayerPropertyType_Level;
constexpr SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_MAX = SyncPlayerProperty_PlayerPropertyType_Diamond;
constexpr int SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_ARRAYSIZE = SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SyncPlayerProperty_PlayerPropertyType_descriptor();
template<typename T>
inline const std::string& SyncPlayerProperty_PlayerPropertyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncPlayerProperty_PlayerPropertyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncPlayerProperty_PlayerPropertyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SyncPlayerProperty_PlayerPropertyType_descriptor(), enum_t_value);
}
inline bool SyncPlayerProperty_PlayerPropertyType_Parse(
    const std::string& name, SyncPlayerProperty_PlayerPropertyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SyncPlayerProperty_PlayerPropertyType>(
    SyncPlayerProperty_PlayerPropertyType_descriptor(), name, value);
}
enum ResCardLevel_ResCode : int {
  ResCardLevel_ResCode_succeed = 0,
  ResCardLevel_ResCode_playerlevellimit = 1,
  ResCardLevel_ResCode_noitem = 2,
  ResCardLevel_ResCode_cardlevelmax = 3,
  ResCardLevel_ResCode_notReachQlt = 4,
  ResCardLevel_ResCode_error = 5,
  ResCardLevel_ResCode_ResCardLevel_ResCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResCardLevel_ResCode_ResCardLevel_ResCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResCardLevel_ResCode_IsValid(int value);
constexpr ResCardLevel_ResCode ResCardLevel_ResCode_ResCode_MIN = ResCardLevel_ResCode_succeed;
constexpr ResCardLevel_ResCode ResCardLevel_ResCode_ResCode_MAX = ResCardLevel_ResCode_error;
constexpr int ResCardLevel_ResCode_ResCode_ARRAYSIZE = ResCardLevel_ResCode_ResCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCardLevel_ResCode_descriptor();
template<typename T>
inline const std::string& ResCardLevel_ResCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResCardLevel_ResCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResCardLevel_ResCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResCardLevel_ResCode_descriptor(), enum_t_value);
}
inline bool ResCardLevel_ResCode_Parse(
    const std::string& name, ResCardLevel_ResCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResCardLevel_ResCode>(
    ResCardLevel_ResCode_descriptor(), name, value);
}
enum ResCardStar_StarResCode : int {
  ResCardStar_StarResCode_SUCCED = 0,
  ResCardStar_StarResCode_NOTREACHLV = 1,
  ResCardStar_StarResCode_NOITEM = 2,
  ResCardStar_StarResCode_STARMAX = 3,
  ResCardStar_StarResCode_UNKNOWNERROR = 5,
  ResCardStar_StarResCode_ResCardStar_StarResCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResCardStar_StarResCode_ResCardStar_StarResCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResCardStar_StarResCode_IsValid(int value);
constexpr ResCardStar_StarResCode ResCardStar_StarResCode_StarResCode_MIN = ResCardStar_StarResCode_SUCCED;
constexpr ResCardStar_StarResCode ResCardStar_StarResCode_StarResCode_MAX = ResCardStar_StarResCode_UNKNOWNERROR;
constexpr int ResCardStar_StarResCode_StarResCode_ARRAYSIZE = ResCardStar_StarResCode_StarResCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCardStar_StarResCode_descriptor();
template<typename T>
inline const std::string& ResCardStar_StarResCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResCardStar_StarResCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResCardStar_StarResCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResCardStar_StarResCode_descriptor(), enum_t_value);
}
inline bool ResCardStar_StarResCode_Parse(
    const std::string& name, ResCardStar_StarResCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResCardStar_StarResCode>(
    ResCardStar_StarResCode_descriptor(), name, value);
}
enum ResCardQlt_ResQltCode : int {
  ResCardQlt_ResQltCode_SUCCED = 0,
  ResCardQlt_ResQltCode_NOTREACHSTAR = 1,
  ResCardQlt_ResQltCode_NOITEM = 2,
  ResCardQlt_ResQltCode_QltMAX = 3,
  ResCardQlt_ResQltCode_UNKNOWNERROR = 5,
  ResCardQlt_ResQltCode_ResCardQlt_ResQltCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResCardQlt_ResQltCode_ResCardQlt_ResQltCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResCardQlt_ResQltCode_IsValid(int value);
constexpr ResCardQlt_ResQltCode ResCardQlt_ResQltCode_ResQltCode_MIN = ResCardQlt_ResQltCode_SUCCED;
constexpr ResCardQlt_ResQltCode ResCardQlt_ResQltCode_ResQltCode_MAX = ResCardQlt_ResQltCode_UNKNOWNERROR;
constexpr int ResCardQlt_ResQltCode_ResQltCode_ARRAYSIZE = ResCardQlt_ResQltCode_ResQltCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResCardQlt_ResQltCode_descriptor();
template<typename T>
inline const std::string& ResCardQlt_ResQltCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResCardQlt_ResQltCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResCardQlt_ResQltCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResCardQlt_ResQltCode_descriptor(), enum_t_value);
}
inline bool ResCardQlt_ResQltCode_Parse(
    const std::string& name, ResCardQlt_ResQltCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResCardQlt_ResQltCode>(
    ResCardQlt_ResQltCode_descriptor(), name, value);
}
enum ResInten_ResIntenCode : int {
  ResInten_ResIntenCode_SUCCED = 0,
  ResInten_ResIntenCode_NOTREACHCONDITION = 1,
  ResInten_ResIntenCode_NOITEM = 2,
  ResInten_ResIntenCode_INTENMAX = 3,
  ResInten_ResIntenCode_UNKNOWNERROR = 5,
  ResInten_ResIntenCode_ResInten_ResIntenCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResInten_ResIntenCode_ResInten_ResIntenCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResInten_ResIntenCode_IsValid(int value);
constexpr ResInten_ResIntenCode ResInten_ResIntenCode_ResIntenCode_MIN = ResInten_ResIntenCode_SUCCED;
constexpr ResInten_ResIntenCode ResInten_ResIntenCode_ResIntenCode_MAX = ResInten_ResIntenCode_UNKNOWNERROR;
constexpr int ResInten_ResIntenCode_ResIntenCode_ARRAYSIZE = ResInten_ResIntenCode_ResIntenCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResInten_ResIntenCode_descriptor();
template<typename T>
inline const std::string& ResInten_ResIntenCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResInten_ResIntenCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResInten_ResIntenCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResInten_ResIntenCode_descriptor(), enum_t_value);
}
inline bool ResInten_ResIntenCode_Parse(
    const std::string& name, ResInten_ResIntenCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResInten_ResIntenCode>(
    ResInten_ResIntenCode_descriptor(), name, value);
}
enum RsCode : int {
  OK = 0,
  BattleCreateFailed = 1000,
  BattleCreateFailed_PlayerInBattle = 1001,
  BattleBeginFailed_PlayerNotInBattle = 1002,
  RsCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RsCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RsCode_IsValid(int value);
constexpr RsCode RsCode_MIN = OK;
constexpr RsCode RsCode_MAX = BattleBeginFailed_PlayerNotInBattle;
constexpr int RsCode_ARRAYSIZE = RsCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RsCode_descriptor();
template<typename T>
inline const std::string& RsCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RsCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RsCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RsCode_descriptor(), enum_t_value);
}
inline bool RsCode_Parse(
    const std::string& name, RsCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RsCode>(
    RsCode_descriptor(), name, value);
}
enum AccountCheckReturnCode : int {
  ARC_OK = 0,
  ARC_UNKONWN = 1,
  ARC_NOT_FOUND_ACCOUNT = 2,
  ARC_PASSWORD_WRONG = 3,
  ARC_LOGGING = 4,
  ARC_TIMEOUT = 5,
  ARC_ONLINE = 6,
  AccountCheckReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountCheckReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountCheckReturnCode_IsValid(int value);
constexpr AccountCheckReturnCode AccountCheckReturnCode_MIN = ARC_OK;
constexpr AccountCheckReturnCode AccountCheckReturnCode_MAX = ARC_ONLINE;
constexpr int AccountCheckReturnCode_ARRAYSIZE = AccountCheckReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountCheckReturnCode_descriptor();
template<typename T>
inline const std::string& AccountCheckReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountCheckReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountCheckReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountCheckReturnCode_descriptor(), enum_t_value);
}
inline bool AccountCheckReturnCode_Parse(
    const std::string& name, AccountCheckReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountCheckReturnCode>(
    AccountCheckReturnCode_descriptor(), name, value);
}
enum LoginHttpReturnCode : int {
  LHRC_OK = 0,
  LHRC_TIMEOUT = 1,
  LHRC_NOTFOUND = 2,
  LoginHttpReturnCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginHttpReturnCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginHttpReturnCode_IsValid(int value);
constexpr LoginHttpReturnCode LoginHttpReturnCode_MIN = LHRC_OK;
constexpr LoginHttpReturnCode LoginHttpReturnCode_MAX = LHRC_NOTFOUND;
constexpr int LoginHttpReturnCode_ARRAYSIZE = LoginHttpReturnCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginHttpReturnCode_descriptor();
template<typename T>
inline const std::string& LoginHttpReturnCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginHttpReturnCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginHttpReturnCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginHttpReturnCode_descriptor(), enum_t_value);
}
inline bool LoginHttpReturnCode_Parse(
    const std::string& name, LoginHttpReturnCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginHttpReturnCode>(
    LoginHttpReturnCode_descriptor(), name, value);
}
enum LoginRetCode : int {
  LRC_OK = 0,
  LRC_UNKONWN = 1,
  LRC_NOT_FOUND_ACCOUNT = 2,
  LRC_PASSWORD_WRONG = 3,
  LRC_LOGGING = 4,
  LRC_TIMEOUT = 5,
  LRC_ONLINE = 6,
  LoginRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginRetCode_IsValid(int value);
constexpr LoginRetCode LoginRetCode_MIN = LRC_OK;
constexpr LoginRetCode LoginRetCode_MAX = LRC_ONLINE;
constexpr int LoginRetCode_ARRAYSIZE = LoginRetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRetCode_descriptor();
template<typename T>
inline const std::string& LoginRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRetCode_descriptor(), enum_t_value);
}
inline bool LoginRetCode_Parse(
    const std::string& name, LoginRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRetCode>(
    LoginRetCode_descriptor(), name, value);
}
enum CreateRetCode : int {
  CRC_Create_OK = 0,
  CRC_Unkonwn = 1,
  CRC_Rename = 2,
  CreateRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateRetCode_IsValid(int value);
constexpr CreateRetCode CreateRetCode_MIN = CRC_Create_OK;
constexpr CreateRetCode CreateRetCode_MAX = CRC_Rename;
constexpr int CreateRetCode_ARRAYSIZE = CreateRetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateRetCode_descriptor();
template<typename T>
inline const std::string& CreateRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateRetCode_descriptor(), enum_t_value);
}
inline bool CreateRetCode_Parse(
    const std::string& name, CreateRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateRetCode>(
    CreateRetCode_descriptor(), name, value);
}
enum eChatChannel : int {
  ECC_System = 0,
  ECC_World = 1,
  ECC_Guild = 2,
  ECC_Team = 3,
  ECC_Private = 4,
  ECC_Battle = 5,
  eChatChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eChatChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eChatChannel_IsValid(int value);
constexpr eChatChannel eChatChannel_MIN = ECC_System;
constexpr eChatChannel eChatChannel_MAX = ECC_Battle;
constexpr int eChatChannel_ARRAYSIZE = eChatChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eChatChannel_descriptor();
template<typename T>
inline const std::string& eChatChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eChatChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eChatChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eChatChannel_descriptor(), enum_t_value);
}
inline bool eChatChannel_Parse(
    const std::string& name, eChatChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eChatChannel>(
    eChatChannel_descriptor(), name, value);
}
enum ESaveMode : int {
  ESM_Normal = 0,
  ESM_Immediately = 1,
  ESM_No = 2,
  ESaveMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ESaveMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ESaveMode_IsValid(int value);
constexpr ESaveMode ESaveMode_MIN = ESM_Normal;
constexpr ESaveMode ESaveMode_MAX = ESM_No;
constexpr int ESaveMode_ARRAYSIZE = ESaveMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESaveMode_descriptor();
template<typename T>
inline const std::string& ESaveMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESaveMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESaveMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESaveMode_descriptor(), enum_t_value);
}
inline bool ESaveMode_Parse(
    const std::string& name, ESaveMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESaveMode>(
    ESaveMode_descriptor(), name, value);
}
enum BattleActionType : int {
  Begin = 0,
  Run = 1,
  Attack = 2,
  Back = 3,
  Anim = 4,
  BattleActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BattleActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BattleActionType_IsValid(int value);
constexpr BattleActionType BattleActionType_MIN = Begin;
constexpr BattleActionType BattleActionType_MAX = Anim;
constexpr int BattleActionType_ARRAYSIZE = BattleActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BattleActionType_descriptor();
template<typename T>
inline const std::string& BattleActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BattleActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BattleActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BattleActionType_descriptor(), enum_t_value);
}
inline bool BattleActionType_Parse(
    const std::string& name, BattleActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BattleActionType>(
    BattleActionType_descriptor(), name, value);
}
// ===================================================================

class NullMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NullMsg) */ {
 public:
  NullMsg();
  virtual ~NullMsg();

  NullMsg(const NullMsg& from);
  NullMsg(NullMsg&& from) noexcept
    : NullMsg() {
    *this = ::std::move(from);
  }

  inline NullMsg& operator=(const NullMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullMsg& operator=(NullMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NullMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NullMsg* internal_default_instance() {
    return reinterpret_cast<const NullMsg*>(
               &_NullMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NullMsg& a, NullMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(NullMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullMsg* New() const final {
    return CreateMaybeMessage<NullMsg>(nullptr);
  }

  NullMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NullMsg& from);
  void MergeFrom(const NullMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NullMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.NullMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CmdThread :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CmdThread) */ {
 public:
  CmdThread();
  virtual ~CmdThread();

  CmdThread(const CmdThread& from);
  CmdThread(CmdThread&& from) noexcept
    : CmdThread() {
    *this = ::std::move(from);
  }

  inline CmdThread& operator=(const CmdThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdThread& operator=(CmdThread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdThread* internal_default_instance() {
    return reinterpret_cast<const CmdThread*>(
               &_CmdThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CmdThread& a, CmdThread& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdThread* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdThread* New() const final {
    return CreateMaybeMessage<CmdThread>(nullptr);
  }

  CmdThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdThread& from);
  void MergeFrom(const CmdThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CmdThread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdThread_CmdType CmdType;
  static constexpr CmdType Entity =
    CmdThread_CmdType_Entity;
  static constexpr CmdType Pool =
    CmdThread_CmdType_Pool;
  static constexpr CmdType Connect =
    CmdThread_CmdType_Connect;
  static inline bool CmdType_IsValid(int value) {
    return CmdThread_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CmdThread_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CmdThread_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CmdThread_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CmdThread_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CmdThread_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CmdThread_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
  };
  // .Proto.CmdThread.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::Proto::CmdThread_CmdType cmd_type() const;
  void set_cmd_type(::Proto::CmdThread_CmdType value);

  // @@protoc_insertion_point(class_scope:Proto.CmdThread)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CmdApp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CmdApp) */ {
 public:
  CmdApp();
  virtual ~CmdApp();

  CmdApp(const CmdApp& from);
  CmdApp(CmdApp&& from) noexcept
    : CmdApp() {
    *this = ::std::move(from);
  }

  inline CmdApp& operator=(const CmdApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdApp& operator=(CmdApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdApp* internal_default_instance() {
    return reinterpret_cast<const CmdApp*>(
               &_CmdApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CmdApp& a, CmdApp& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdApp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdApp* New() const final {
    return CreateMaybeMessage<CmdApp>(nullptr);
  }

  CmdApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdApp& from);
  void MergeFrom(const CmdApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CmdApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CmdApp_CmdType CmdType;
  static constexpr CmdType Info =
    CmdApp_CmdType_Info;
  static inline bool CmdType_IsValid(int value) {
    return CmdApp_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CmdApp_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CmdApp_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CmdApp_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CmdApp_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CmdApp_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CmdApp_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdTypeFieldNumber = 1,
  };
  // .Proto.CmdApp.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::Proto::CmdApp_CmdType cmd_type() const;
  void set_cmd_type(::Proto::CmdApp_CmdType value);

  // @@protoc_insertion_point(class_scope:Proto.CmdApp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Efficiency :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Efficiency) */ {
 public:
  Efficiency();
  virtual ~Efficiency();

  Efficiency(const Efficiency& from);
  Efficiency(Efficiency&& from) noexcept
    : Efficiency() {
    *this = ::std::move(from);
  }

  inline Efficiency& operator=(const Efficiency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Efficiency& operator=(Efficiency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Efficiency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Efficiency* internal_default_instance() {
    return reinterpret_cast<const Efficiency*>(
               &_Efficiency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Efficiency& a, Efficiency& b) {
    a.Swap(&b);
  }
  inline void Swap(Efficiency* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Efficiency* New() const final {
    return CreateMaybeMessage<Efficiency>(nullptr);
  }

  Efficiency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Efficiency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Efficiency& from);
  void MergeFrom(const Efficiency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Efficiency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Efficiency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadIdFieldNumber = 2,
    kTimeFieldNumber = 3,
    kThreadTypeFieldNumber = 1,
  };
  // string thread_id = 2;
  void clear_thread_id();
  const std::string& thread_id() const;
  void set_thread_id(const std::string& value);
  void set_thread_id(std::string&& value);
  void set_thread_id(const char* value);
  void set_thread_id(const char* value, size_t size);
  std::string* mutable_thread_id();
  std::string* release_thread_id();
  void set_allocated_thread_id(std::string* thread_id);

  // int64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Efficiency)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thread_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppRegister) */ {
 public:
  AppRegister();
  virtual ~AppRegister();

  AppRegister(const AppRegister& from);
  AppRegister(AppRegister&& from) noexcept
    : AppRegister() {
    *this = ::std::move(from);
  }

  inline AppRegister& operator=(const AppRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppRegister& operator=(AppRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppRegister* internal_default_instance() {
    return reinterpret_cast<const AppRegister*>(
               &_AppRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppRegister& a, AppRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(AppRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppRegister* New() const final {
    return CreateMaybeMessage<AppRegister>(nullptr);
  }

  AppRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppRegister& from);
  void MergeFrom(const AppRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AppRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppInfoSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppInfoSync) */ {
 public:
  AppInfoSync();
  virtual ~AppInfoSync();

  AppInfoSync(const AppInfoSync& from);
  AppInfoSync(AppInfoSync&& from) noexcept
    : AppInfoSync() {
    *this = ::std::move(from);
  }

  inline AppInfoSync& operator=(const AppInfoSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfoSync& operator=(AppInfoSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfoSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfoSync* internal_default_instance() {
    return reinterpret_cast<const AppInfoSync*>(
               &_AppInfoSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AppInfoSync& a, AppInfoSync& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfoSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfoSync* New() const final {
    return CreateMaybeMessage<AppInfoSync>(nullptr);
  }

  AppInfoSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfoSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfoSync& from);
  void MergeFrom(const AppInfoSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfoSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppInfoSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kAppTypeFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // int32 app_id = 1;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_type = 2;
  void clear_app_type();
  ::PROTOBUF_NAMESPACE_ID::int32 app_type() const;
  void set_app_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 3;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AppInfoSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AppInfoListSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AppInfoListSync) */ {
 public:
  AppInfoListSync();
  virtual ~AppInfoListSync();

  AppInfoListSync(const AppInfoListSync& from);
  AppInfoListSync(AppInfoListSync&& from) noexcept
    : AppInfoListSync() {
    *this = ::std::move(from);
  }

  inline AppInfoListSync& operator=(const AppInfoListSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfoListSync& operator=(AppInfoListSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfoListSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfoListSync* internal_default_instance() {
    return reinterpret_cast<const AppInfoListSync*>(
               &_AppInfoListSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AppInfoListSync& a, AppInfoListSync& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfoListSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfoListSync* New() const final {
    return CreateMaybeMessage<AppInfoListSync>(nullptr);
  }

  AppInfoListSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfoListSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfoListSync& from);
  void MergeFrom(const AppInfoListSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfoListSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AppInfoListSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 1,
  };
  // repeated .Proto.AppInfoSync apps = 1;
  int apps_size() const;
  void clear_apps();
  ::Proto::AppInfoSync* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >*
      mutable_apps();
  const ::Proto::AppInfoSync& apps(int index) const;
  ::Proto::AppInfoSync* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >&
      apps() const;

  // @@protoc_insertion_point(class_scope:Proto.AppInfoListSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync > apps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkDisconnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkDisconnect) */ {
 public:
  NetworkDisconnect();
  virtual ~NetworkDisconnect();

  NetworkDisconnect(const NetworkDisconnect& from);
  NetworkDisconnect(NetworkDisconnect&& from) noexcept
    : NetworkDisconnect() {
    *this = ::std::move(from);
  }

  inline NetworkDisconnect& operator=(const NetworkDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDisconnect& operator=(NetworkDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkDisconnect* internal_default_instance() {
    return reinterpret_cast<const NetworkDisconnect*>(
               &_NetworkDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetworkDisconnect& a, NetworkDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkDisconnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkDisconnect* New() const final {
    return CreateMaybeMessage<NetworkDisconnect>(nullptr);
  }

  NetworkDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDisconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkDisconnect& from);
  void MergeFrom(const NetworkDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDisconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkDisconnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkTypeFieldNumber = 1,
    kSocketFieldNumber = 2,
  };
  // int32 network_type = 1;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 socket = 2;
  void clear_socket();
  ::PROTOBUF_NAMESPACE_ID::int32 socket() const;
  void set_socket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkDisconnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 socket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TagValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TagValue) */ {
 public:
  TagValue();
  virtual ~TagValue();

  TagValue(const TagValue& from);
  TagValue(TagValue&& from) noexcept
    : TagValue() {
    *this = ::std::move(from);
  }

  inline TagValue& operator=(const TagValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagValue& operator=(TagValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagValue* internal_default_instance() {
    return reinterpret_cast<const TagValue*>(
               &_TagValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TagValue& a, TagValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TagValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagValue* New() const final {
    return CreateMaybeMessage<TagValue>(nullptr);
  }

  TagValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagValue& from);
  void MergeFrom(const TagValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TagValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueStrFieldNumber = 2,
    kValueInt64FieldNumber = 1,
  };
  // string value_str = 2;
  void clear_value_str();
  const std::string& value_str() const;
  void set_value_str(const std::string& value);
  void set_value_str(std::string&& value);
  void set_value_str(const char* value);
  void set_value_str(const char* value, size_t size);
  std::string* mutable_value_str();
  std::string* release_value_str();
  void set_allocated_value_str(std::string* value_str);

  // uint64 value_int64 = 1;
  void clear_value_int64();
  ::PROTOBUF_NAMESPACE_ID::uint64 value_int64() const;
  void set_value_int64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TagValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_int64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Tag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Tag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagValueFieldNumber = 2,
    kTagTypeFieldNumber = 1,
  };
  // .Proto.TagValue tag_value = 2;
  bool has_tag_value() const;
  void clear_tag_value();
  const ::Proto::TagValue& tag_value() const;
  ::Proto::TagValue* release_tag_value();
  ::Proto::TagValue* mutable_tag_value();
  void set_allocated_tag_value(::Proto::TagValue* tag_value);

  // int32 tag_type = 1;
  void clear_tag_type();
  ::PROTOBUF_NAMESPACE_ID::int32 tag_type() const;
  void set_tag_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Tag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::TagValue* tag_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 tag_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class NetworkConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.NetworkConnect) */ {
 public:
  NetworkConnect();
  virtual ~NetworkConnect();

  NetworkConnect(const NetworkConnect& from);
  NetworkConnect(NetworkConnect&& from) noexcept
    : NetworkConnect() {
    *this = ::std::move(from);
  }

  inline NetworkConnect& operator=(const NetworkConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConnect& operator=(NetworkConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkConnect* internal_default_instance() {
    return reinterpret_cast<const NetworkConnect*>(
               &_NetworkConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NetworkConnect& a, NetworkConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConnect* New() const final {
    return CreateMaybeMessage<NetworkConnect>(nullptr);
  }

  NetworkConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConnect& from);
  void MergeFrom(const NetworkConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.NetworkConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kIpFieldNumber = 3,
    kNetworkTypeFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // repeated .Proto.Tag tag = 2;
  int tag_size() const;
  void clear_tag();
  ::Proto::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Tag >*
      mutable_tag();
  const ::Proto::Tag& tag(int index) const;
  ::Proto::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Tag >&
      tag() const;

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // int32 network_type = 1;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.NetworkConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Http :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Http) */ {
 public:
  Http();
  virtual ~Http();

  Http(const Http& from);
  Http(Http&& from) noexcept
    : Http() {
    *this = ::std::move(from);
  }

  inline Http& operator=(const Http& from) {
    CopyFrom(from);
    return *this;
  }
  inline Http& operator=(Http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Http* internal_default_instance() {
    return reinterpret_cast<const Http*>(
               &_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Http& a, Http& b) {
    a.Swap(&b);
  }
  inline void Swap(Http* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Http* New() const final {
    return CreateMaybeMessage<Http>(nullptr);
  }

  Http* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Http>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Http& from);
  void MergeFrom(const Http& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Http* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Http";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // string body = 1;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // int32 status_code = 2;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Http)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponentParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponentParam) */ {
 public:
  CreateComponentParam();
  virtual ~CreateComponentParam();

  CreateComponentParam(const CreateComponentParam& from);
  CreateComponentParam(CreateComponentParam&& from) noexcept
    : CreateComponentParam() {
    *this = ::std::move(from);
  }

  inline CreateComponentParam& operator=(const CreateComponentParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponentParam& operator=(CreateComponentParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateComponentParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateComponentParam* internal_default_instance() {
    return reinterpret_cast<const CreateComponentParam*>(
               &_CreateComponentParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateComponentParam& a, CreateComponentParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponentParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateComponentParam* New() const final {
    return CreateMaybeMessage<CreateComponentParam>(nullptr);
  }

  CreateComponentParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateComponentParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateComponentParam& from);
  void MergeFrom(const CreateComponentParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponentParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponentParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateComponentParam_ParamType ParamType;
  static constexpr ParamType Int =
    CreateComponentParam_ParamType_Int;
  static constexpr ParamType String =
    CreateComponentParam_ParamType_String;
  static constexpr ParamType UInt64 =
    CreateComponentParam_ParamType_UInt64;
  static inline bool ParamType_IsValid(int value) {
    return CreateComponentParam_ParamType_IsValid(value);
  }
  static constexpr ParamType ParamType_MIN =
    CreateComponentParam_ParamType_ParamType_MIN;
  static constexpr ParamType ParamType_MAX =
    CreateComponentParam_ParamType_ParamType_MAX;
  static constexpr int ParamType_ARRAYSIZE =
    CreateComponentParam_ParamType_ParamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamType_descriptor() {
    return CreateComponentParam_ParamType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamType_Name.");
    return CreateComponentParam_ParamType_Name(enum_t_value);
  }
  static inline bool ParamType_Parse(const std::string& name,
      ParamType* value) {
    return CreateComponentParam_ParamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringParamFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIntParamFieldNumber = 2,
    kUint64ParamFieldNumber = 4,
  };
  // string string_param = 3;
  void clear_string_param();
  const std::string& string_param() const;
  void set_string_param(const std::string& value);
  void set_string_param(std::string&& value);
  void set_string_param(const char* value);
  void set_string_param(const char* value, size_t size);
  std::string* mutable_string_param();
  std::string* release_string_param();
  void set_allocated_string_param(std::string* string_param);

  // .Proto.CreateComponentParam.ParamType type = 1;
  void clear_type();
  ::Proto::CreateComponentParam_ParamType type() const;
  void set_type(::Proto::CreateComponentParam_ParamType value);

  // int32 int_param = 2;
  void clear_int_param();
  ::PROTOBUF_NAMESPACE_ID::int32 int_param() const;
  void set_int_param(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 uint64_param = 4;
  void clear_uint64_param();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_param() const;
  void set_uint64_param(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateComponentParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_param_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_param_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponent) */ {
 public:
  CreateComponent();
  virtual ~CreateComponent();

  CreateComponent(const CreateComponent& from);
  CreateComponent(CreateComponent&& from) noexcept
    : CreateComponent() {
    *this = ::std::move(from);
  }

  inline CreateComponent& operator=(const CreateComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponent& operator=(CreateComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateComponent* internal_default_instance() {
    return reinterpret_cast<const CreateComponent*>(
               &_CreateComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CreateComponent& a, CreateComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateComponent* New() const final {
    return CreateMaybeMessage<CreateComponent>(nullptr);
  }

  CreateComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateComponent& from);
  void MergeFrom(const CreateComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kClassNameFieldNumber = 2,
    kThreadTypeFieldNumber = 1,
    kIsToAllFieldNumber = 5,
    kSnFieldNumber = 4,
  };
  // repeated .Proto.CreateComponentParam params = 3;
  int params_size() const;
  void clear_params();
  ::Proto::CreateComponentParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
      mutable_params();
  const ::Proto::CreateComponentParam& params(int index) const;
  ::Proto::CreateComponentParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
      params() const;

  // string class_name = 2;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_to_all = 5;
  void clear_is_to_all();
  bool is_to_all() const;
  void set_is_to_all(bool value);

  // uint64 sn = 4;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  bool is_to_all_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RemoveComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RemoveComponent) */ {
 public:
  RemoveComponent();
  virtual ~RemoveComponent();

  RemoveComponent(const RemoveComponent& from);
  RemoveComponent(RemoveComponent&& from) noexcept
    : RemoveComponent() {
    *this = ::std::move(from);
  }

  inline RemoveComponent& operator=(const RemoveComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveComponent& operator=(RemoveComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveComponent* internal_default_instance() {
    return reinterpret_cast<const RemoveComponent*>(
               &_RemoveComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RemoveComponent& a, RemoveComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveComponent* New() const final {
    return CreateMaybeMessage<RemoveComponent>(nullptr);
  }

  RemoveComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveComponent& from);
  void MergeFrom(const RemoveComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RemoveComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RemoveComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateSystem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateSystem) */ {
 public:
  CreateSystem();
  virtual ~CreateSystem();

  CreateSystem(const CreateSystem& from);
  CreateSystem(CreateSystem&& from) noexcept
    : CreateSystem() {
    *this = ::std::move(from);
  }

  inline CreateSystem& operator=(const CreateSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSystem& operator=(CreateSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSystem* internal_default_instance() {
    return reinterpret_cast<const CreateSystem*>(
               &_CreateSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateSystem& a, CreateSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSystem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSystem* New() const final {
    return CreateMaybeMessage<CreateSystem>(nullptr);
  }

  CreateSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSystem& from);
  void MergeFrom(const CreateSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateSystem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemNameFieldNumber = 2,
    kThreadTypeFieldNumber = 1,
  };
  // string system_name = 2;
  void clear_system_name();
  const std::string& system_name() const;
  void set_system_name(const std::string& value);
  void set_system_name(std::string&& value);
  void set_system_name(const char* value);
  void set_system_name(const char* value, size_t size);
  std::string* mutable_system_name();
  std::string* release_system_name();
  void set_allocated_system_name(std::string* system_name);

  // int32 thread_type = 1;
  void clear_thread_type();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type() const;
  void set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateSystem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountCheck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountCheck) */ {
 public:
  AccountCheck();
  virtual ~AccountCheck();

  AccountCheck(const AccountCheck& from);
  AccountCheck(AccountCheck&& from) noexcept
    : AccountCheck() {
    *this = ::std::move(from);
  }

  inline AccountCheck& operator=(const AccountCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCheck& operator=(AccountCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCheck* internal_default_instance() {
    return reinterpret_cast<const AccountCheck*>(
               &_AccountCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AccountCheck& a, AccountCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCheck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCheck* New() const final {
    return CreateMaybeMessage<AccountCheck>(nullptr);
  }

  AccountCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCheck& from);
  void MergeFrom(const AccountCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountCheck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kUuidFieldNumber = 3,
    kServerIdFieldNumber = 1,
  };
  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AccountCheck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AccountCheckRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AccountCheckRs) */ {
 public:
  AccountCheckRs();
  virtual ~AccountCheckRs();

  AccountCheckRs(const AccountCheckRs& from);
  AccountCheckRs(AccountCheckRs&& from) noexcept
    : AccountCheckRs() {
    *this = ::std::move(from);
  }

  inline AccountCheckRs& operator=(const AccountCheckRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCheckRs& operator=(AccountCheckRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCheckRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCheckRs* internal_default_instance() {
    return reinterpret_cast<const AccountCheckRs*>(
               &_AccountCheckRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AccountCheckRs& a, AccountCheckRs& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCheckRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCheckRs* New() const final {
    return CreateMaybeMessage<AccountCheckRs>(nullptr);
  }

  AccountCheckRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCheckRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCheckRs& from);
  void MergeFrom(const AccountCheckRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCheckRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AccountCheckRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.AccountCheckReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::AccountCheckReturnCode return_code() const;
  void set_return_code(::Proto::AccountCheckReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.AccountCheckRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotState) */ {
 public:
  RobotState();
  virtual ~RobotState();

  RobotState(const RobotState& from);
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotState& operator=(RobotState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotState* New() const final {
    return CreateMaybeMessage<RobotState>(nullptr);
  }

  RobotState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotState& from);
  void MergeFrom(const RobotState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RobotState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotSyncState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotSyncState) */ {
 public:
  RobotSyncState();
  virtual ~RobotSyncState();

  RobotSyncState(const RobotSyncState& from);
  RobotSyncState(RobotSyncState&& from) noexcept
    : RobotSyncState() {
    *this = ::std::move(from);
  }

  inline RobotSyncState& operator=(const RobotSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotSyncState& operator=(RobotSyncState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotSyncState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotSyncState* internal_default_instance() {
    return reinterpret_cast<const RobotSyncState*>(
               &_RobotSyncState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RobotSyncState& a, RobotSyncState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotSyncState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotSyncState* New() const final {
    return CreateMaybeMessage<RobotSyncState>(nullptr);
  }

  RobotSyncState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotSyncState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotSyncState& from);
  void MergeFrom(const RobotSyncState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotSyncState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotSyncState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .Proto.RobotState states = 1;
  int states_size() const;
  void clear_states();
  ::Proto::RobotState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >*
      mutable_states();
  const ::Proto::RobotState& states(int index) const;
  ::Proto::RobotState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >&
      states() const;

  // @@protoc_insertion_point(class_scope:Proto.RobotSyncState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState > states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RobotCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RobotCreate) */ {
 public:
  RobotCreate();
  virtual ~RobotCreate();

  RobotCreate(const RobotCreate& from);
  RobotCreate(RobotCreate&& from) noexcept
    : RobotCreate() {
    *this = ::std::move(from);
  }

  inline RobotCreate& operator=(const RobotCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotCreate& operator=(RobotCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotCreate* internal_default_instance() {
    return reinterpret_cast<const RobotCreate*>(
               &_RobotCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RobotCreate& a, RobotCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotCreate* New() const final {
    return CreateMaybeMessage<RobotCreate>(nullptr);
  }

  RobotCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotCreate& from);
  void MergeFrom(const RobotCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RobotCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.RobotCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerLittle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerLittle) */ {
 public:
  PlayerLittle();
  virtual ~PlayerLittle();

  PlayerLittle(const PlayerLittle& from);
  PlayerLittle(PlayerLittle&& from) noexcept
    : PlayerLittle() {
    *this = ::std::move(from);
  }

  inline PlayerLittle& operator=(const PlayerLittle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLittle& operator=(PlayerLittle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLittle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLittle* internal_default_instance() {
    return reinterpret_cast<const PlayerLittle*>(
               &_PlayerLittle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PlayerLittle& a, PlayerLittle& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLittle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLittle* New() const final {
    return CreateMaybeMessage<PlayerLittle>(nullptr);
  }

  PlayerLittle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLittle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLittle& from);
  void MergeFrom(const PlayerLittle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLittle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerLittle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSnFieldNumber = 1,
    kLevelFieldNumber = 4,
    kTemplateIdFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 template_id = 5;
  void clear_template_id();
  ::PROTOBUF_NAMESPACE_ID::int32 template_id() const;
  void set_template_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerLittle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 template_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerList) */ {
 public:
  PlayerList();
  virtual ~PlayerList();

  PlayerList(const PlayerList& from);
  PlayerList(PlayerList&& from) noexcept
    : PlayerList() {
    *this = ::std::move(from);
  }

  inline PlayerList& operator=(const PlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerList& operator=(PlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerList* internal_default_instance() {
    return reinterpret_cast<const PlayerList*>(
               &_PlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PlayerList& a, PlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerList* New() const final {
    return CreateMaybeMessage<PlayerList>(nullptr);
  }

  PlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerList& from);
  void MergeFrom(const PlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // repeated .Proto.PlayerLittle player = 2;
  int player_size() const;
  void clear_player();
  ::Proto::PlayerLittle* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >*
      mutable_player();
  const ::Proto::PlayerLittle& player(int index) const;
  ::Proto::PlayerLittle* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >&
      player() const;

  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.PlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle > player_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayerList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayerList) */ {
 public:
  QueryPlayerList();
  virtual ~QueryPlayerList();

  QueryPlayerList(const QueryPlayerList& from);
  QueryPlayerList(QueryPlayerList&& from) noexcept
    : QueryPlayerList() {
    *this = ::std::move(from);
  }

  inline QueryPlayerList& operator=(const QueryPlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayerList& operator=(QueryPlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayerList* internal_default_instance() {
    return reinterpret_cast<const QueryPlayerList*>(
               &_QueryPlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryPlayerList& a, QueryPlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayerList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayerList* New() const final {
    return CreateMaybeMessage<QueryPlayerList>(nullptr);
  }

  QueryPlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayerList& from);
  void MergeFrom(const QueryPlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayerList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayerList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayer) */ {
 public:
  QueryPlayer();
  virtual ~QueryPlayer();

  QueryPlayer(const QueryPlayer& from);
  QueryPlayer(QueryPlayer&& from) noexcept
    : QueryPlayer() {
    *this = ::std::move(from);
  }

  inline QueryPlayer& operator=(const QueryPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayer& operator=(QueryPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayer* internal_default_instance() {
    return reinterpret_cast<const QueryPlayer*>(
               &_QueryPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QueryPlayer& a, QueryPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayer* New() const final {
    return CreateMaybeMessage<QueryPlayer>(nullptr);
  }

  QueryPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayer& from);
  void MergeFrom(const QueryPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerSnFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // uint64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryPlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryPlayerRs) */ {
 public:
  QueryPlayerRs();
  virtual ~QueryPlayerRs();

  QueryPlayerRs(const QueryPlayerRs& from);
  QueryPlayerRs(QueryPlayerRs&& from) noexcept
    : QueryPlayerRs() {
    *this = ::std::move(from);
  }

  inline QueryPlayerRs& operator=(const QueryPlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlayerRs& operator=(QueryPlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlayerRs* internal_default_instance() {
    return reinterpret_cast<const QueryPlayerRs*>(
               &_QueryPlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryPlayerRs& a, QueryPlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlayerRs* New() const final {
    return CreateMaybeMessage<QueryPlayerRs>(nullptr);
  }

  QueryPlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPlayerRs& from);
  void MergeFrom(const QueryPlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryPlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // @@protoc_insertion_point(class_scope:Proto.QueryPlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoadAllAccount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoadAllAccount) */ {
 public:
  LoadAllAccount();
  virtual ~LoadAllAccount();

  LoadAllAccount(const LoadAllAccount& from);
  LoadAllAccount(LoadAllAccount&& from) noexcept
    : LoadAllAccount() {
    *this = ::std::move(from);
  }

  inline LoadAllAccount& operator=(const LoadAllAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAllAccount& operator=(LoadAllAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadAllAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAllAccount* internal_default_instance() {
    return reinterpret_cast<const LoadAllAccount*>(
               &_LoadAllAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LoadAllAccount& a, LoadAllAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAllAccount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadAllAccount* New() const final {
    return CreateMaybeMessage<LoadAllAccount>(nullptr);
  }

  LoadAllAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadAllAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadAllAccount& from);
  void MergeFrom(const LoadAllAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAllAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoadAllAccount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // repeated int32 server_id = 1;
  int server_id_size() const;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id(int index) const;
  void set_server_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      server_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_server_id();

  // @@protoc_insertion_point(class_scope:Proto.LoadAllAccount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > server_id_;
  mutable std::atomic<int> _server_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoadAllAccountRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoadAllAccountRet) */ {
 public:
  LoadAllAccountRet();
  virtual ~LoadAllAccountRet();

  LoadAllAccountRet(const LoadAllAccountRet& from);
  LoadAllAccountRet(LoadAllAccountRet&& from) noexcept
    : LoadAllAccountRet() {
    *this = ::std::move(from);
  }

  inline LoadAllAccountRet& operator=(const LoadAllAccountRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAllAccountRet& operator=(LoadAllAccountRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadAllAccountRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAllAccountRet* internal_default_instance() {
    return reinterpret_cast<const LoadAllAccountRet*>(
               &_LoadAllAccountRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LoadAllAccountRet& a, LoadAllAccountRet& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAllAccountRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadAllAccountRet* New() const final {
    return CreateMaybeMessage<LoadAllAccountRet>(nullptr);
  }

  LoadAllAccountRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadAllAccountRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadAllAccountRet& from);
  void MergeFrom(const LoadAllAccountRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAllAccountRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoadAllAccountRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountListFieldNumber = 1,
  };
  // repeated .Proto.DBAccount account_list = 1;
  int account_list_size() const;
  void clear_account_list();
  ::Proto::DBAccount* mutable_account_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::DBAccount >*
      mutable_account_list();
  const ::Proto::DBAccount& account_list(int index) const;
  ::Proto::DBAccount* add_account_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::DBAccount >&
      account_list() const;

  // @@protoc_insertion_point(class_scope:Proto.LoadAllAccountRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::DBAccount > account_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoadAllPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoadAllPlayer) */ {
 public:
  LoadAllPlayer();
  virtual ~LoadAllPlayer();

  LoadAllPlayer(const LoadAllPlayer& from);
  LoadAllPlayer(LoadAllPlayer&& from) noexcept
    : LoadAllPlayer() {
    *this = ::std::move(from);
  }

  inline LoadAllPlayer& operator=(const LoadAllPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAllPlayer& operator=(LoadAllPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadAllPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAllPlayer* internal_default_instance() {
    return reinterpret_cast<const LoadAllPlayer*>(
               &_LoadAllPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LoadAllPlayer& a, LoadAllPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAllPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadAllPlayer* New() const final {
    return CreateMaybeMessage<LoadAllPlayer>(nullptr);
  }

  LoadAllPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadAllPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadAllPlayer& from);
  void MergeFrom(const LoadAllPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAllPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoadAllPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // repeated int32 server_id = 1;
  int server_id_size() const;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id(int index) const;
  void set_server_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      server_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_server_id();

  // @@protoc_insertion_point(class_scope:Proto.LoadAllPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > server_id_;
  mutable std::atomic<int> _server_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoadAllPlayerRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoadAllPlayerRet) */ {
 public:
  LoadAllPlayerRet();
  virtual ~LoadAllPlayerRet();

  LoadAllPlayerRet(const LoadAllPlayerRet& from);
  LoadAllPlayerRet(LoadAllPlayerRet&& from) noexcept
    : LoadAllPlayerRet() {
    *this = ::std::move(from);
  }

  inline LoadAllPlayerRet& operator=(const LoadAllPlayerRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadAllPlayerRet& operator=(LoadAllPlayerRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadAllPlayerRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAllPlayerRet* internal_default_instance() {
    return reinterpret_cast<const LoadAllPlayerRet*>(
               &_LoadAllPlayerRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LoadAllPlayerRet& a, LoadAllPlayerRet& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadAllPlayerRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadAllPlayerRet* New() const final {
    return CreateMaybeMessage<LoadAllPlayerRet>(nullptr);
  }

  LoadAllPlayerRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadAllPlayerRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadAllPlayerRet& from);
  void MergeFrom(const LoadAllPlayerRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadAllPlayerRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoadAllPlayerRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 1,
  };
  // repeated .Proto.Player player_list = 1;
  int player_list_size() const;
  void clear_player_list();
  ::Proto::Player* mutable_player_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >*
      mutable_player_list();
  const ::Proto::Player& player_list(int index) const;
  ::Proto::Player* add_player_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >&
      player_list() const;

  // @@protoc_insertion_point(class_scope:Proto.LoadAllPlayerRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player > player_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoadPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoadPlayer) */ {
 public:
  LoadPlayer();
  virtual ~LoadPlayer();

  LoadPlayer(const LoadPlayer& from);
  LoadPlayer(LoadPlayer&& from) noexcept
    : LoadPlayer() {
    *this = ::std::move(from);
  }

  inline LoadPlayer& operator=(const LoadPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPlayer& operator=(LoadPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPlayer* internal_default_instance() {
    return reinterpret_cast<const LoadPlayer*>(
               &_LoadPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LoadPlayer& a, LoadPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayer* New() const final {
    return CreateMaybeMessage<LoadPlayer>(nullptr);
  }

  LoadPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPlayer& from);
  void MergeFrom(const LoadPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoadPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPlayerSnFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // int64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.LoadPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoadPlayerRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoadPlayerRet) */ {
 public:
  LoadPlayerRet();
  virtual ~LoadPlayerRet();

  LoadPlayerRet(const LoadPlayerRet& from);
  LoadPlayerRet(LoadPlayerRet&& from) noexcept
    : LoadPlayerRet() {
    *this = ::std::move(from);
  }

  inline LoadPlayerRet& operator=(const LoadPlayerRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPlayerRet& operator=(LoadPlayerRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPlayerRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPlayerRet* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerRet*>(
               &_LoadPlayerRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LoadPlayerRet& a, LoadPlayerRet& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPlayerRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerRet* New() const final {
    return CreateMaybeMessage<LoadPlayerRet>(nullptr);
  }

  LoadPlayerRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPlayerRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPlayerRet& from);
  void MergeFrom(const LoadPlayerRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPlayerRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoadPlayerRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
  };
  // .Proto.Player player_info = 1;
  bool has_player_info() const;
  void clear_player_info();
  const ::Proto::Player& player_info() const;
  ::Proto::Player* release_player_info();
  ::Proto::Player* mutable_player_info();
  void set_allocated_player_info(::Proto::Player* player_info);

  // @@protoc_insertion_point(class_scope:Proto.LoadPlayerRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerLogin) */ {
 public:
  PlayerLogin();
  virtual ~PlayerLogin();

  PlayerLogin(const PlayerLogin& from);
  PlayerLogin(PlayerLogin&& from) noexcept
    : PlayerLogin() {
    *this = ::std::move(from);
  }

  inline PlayerLogin& operator=(const PlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLogin& operator=(PlayerLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLogin* internal_default_instance() {
    return reinterpret_cast<const PlayerLogin*>(
               &_PlayerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PlayerLogin& a, PlayerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLogin* New() const final {
    return CreateMaybeMessage<PlayerLogin>(nullptr);
  }

  PlayerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLogin& from);
  void MergeFrom(const PlayerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kUuidFieldNumber = 3,
    kServerIdFieldNumber = 1,
  };
  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerLoginRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerLoginRet) */ {
 public:
  PlayerLoginRet();
  virtual ~PlayerLoginRet();

  PlayerLoginRet(const PlayerLoginRet& from);
  PlayerLoginRet(PlayerLoginRet&& from) noexcept
    : PlayerLoginRet() {
    *this = ::std::move(from);
  }

  inline PlayerLoginRet& operator=(const PlayerLoginRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLoginRet& operator=(PlayerLoginRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerLoginRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginRet* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginRet*>(
               &_PlayerLoginRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PlayerLoginRet& a, PlayerLoginRet& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLoginRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginRet* New() const final {
    return CreateMaybeMessage<PlayerLoginRet>(nullptr);
  }

  PlayerLoginRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLoginRet& from);
  void MergeFrom(const PlayerLoginRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerLoginRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // .Proto.LoginRetCode ret = 1;
  void clear_ret();
  ::Proto::LoginRetCode ret() const;
  void set_ret(::Proto::LoginRetCode value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerLoginRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  int ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerCreate) */ {
 public:
  PlayerCreate();
  virtual ~PlayerCreate();

  PlayerCreate(const PlayerCreate& from);
  PlayerCreate(PlayerCreate&& from) noexcept
    : PlayerCreate() {
    *this = ::std::move(from);
  }

  inline PlayerCreate& operator=(const PlayerCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerCreate& operator=(PlayerCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreate* internal_default_instance() {
    return reinterpret_cast<const PlayerCreate*>(
               &_PlayerCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PlayerCreate& a, PlayerCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreate* New() const final {
    return CreateMaybeMessage<PlayerCreate>(nullptr);
  }

  PlayerCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerCreate& from);
  void MergeFrom(const PlayerCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTemplateIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 template_id = 3;
  void clear_template_id();
  ::PROTOBUF_NAMESPACE_ID::int32 template_id() const;
  void set_template_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 template_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PlayerCreateRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PlayerCreateRet) */ {
 public:
  PlayerCreateRet();
  virtual ~PlayerCreateRet();

  PlayerCreateRet(const PlayerCreateRet& from);
  PlayerCreateRet(PlayerCreateRet&& from) noexcept
    : PlayerCreateRet() {
    *this = ::std::move(from);
  }

  inline PlayerCreateRet& operator=(const PlayerCreateRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerCreateRet& operator=(PlayerCreateRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerCreateRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateRet* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateRet*>(
               &_PlayerCreateRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PlayerCreateRet& a, PlayerCreateRet& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerCreateRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateRet* New() const final {
    return CreateMaybeMessage<PlayerCreateRet>(nullptr);
  }

  PlayerCreateRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerCreateRet& from);
  void MergeFrom(const PlayerCreateRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PlayerCreateRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // .Proto.CreateRetCode ret = 1;
  void clear_ret();
  ::Proto::CreateRetCode ret() const;
  void set_ret(::Proto::CreateRetCode value);

  // @@protoc_insertion_point(class_scope:Proto.PlayerCreateRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  int ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SelectPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SelectPlayer) */ {
 public:
  SelectPlayer();
  virtual ~SelectPlayer();

  SelectPlayer(const SelectPlayer& from);
  SelectPlayer(SelectPlayer&& from) noexcept
    : SelectPlayer() {
    *this = ::std::move(from);
  }

  inline SelectPlayer& operator=(const SelectPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPlayer& operator=(SelectPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPlayer* internal_default_instance() {
    return reinterpret_cast<const SelectPlayer*>(
               &_SelectPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SelectPlayer& a, SelectPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPlayer* New() const final {
    return CreateMaybeMessage<SelectPlayer>(nullptr);
  }

  SelectPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectPlayer& from);
  void MergeFrom(const SelectPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SelectPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.SelectPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SelectPlayerRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SelectPlayerRs) */ {
 public:
  SelectPlayerRs();
  virtual ~SelectPlayerRs();

  SelectPlayerRs(const SelectPlayerRs& from);
  SelectPlayerRs(SelectPlayerRs&& from) noexcept
    : SelectPlayerRs() {
    *this = ::std::move(from);
  }

  inline SelectPlayerRs& operator=(const SelectPlayerRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPlayerRs& operator=(SelectPlayerRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectPlayerRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPlayerRs* internal_default_instance() {
    return reinterpret_cast<const SelectPlayerRs*>(
               &_SelectPlayerRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SelectPlayerRs& a, SelectPlayerRs& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPlayerRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPlayerRs* New() const final {
    return CreateMaybeMessage<SelectPlayerRs>(nullptr);
  }

  SelectPlayerRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPlayerRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectPlayerRs& from);
  void MergeFrom(const SelectPlayerRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectPlayerRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SelectPlayerRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SelectPlayerRs_SelectPlayerReturnCode SelectPlayerReturnCode;
  static constexpr SelectPlayerReturnCode SPRC_OK =
    SelectPlayerRs_SelectPlayerReturnCode_SPRC_OK;
  static constexpr SelectPlayerReturnCode SPRC_NotFound =
    SelectPlayerRs_SelectPlayerReturnCode_SPRC_NotFound;
  static inline bool SelectPlayerReturnCode_IsValid(int value) {
    return SelectPlayerRs_SelectPlayerReturnCode_IsValid(value);
  }
  static constexpr SelectPlayerReturnCode SelectPlayerReturnCode_MIN =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MIN;
  static constexpr SelectPlayerReturnCode SelectPlayerReturnCode_MAX =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_MAX;
  static constexpr int SelectPlayerReturnCode_ARRAYSIZE =
    SelectPlayerRs_SelectPlayerReturnCode_SelectPlayerReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectPlayerReturnCode_descriptor() {
    return SelectPlayerRs_SelectPlayerReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectPlayerReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectPlayerReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectPlayerReturnCode_Name.");
    return SelectPlayerRs_SelectPlayerReturnCode_Name(enum_t_value);
  }
  static inline bool SelectPlayerReturnCode_Parse(const std::string& name,
      SelectPlayerReturnCode* value) {
    return SelectPlayerRs_SelectPlayerReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::SelectPlayerRs_SelectPlayerReturnCode return_code() const;
  void set_return_code(::Proto::SelectPlayerRs_SelectPlayerReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.SelectPlayerRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SavePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SavePlayer) */ {
 public:
  SavePlayer();
  virtual ~SavePlayer();

  SavePlayer(const SavePlayer& from);
  SavePlayer(SavePlayer&& from) noexcept
    : SavePlayer() {
    *this = ::std::move(from);
  }

  inline SavePlayer& operator=(const SavePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePlayer& operator=(SavePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SavePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SavePlayer* internal_default_instance() {
    return reinterpret_cast<const SavePlayer*>(
               &_SavePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SavePlayer& a, SavePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SavePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavePlayer* New() const final {
    return CreateMaybeMessage<SavePlayer>(nullptr);
  }

  SavePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePlayer& from);
  void MergeFrom(const SavePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SavePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSaveModeFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // .Proto.ESaveMode save_mode = 1;
  void clear_save_mode();
  ::Proto::ESaveMode save_mode() const;
  void set_save_mode(::Proto::ESaveMode value);

  // @@protoc_insertion_point(class_scope:Proto.SavePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  int save_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldSyncToGather :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldSyncToGather) */ {
 public:
  WorldSyncToGather();
  virtual ~WorldSyncToGather();

  WorldSyncToGather(const WorldSyncToGather& from);
  WorldSyncToGather(WorldSyncToGather&& from) noexcept
    : WorldSyncToGather() {
    *this = ::std::move(from);
  }

  inline WorldSyncToGather& operator=(const WorldSyncToGather& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldSyncToGather& operator=(WorldSyncToGather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldSyncToGather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldSyncToGather* internal_default_instance() {
    return reinterpret_cast<const WorldSyncToGather*>(
               &_WorldSyncToGather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(WorldSyncToGather& a, WorldSyncToGather& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldSyncToGather* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldSyncToGather* New() const final {
    return CreateMaybeMessage<WorldSyncToGather>(nullptr);
  }

  WorldSyncToGather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldSyncToGather>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldSyncToGather& from);
  void MergeFrom(const WorldSyncToGather& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldSyncToGather* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldSyncToGather";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kWorldIdFieldNumber = 2,
    kOnlineFieldNumber = 3,
    kIsRemoveFieldNumber = 4,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 2;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 3;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_remove = 4;
  void clear_is_remove();
  bool is_remove() const;
  void set_is_remove(bool value);

  // @@protoc_insertion_point(class_scope:Proto.WorldSyncToGather)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  bool is_remove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldProxySyncToGather :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldProxySyncToGather) */ {
 public:
  WorldProxySyncToGather();
  virtual ~WorldProxySyncToGather();

  WorldProxySyncToGather(const WorldProxySyncToGather& from);
  WorldProxySyncToGather(WorldProxySyncToGather&& from) noexcept
    : WorldProxySyncToGather() {
    *this = ::std::move(from);
  }

  inline WorldProxySyncToGather& operator=(const WorldProxySyncToGather& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldProxySyncToGather& operator=(WorldProxySyncToGather&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldProxySyncToGather& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldProxySyncToGather* internal_default_instance() {
    return reinterpret_cast<const WorldProxySyncToGather*>(
               &_WorldProxySyncToGather_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(WorldProxySyncToGather& a, WorldProxySyncToGather& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldProxySyncToGather* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldProxySyncToGather* New() const final {
    return CreateMaybeMessage<WorldProxySyncToGather>(nullptr);
  }

  WorldProxySyncToGather* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldProxySyncToGather>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldProxySyncToGather& from);
  void MergeFrom(const WorldProxySyncToGather& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldProxySyncToGather* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldProxySyncToGather";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kIsRemoveFieldNumber = 2,
    kWorldIdFieldNumber = 3,
    kOnlineFieldNumber = 4,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool is_remove = 2;
  void clear_is_remove();
  bool is_remove() const;
  void set_is_remove(bool value);

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 4;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.WorldProxySyncToGather)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  bool is_remove_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GameToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GameToken) */ {
 public:
  GameToken();
  virtual ~GameToken();

  GameToken(const GameToken& from);
  GameToken(GameToken&& from) noexcept
    : GameToken() {
    *this = ::std::move(from);
  }

  inline GameToken& operator=(const GameToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameToken& operator=(GameToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameToken* internal_default_instance() {
    return reinterpret_cast<const GameToken*>(
               &_GameToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GameToken& a, GameToken& b) {
    a.Swap(&b);
  }
  inline void Swap(GameToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameToken* New() const final {
    return CreateMaybeMessage<GameToken>(nullptr);
  }

  GameToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameToken& from);
  void MergeFrom(const GameToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GameToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameToken_ReturnCode ReturnCode;
  static constexpr ReturnCode GameToken_OK =
    GameToken_ReturnCode_GameToken_OK;
  static constexpr ReturnCode GameToken_NO_GAME =
    GameToken_ReturnCode_GameToken_NO_GAME;
  static inline bool ReturnCode_IsValid(int value) {
    return GameToken_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    GameToken_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    GameToken_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    GameToken_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return GameToken_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return GameToken_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return GameToken_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kIpFieldNumber = 3,
    kChannelFieldNumber = 6,
    kUuidFieldNumber = 7,
    kReturnCodeFieldNumber = 1,
    kPortFieldNumber = 4,
    kServerIdFieldNumber = 5,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string channel = 6;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // string uuid = 7;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // .Proto.GameToken.ReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::GameToken_ReturnCode return_code() const;
  void set_return_code(::Proto::GameToken_ReturnCode value);

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 server_id = 5;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.GameToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  int return_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginByToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginByToken) */ {
 public:
  LoginByToken();
  virtual ~LoginByToken();

  LoginByToken(const LoginByToken& from);
  LoginByToken(LoginByToken&& from) noexcept
    : LoginByToken() {
    *this = ::std::move(from);
  }

  inline LoginByToken& operator=(const LoginByToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginByToken& operator=(LoginByToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginByToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginByToken* internal_default_instance() {
    return reinterpret_cast<const LoginByToken*>(
               &_LoginByToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LoginByToken& a, LoginByToken& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginByToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginByToken* New() const final {
    return CreateMaybeMessage<LoginByToken>(nullptr);
  }

  LoginByToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginByToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginByToken& from);
  void MergeFrom(const LoginByToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginByToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginByToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kUuidFieldNumber = 3,
    kAccountFieldNumber = 4,
    kTokenFieldNumber = 5,
    kServerIdFieldNumber = 1,
  };
  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // string account = 4;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string token = 5;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.LoginByToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LoginByTokenRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.LoginByTokenRs) */ {
 public:
  LoginByTokenRs();
  virtual ~LoginByTokenRs();

  LoginByTokenRs(const LoginByTokenRs& from);
  LoginByTokenRs(LoginByTokenRs&& from) noexcept
    : LoginByTokenRs() {
    *this = ::std::move(from);
  }

  inline LoginByTokenRs& operator=(const LoginByTokenRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginByTokenRs& operator=(LoginByTokenRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginByTokenRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginByTokenRs* internal_default_instance() {
    return reinterpret_cast<const LoginByTokenRs*>(
               &_LoginByTokenRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(LoginByTokenRs& a, LoginByTokenRs& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginByTokenRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginByTokenRs* New() const final {
    return CreateMaybeMessage<LoginByTokenRs>(nullptr);
  }

  LoginByTokenRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginByTokenRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginByTokenRs& from);
  void MergeFrom(const LoginByTokenRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginByTokenRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.LoginByTokenRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginByTokenRs_ReturnCode ReturnCode;
  static constexpr ReturnCode LGRC_OK =
    LoginByTokenRs_ReturnCode_LGRC_OK;
  static constexpr ReturnCode LGRC_UNKONWN =
    LoginByTokenRs_ReturnCode_LGRC_UNKONWN;
  static constexpr ReturnCode LGRC_NOT_FOUND_ACCOUNT =
    LoginByTokenRs_ReturnCode_LGRC_NOT_FOUND_ACCOUNT;
  static constexpr ReturnCode LGRC_TOKEN_WRONG =
    LoginByTokenRs_ReturnCode_LGRC_TOKEN_WRONG;
  static inline bool ReturnCode_IsValid(int value) {
    return LoginByTokenRs_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    LoginByTokenRs_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    LoginByTokenRs_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    LoginByTokenRs_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return LoginByTokenRs_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return LoginByTokenRs_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return LoginByTokenRs_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.LoginByTokenRs.ReturnCode return_code = 1;
  void clear_return_code();
  ::Proto::LoginByTokenRs_ReturnCode return_code() const;
  void set_return_code(::Proto::LoginByTokenRs_ReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.LoginByTokenRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TokenInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TokenInfo) */ {
 public:
  TokenInfo();
  virtual ~TokenInfo();

  TokenInfo(const TokenInfo& from);
  TokenInfo(TokenInfo&& from) noexcept
    : TokenInfo() {
    *this = ::std::move(from);
  }

  inline TokenInfo& operator=(const TokenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenInfo& operator=(TokenInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenInfo* internal_default_instance() {
    return reinterpret_cast<const TokenInfo*>(
               &_TokenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TokenInfo& a, TokenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenInfo* New() const final {
    return CreateMaybeMessage<TokenInfo>(nullptr);
  }

  TokenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenInfo& from);
  void MergeFrom(const TokenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TokenInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPlayerSnFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // uint64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TokenInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayer) */ {
 public:
  SyncPlayer();
  virtual ~SyncPlayer();

  SyncPlayer(const SyncPlayer& from);
  SyncPlayer(SyncPlayer&& from) noexcept
    : SyncPlayer() {
    *this = ::std::move(from);
  }

  inline SyncPlayer& operator=(const SyncPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayer& operator=(SyncPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayer* internal_default_instance() {
    return reinterpret_cast<const SyncPlayer*>(
               &_SyncPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SyncPlayer& a, SyncPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayer* New() const final {
    return CreateMaybeMessage<SyncPlayer>(nullptr);
  }

  SyncPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayer& from);
  void MergeFrom(const SyncPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPlayerFieldNumber = 3,
    kAppIdFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 3;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // int32 app_id = 1;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class EnterWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.EnterWorld) */ {
 public:
  EnterWorld();
  virtual ~EnterWorld();

  EnterWorld(const EnterWorld& from);
  EnterWorld(EnterWorld&& from) noexcept
    : EnterWorld() {
    *this = ::std::move(from);
  }

  inline EnterWorld& operator=(const EnterWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterWorld& operator=(EnterWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterWorld* internal_default_instance() {
    return reinterpret_cast<const EnterWorld*>(
               &_EnterWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(EnterWorld& a, EnterWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterWorld* New() const final {
    return CreateMaybeMessage<EnterWorld>(nullptr);
  }

  EnterWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterWorld& from);
  void MergeFrom(const EnterWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.EnterWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kWorldDataFieldNumber = 5,
    kWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // .Proto.Vector3 position = 3;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3& position() const;
  ::Proto::Vector3* release_position();
  ::Proto::Vector3* mutable_position();
  void set_allocated_position(::Proto::Vector3* position);

  // .Proto.Vector3 rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  const ::Proto::Vector3& rotation() const;
  ::Proto::Vector3* release_rotation();
  ::Proto::Vector3* mutable_rotation();
  void set_allocated_rotation(::Proto::Vector3* rotation);

  // .Proto.DBWorldData world_data = 5;
  bool has_world_data() const;
  void clear_world_data();
  const ::Proto::DBWorldData& world_data() const;
  ::Proto::DBWorldData* release_world_data();
  ::Proto::DBWorldData* mutable_world_data();
  void set_allocated_world_data(::Proto::DBWorldData* world_data);

  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.EnterWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3* position_;
  ::Proto::Vector3* rotation_;
  ::Proto::DBWorldData* world_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class EnterHome :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.EnterHome) */ {
 public:
  EnterHome();
  virtual ~EnterHome();

  EnterHome(const EnterHome& from);
  EnterHome(EnterHome&& from) noexcept
    : EnterHome() {
    *this = ::std::move(from);
  }

  inline EnterHome& operator=(const EnterHome& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterHome& operator=(EnterHome&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterHome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterHome* internal_default_instance() {
    return reinterpret_cast<const EnterHome*>(
               &_EnterHome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(EnterHome& a, EnterHome& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterHome* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterHome* New() const final {
    return CreateMaybeMessage<EnterHome>(nullptr);
  }

  EnterHome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterHome>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterHome& from);
  void MergeFrom(const EnterHome& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterHome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.EnterHome";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.EnterHome)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryDungeonBySn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryDungeonBySn) */ {
 public:
  QueryDungeonBySn();
  virtual ~QueryDungeonBySn();

  QueryDungeonBySn(const QueryDungeonBySn& from);
  QueryDungeonBySn(QueryDungeonBySn&& from) noexcept
    : QueryDungeonBySn() {
    *this = ::std::move(from);
  }

  inline QueryDungeonBySn& operator=(const QueryDungeonBySn& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDungeonBySn& operator=(QueryDungeonBySn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDungeonBySn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDungeonBySn* internal_default_instance() {
    return reinterpret_cast<const QueryDungeonBySn*>(
               &_QueryDungeonBySn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(QueryDungeonBySn& a, QueryDungeonBySn& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDungeonBySn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDungeonBySn* New() const final {
    return CreateMaybeMessage<QueryDungeonBySn>(nullptr);
  }

  QueryDungeonBySn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDungeonBySn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDungeonBySn& from);
  void MergeFrom(const QueryDungeonBySn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDungeonBySn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryDungeonBySn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryDungeonBySn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryDungeonBySnRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryDungeonBySnRs) */ {
 public:
  QueryDungeonBySnRs();
  virtual ~QueryDungeonBySnRs();

  QueryDungeonBySnRs(const QueryDungeonBySnRs& from);
  QueryDungeonBySnRs(QueryDungeonBySnRs&& from) noexcept
    : QueryDungeonBySnRs() {
    *this = ::std::move(from);
  }

  inline QueryDungeonBySnRs& operator=(const QueryDungeonBySnRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDungeonBySnRs& operator=(QueryDungeonBySnRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDungeonBySnRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDungeonBySnRs* internal_default_instance() {
    return reinterpret_cast<const QueryDungeonBySnRs*>(
               &_QueryDungeonBySnRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(QueryDungeonBySnRs& a, QueryDungeonBySnRs& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDungeonBySnRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDungeonBySnRs* New() const final {
    return CreateMaybeMessage<QueryDungeonBySnRs>(nullptr);
  }

  QueryDungeonBySnRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDungeonBySnRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDungeonBySnRs& from);
  void MergeFrom(const QueryDungeonBySnRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDungeonBySnRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryDungeonBySnRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef QueryDungeonBySnRs_ReturnCode ReturnCode;
  static constexpr ReturnCode QueryWorld_OK =
    QueryDungeonBySnRs_ReturnCode_QueryWorld_OK;
  static constexpr ReturnCode QueryWorld_Failed =
    QueryDungeonBySnRs_ReturnCode_QueryWorld_Failed;
  static inline bool ReturnCode_IsValid(int value) {
    return QueryDungeonBySnRs_ReturnCode_IsValid(value);
  }
  static constexpr ReturnCode ReturnCode_MIN =
    QueryDungeonBySnRs_ReturnCode_ReturnCode_MIN;
  static constexpr ReturnCode ReturnCode_MAX =
    QueryDungeonBySnRs_ReturnCode_ReturnCode_MAX;
  static constexpr int ReturnCode_ARRAYSIZE =
    QueryDungeonBySnRs_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReturnCode_descriptor() {
    return QueryDungeonBySnRs_ReturnCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReturnCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReturnCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReturnCode_Name.");
    return QueryDungeonBySnRs_ReturnCode_Name(enum_t_value);
  }
  static inline bool ReturnCode_Parse(const std::string& name,
      ReturnCode* value) {
    return QueryDungeonBySnRs_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kReturnCodeFieldNumber = 3,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
  void clear_return_code();
  ::Proto::QueryDungeonBySnRs_ReturnCode return_code() const;
  void set_return_code(::Proto::QueryDungeonBySnRs_ReturnCode value);

  // @@protoc_insertion_point(class_scope:Proto.QueryDungeonBySnRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestWorld) */ {
 public:
  RequestWorld();
  virtual ~RequestWorld();

  RequestWorld(const RequestWorld& from);
  RequestWorld(RequestWorld&& from) noexcept
    : RequestWorld() {
    *this = ::std::move(from);
  }

  inline RequestWorld& operator=(const RequestWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestWorld& operator=(RequestWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestWorld* internal_default_instance() {
    return reinterpret_cast<const RequestWorld*>(
               &_RequestWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(RequestWorld& a, RequestWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestWorld* New() const final {
    return CreateMaybeMessage<RequestWorld>(nullptr);
  }

  RequestWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestWorld& from);
  void MergeFrom(const RequestWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForPlayerFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // uint64 for_player = 2;
  void clear_for_player();
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player() const;
  void set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateWorld) */ {
 public:
  CreateWorld();
  virtual ~CreateWorld();

  CreateWorld(const CreateWorld& from);
  CreateWorld(CreateWorld&& from) noexcept
    : CreateWorld() {
    *this = ::std::move(from);
  }

  inline CreateWorld& operator=(const CreateWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorld& operator=(CreateWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWorld* internal_default_instance() {
    return reinterpret_cast<const CreateWorld*>(
               &_CreateWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreateWorld& a, CreateWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorld* New() const final {
    return CreateMaybeMessage<CreateWorld>(nullptr);
  }

  CreateWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorld& from);
  void MergeFrom(const CreateWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldIdFieldNumber = 1,
    kAliveFieldNumber = 2,
    kForPlayerFieldNumber = 3,
  };
  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 alive = 2;
  void clear_alive();
  ::PROTOBUF_NAMESPACE_ID::int32 alive() const;
  void set_alive(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 for_player = 3;
  void clear_for_player();
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player() const;
  void set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.CreateWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 alive_;
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DestoryWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DestoryWorld) */ {
 public:
  DestoryWorld();
  virtual ~DestoryWorld();

  DestoryWorld(const DestoryWorld& from);
  DestoryWorld(DestoryWorld&& from) noexcept
    : DestoryWorld() {
    *this = ::std::move(from);
  }

  inline DestoryWorld& operator=(const DestoryWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestoryWorld& operator=(DestoryWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestoryWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestoryWorld* internal_default_instance() {
    return reinterpret_cast<const DestoryWorld*>(
               &_DestoryWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DestoryWorld& a, DestoryWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(DestoryWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestoryWorld* New() const final {
    return CreateMaybeMessage<DestoryWorld>(nullptr);
  }

  DestoryWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestoryWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestoryWorld& from);
  void MergeFrom(const DestoryWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestoryWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DestoryWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 1,
    kForPlayerFieldNumber = 2,
  };
  // uint64 world_sn = 1;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 for_player = 2;
  void clear_for_player();
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player() const;
  void set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.DestoryWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadcastCreateWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BroadcastCreateWorld) */ {
 public:
  BroadcastCreateWorld();
  virtual ~BroadcastCreateWorld();

  BroadcastCreateWorld(const BroadcastCreateWorld& from);
  BroadcastCreateWorld(BroadcastCreateWorld&& from) noexcept
    : BroadcastCreateWorld() {
    *this = ::std::move(from);
  }

  inline BroadcastCreateWorld& operator=(const BroadcastCreateWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastCreateWorld& operator=(BroadcastCreateWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastCreateWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastCreateWorld* internal_default_instance() {
    return reinterpret_cast<const BroadcastCreateWorld*>(
               &_BroadcastCreateWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(BroadcastCreateWorld& a, BroadcastCreateWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastCreateWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastCreateWorld* New() const final {
    return CreateMaybeMessage<BroadcastCreateWorld>(nullptr);
  }

  BroadcastCreateWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastCreateWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastCreateWorld& from);
  void MergeFrom(const BroadcastCreateWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastCreateWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BroadcastCreateWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 2,
    kForPlayerFieldNumber = 4,
    kWorldIdFieldNumber = 1,
  };
  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 for_player = 4;
  void clear_for_player();
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player() const;
  void set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BroadcastCreateWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestCreateWorldProxy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestCreateWorldProxy) */ {
 public:
  RequestCreateWorldProxy();
  virtual ~RequestCreateWorldProxy();

  RequestCreateWorldProxy(const RequestCreateWorldProxy& from);
  RequestCreateWorldProxy(RequestCreateWorldProxy&& from) noexcept
    : RequestCreateWorldProxy() {
    *this = ::std::move(from);
  }

  inline RequestCreateWorldProxy& operator=(const RequestCreateWorldProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCreateWorldProxy& operator=(RequestCreateWorldProxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestCreateWorldProxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestCreateWorldProxy* internal_default_instance() {
    return reinterpret_cast<const RequestCreateWorldProxy*>(
               &_RequestCreateWorldProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(RequestCreateWorldProxy& a, RequestCreateWorldProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCreateWorldProxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestCreateWorldProxy* New() const final {
    return CreateMaybeMessage<RequestCreateWorldProxy>(nullptr);
  }

  RequestCreateWorldProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestCreateWorldProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestCreateWorldProxy& from);
  void MergeFrom(const RequestCreateWorldProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCreateWorldProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestCreateWorldProxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestCreateWorldProxy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadcastCreateWorldProxy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BroadcastCreateWorldProxy) */ {
 public:
  BroadcastCreateWorldProxy();
  virtual ~BroadcastCreateWorldProxy();

  BroadcastCreateWorldProxy(const BroadcastCreateWorldProxy& from);
  BroadcastCreateWorldProxy(BroadcastCreateWorldProxy&& from) noexcept
    : BroadcastCreateWorldProxy() {
    *this = ::std::move(from);
  }

  inline BroadcastCreateWorldProxy& operator=(const BroadcastCreateWorldProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastCreateWorldProxy& operator=(BroadcastCreateWorldProxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastCreateWorldProxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastCreateWorldProxy* internal_default_instance() {
    return reinterpret_cast<const BroadcastCreateWorldProxy*>(
               &_BroadcastCreateWorldProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(BroadcastCreateWorldProxy& a, BroadcastCreateWorldProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastCreateWorldProxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastCreateWorldProxy* New() const final {
    return CreateMaybeMessage<BroadcastCreateWorldProxy>(nullptr);
  }

  BroadcastCreateWorldProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastCreateWorldProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastCreateWorldProxy& from);
  void MergeFrom(const BroadcastCreateWorldProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastCreateWorldProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BroadcastCreateWorldProxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 2,
    kForPlayerFieldNumber = 3,
    kWorldIdFieldNumber = 1,
  };
  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 for_player = 3;
  void clear_for_player();
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player() const;
  void set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BroadcastCreateWorldProxy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 for_player_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryWorldData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryWorldData) */ {
 public:
  QueryWorldData();
  virtual ~QueryWorldData();

  QueryWorldData(const QueryWorldData& from);
  QueryWorldData(QueryWorldData&& from) noexcept
    : QueryWorldData() {
    *this = ::std::move(from);
  }

  inline QueryWorldData& operator=(const QueryWorldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWorldData& operator=(QueryWorldData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryWorldData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryWorldData* internal_default_instance() {
    return reinterpret_cast<const QueryWorldData*>(
               &_QueryWorldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(QueryWorldData& a, QueryWorldData& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWorldData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryWorldData* New() const final {
    return CreateMaybeMessage<QueryWorldData>(nullptr);
  }

  QueryWorldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryWorldData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryWorldData& from);
  void MergeFrom(const QueryWorldData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWorldData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryWorldData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSnFieldNumber = 2,
    kWorldIdFieldNumber = 1,
  };
  // uint64 world_sn = 2;
  void clear_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn() const;
  void set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryWorldData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 world_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryWorldDataRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryWorldDataRet) */ {
 public:
  QueryWorldDataRet();
  virtual ~QueryWorldDataRet();

  QueryWorldDataRet(const QueryWorldDataRet& from);
  QueryWorldDataRet(QueryWorldDataRet&& from) noexcept
    : QueryWorldDataRet() {
    *this = ::std::move(from);
  }

  inline QueryWorldDataRet& operator=(const QueryWorldDataRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryWorldDataRet& operator=(QueryWorldDataRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryWorldDataRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryWorldDataRet* internal_default_instance() {
    return reinterpret_cast<const QueryWorldDataRet*>(
               &_QueryWorldDataRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(QueryWorldDataRet& a, QueryWorldDataRet& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryWorldDataRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryWorldDataRet* New() const final {
    return CreateMaybeMessage<QueryWorldDataRet>(nullptr);
  }

  QueryWorldDataRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryWorldDataRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryWorldDataRet& from);
  void MergeFrom(const QueryWorldDataRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryWorldDataRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryWorldDataRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldDataFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Proto.DBWorldData world_data = 2;
  bool has_world_data() const;
  void clear_world_data();
  const ::Proto::DBWorldData& world_data() const;
  ::Proto::DBWorldData* release_world_data();
  ::Proto::DBWorldData* mutable_world_data();
  void set_allocated_world_data(::Proto::DBWorldData* world_data);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.QueryWorldDataRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::DBWorldData* world_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncWorldData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncWorldData) */ {
 public:
  SyncWorldData();
  virtual ~SyncWorldData();

  SyncWorldData(const SyncWorldData& from);
  SyncWorldData(SyncWorldData&& from) noexcept
    : SyncWorldData() {
    *this = ::std::move(from);
  }

  inline SyncWorldData& operator=(const SyncWorldData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncWorldData& operator=(SyncWorldData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncWorldData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncWorldData* internal_default_instance() {
    return reinterpret_cast<const SyncWorldData*>(
               &_SyncWorldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SyncWorldData& a, SyncWorldData& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncWorldData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncWorldData* New() const final {
    return CreateMaybeMessage<SyncWorldData>(nullptr);
  }

  SyncWorldData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncWorldData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncWorldData& from);
  void MergeFrom(const SyncWorldData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncWorldData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncWorldData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDieSnListFieldNumber = 2,
    kWorldDataFieldNumber = 1,
  };
  // repeated int64 die_sn_list = 2;
  int die_sn_list_size() const;
  void clear_die_sn_list();
  ::PROTOBUF_NAMESPACE_ID::int64 die_sn_list(int index) const;
  void set_die_sn_list(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_die_sn_list(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      die_sn_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_die_sn_list();

  // .Proto.DBWorldData world_data = 1;
  bool has_world_data() const;
  void clear_world_data();
  const ::Proto::DBWorldData& world_data() const;
  ::Proto::DBWorldData* release_world_data();
  ::Proto::DBWorldData* mutable_world_data();
  void set_allocated_world_data(::Proto::DBWorldData* world_data);

  // @@protoc_insertion_point(class_scope:Proto.SyncWorldData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > die_sn_list_;
  mutable std::atomic<int> _die_sn_list_cached_byte_size_;
  ::Proto::DBWorldData* world_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldAction) */ {
 public:
  WorldAction();
  virtual ~WorldAction();

  WorldAction(const WorldAction& from);
  WorldAction(WorldAction&& from) noexcept
    : WorldAction() {
    *this = ::std::move(from);
  }

  inline WorldAction& operator=(const WorldAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldAction& operator=(WorldAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldAction* internal_default_instance() {
    return reinterpret_cast<const WorldAction*>(
               &_WorldAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(WorldAction& a, WorldAction& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldAction* New() const final {
    return CreateMaybeMessage<WorldAction>(nullptr);
  }

  WorldAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldAction& from);
  void MergeFrom(const WorldAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSnFieldNumber = 2,
    kTargetTypeFieldNumber = 1,
    kActionTypeFieldNumber = 3,
  };
  // int64 target_sn = 2;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 target_type = 1;
  void clear_target_type();
  ::PROTOBUF_NAMESPACE_ID::int32 target_type() const;
  void set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 action_type = 3;
  void clear_action_type();
  ::PROTOBUF_NAMESPACE_ID::int32 action_type() const;
  void set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.WorldAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class WorldActionRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.WorldActionRet) */ {
 public:
  WorldActionRet();
  virtual ~WorldActionRet();

  WorldActionRet(const WorldActionRet& from);
  WorldActionRet(WorldActionRet&& from) noexcept
    : WorldActionRet() {
    *this = ::std::move(from);
  }

  inline WorldActionRet& operator=(const WorldActionRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldActionRet& operator=(WorldActionRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldActionRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldActionRet* internal_default_instance() {
    return reinterpret_cast<const WorldActionRet*>(
               &_WorldActionRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(WorldActionRet& a, WorldActionRet& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldActionRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldActionRet* New() const final {
    return CreateMaybeMessage<WorldActionRet>(nullptr);
  }

  WorldActionRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldActionRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldActionRet& from);
  void MergeFrom(const WorldActionRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldActionRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.WorldActionRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.WorldActionRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncWorldAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncWorldAction) */ {
 public:
  SyncWorldAction();
  virtual ~SyncWorldAction();

  SyncWorldAction(const SyncWorldAction& from);
  SyncWorldAction(SyncWorldAction&& from) noexcept
    : SyncWorldAction() {
    *this = ::std::move(from);
  }

  inline SyncWorldAction& operator=(const SyncWorldAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncWorldAction& operator=(SyncWorldAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncWorldAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncWorldAction* internal_default_instance() {
    return reinterpret_cast<const SyncWorldAction*>(
               &_SyncWorldAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SyncWorldAction& a, SyncWorldAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncWorldAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncWorldAction* New() const final {
    return CreateMaybeMessage<SyncWorldAction>(nullptr);
  }

  SyncWorldAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncWorldAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncWorldAction& from);
  void MergeFrom(const SyncWorldAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncWorldAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncWorldAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
    kTargetSnFieldNumber = 2,
    kTargetTypeFieldNumber = 3,
    kActionTypeFieldNumber = 4,
  };
  // int64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 target_sn = 2;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 target_type = 3;
  void clear_target_type();
  ::PROTOBUF_NAMESPACE_ID::int32 target_type() const;
  void set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 action_type = 4;
  void clear_action_type();
  ::PROTOBUF_NAMESPACE_ID::int32 action_type() const;
  void set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.SyncWorldAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 player_sn_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RemovePlayer) */ {
 public:
  RemovePlayer();
  virtual ~RemovePlayer();

  RemovePlayer(const RemovePlayer& from);
  RemovePlayer(RemovePlayer&& from) noexcept
    : RemovePlayer() {
    *this = ::std::move(from);
  }

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayer& operator=(RemovePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePlayer* internal_default_instance() {
    return reinterpret_cast<const RemovePlayer*>(
               &_RemovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(RemovePlayer& a, RemovePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePlayer* New() const final {
    return CreateMaybeMessage<RemovePlayer>(nullptr);
  }

  RemovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePlayer& from);
  void MergeFrom(const RemovePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RemovePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RemovePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestSyncPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestSyncPlayer) */ {
 public:
  RequestSyncPlayer();
  virtual ~RequestSyncPlayer();

  RequestSyncPlayer(const RequestSyncPlayer& from);
  RequestSyncPlayer(RequestSyncPlayer&& from) noexcept
    : RequestSyncPlayer() {
    *this = ::std::move(from);
  }

  inline RequestSyncPlayer& operator=(const RequestSyncPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSyncPlayer& operator=(RequestSyncPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSyncPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSyncPlayer* internal_default_instance() {
    return reinterpret_cast<const RequestSyncPlayer*>(
               &_RequestSyncPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(RequestSyncPlayer& a, RequestSyncPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSyncPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSyncPlayer* New() const final {
    return CreateMaybeMessage<RequestSyncPlayer>(nullptr);
  }

  RequestSyncPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSyncPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSyncPlayer& from);
  void MergeFrom(const RequestSyncPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSyncPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestSyncPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestSyncPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Role :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Role";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 5,
    kSnFieldNumber = 2,
    kTemplateIdFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Proto.Vector3 position = 5;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3& position() const;
  ::Proto::Vector3* release_position();
  ::Proto::Vector3* mutable_position();
  void set_allocated_position(::Proto::Vector3* position);

  // uint64 sn = 2;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 template_id = 3;
  void clear_template_id();
  ::PROTOBUF_NAMESPACE_ID::int32 template_id() const;
  void set_template_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Role)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Proto::Vector3* position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 template_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RoleAppear :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RoleAppear) */ {
 public:
  RoleAppear();
  virtual ~RoleAppear();

  RoleAppear(const RoleAppear& from);
  RoleAppear(RoleAppear&& from) noexcept
    : RoleAppear() {
    *this = ::std::move(from);
  }

  inline RoleAppear& operator=(const RoleAppear& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAppear& operator=(RoleAppear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleAppear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleAppear* internal_default_instance() {
    return reinterpret_cast<const RoleAppear*>(
               &_RoleAppear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RoleAppear& a, RoleAppear& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleAppear* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleAppear* New() const final {
    return CreateMaybeMessage<RoleAppear>(nullptr);
  }

  RoleAppear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleAppear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleAppear& from);
  void MergeFrom(const RoleAppear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAppear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RoleAppear";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // repeated .Proto.Role role = 1;
  int role_size() const;
  void clear_role();
  ::Proto::Role* mutable_role(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >*
      mutable_role();
  const ::Proto::Role& role(int index) const;
  ::Proto::Role* add_role();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >&
      role() const;

  // @@protoc_insertion_point(class_scope:Proto.RoleAppear)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role > role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RoleDisAppear :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RoleDisAppear) */ {
 public:
  RoleDisAppear();
  virtual ~RoleDisAppear();

  RoleDisAppear(const RoleDisAppear& from);
  RoleDisAppear(RoleDisAppear&& from) noexcept
    : RoleDisAppear() {
    *this = ::std::move(from);
  }

  inline RoleDisAppear& operator=(const RoleDisAppear& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDisAppear& operator=(RoleDisAppear&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleDisAppear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleDisAppear* internal_default_instance() {
    return reinterpret_cast<const RoleDisAppear*>(
               &_RoleDisAppear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(RoleDisAppear& a, RoleDisAppear& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDisAppear* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleDisAppear* New() const final {
    return CreateMaybeMessage<RoleDisAppear>(nullptr);
  }

  RoleDisAppear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleDisAppear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleDisAppear& from);
  void MergeFrom(const RoleDisAppear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDisAppear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RoleDisAppear";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.RoleDisAppear)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Teleport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Teleport) */ {
 public:
  Teleport();
  virtual ~Teleport();

  Teleport(const Teleport& from);
  Teleport(Teleport&& from) noexcept
    : Teleport() {
    *this = ::std::move(from);
  }

  inline Teleport& operator=(const Teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline Teleport& operator=(Teleport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Teleport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Teleport* internal_default_instance() {
    return reinterpret_cast<const Teleport*>(
               &_Teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Teleport& a, Teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(Teleport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Teleport* New() const final {
    return CreateMaybeMessage<Teleport>(nullptr);
  }

  Teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Teleport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Teleport& from);
  void MergeFrom(const Teleport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Teleport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Teleport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kPlayerFieldNumber = 4,
    kLastWorldSnFieldNumber = 1,
    kPlayerSnFieldNumber = 2,
  };
  // string account = 3;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // .Proto.Player player = 4;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // uint64 last_world_sn = 1;
  void clear_last_world_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn() const;
  void set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.Teleport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_world_sn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class TeleportAfter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TeleportAfter) */ {
 public:
  TeleportAfter();
  virtual ~TeleportAfter();

  TeleportAfter(const TeleportAfter& from);
  TeleportAfter(TeleportAfter&& from) noexcept
    : TeleportAfter() {
    *this = ::std::move(from);
  }

  inline TeleportAfter& operator=(const TeleportAfter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeleportAfter& operator=(TeleportAfter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeleportAfter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportAfter* internal_default_instance() {
    return reinterpret_cast<const TeleportAfter*>(
               &_TeleportAfter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(TeleportAfter& a, TeleportAfter& b) {
    a.Swap(&b);
  }
  inline void Swap(TeleportAfter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeleportAfter* New() const final {
    return CreateMaybeMessage<TeleportAfter>(nullptr);
  }

  TeleportAfter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeleportAfter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeleportAfter& from);
  void MergeFrom(const TeleportAfter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportAfter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TeleportAfter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.TeleportAfter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MoveByRotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MoveByRotation) */ {
 public:
  MoveByRotation();
  virtual ~MoveByRotation();

  MoveByRotation(const MoveByRotation& from);
  MoveByRotation(MoveByRotation&& from) noexcept
    : MoveByRotation() {
    *this = ::std::move(from);
  }

  inline MoveByRotation& operator=(const MoveByRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveByRotation& operator=(MoveByRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveByRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveByRotation* internal_default_instance() {
    return reinterpret_cast<const MoveByRotation*>(
               &_MoveByRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MoveByRotation& a, MoveByRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveByRotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveByRotation* New() const final {
    return CreateMaybeMessage<MoveByRotation>(nullptr);
  }

  MoveByRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveByRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveByRotation& from);
  void MergeFrom(const MoveByRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveByRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MoveByRotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kPlayerSnFieldNumber = 1,
    kValueFieldNumber = 5,
  };
  // .Proto.Vector3 position = 2;
  bool has_position() const;
  void clear_position();
  const ::Proto::Vector3& position() const;
  ::Proto::Vector3* release_position();
  ::Proto::Vector3* mutable_position();
  void set_allocated_position(::Proto::Vector3* position);

  // .Proto.Vector3 rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  const ::Proto::Vector3& rotation() const;
  ::Proto::Vector3* release_rotation();
  ::Proto::Vector3* mutable_rotation();
  void set_allocated_rotation(::Proto::Vector3* rotation);

  // .Proto.Vector3 direction = 4;
  bool has_direction() const;
  void clear_direction();
  const ::Proto::Vector3& direction() const;
  ::Proto::Vector3* release_direction();
  ::Proto::Vector3* mutable_direction();
  void set_allocated_direction(::Proto::Vector3* direction);

  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // float value = 5;
  void clear_value();
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Proto.MoveByRotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Vector3* position_;
  ::Proto::Vector3* rotation_;
  ::Proto::Vector3* direction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddItem) */ {
 public:
  AddItem();
  virtual ~AddItem();

  AddItem(const AddItem& from);
  AddItem(AddItem&& from) noexcept
    : AddItem() {
    *this = ::std::move(from);
  }

  inline AddItem& operator=(const AddItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddItem& operator=(AddItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddItem* internal_default_instance() {
    return reinterpret_cast<const AddItem*>(
               &_AddItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AddItem& a, AddItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AddItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddItem* New() const final {
    return CreateMaybeMessage<AddItem>(nullptr);
  }

  AddItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddItem& from);
  void MergeFrom(const AddItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AddItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddItemRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddItemRet) */ {
 public:
  AddItemRet();
  virtual ~AddItemRet();

  AddItemRet(const AddItemRet& from);
  AddItemRet(AddItemRet&& from) noexcept
    : AddItemRet() {
    *this = ::std::move(from);
  }

  inline AddItemRet& operator=(const AddItemRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddItemRet& operator=(AddItemRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddItemRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddItemRet* internal_default_instance() {
    return reinterpret_cast<const AddItemRet*>(
               &_AddItemRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AddItemRet& a, AddItemRet& b) {
    a.Swap(&b);
  }
  inline void Swap(AddItemRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddItemRet* New() const final {
    return CreateMaybeMessage<AddItemRet>(nullptr);
  }

  AddItemRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddItemRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddItemRet& from);
  void MergeFrom(const AddItemRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddItemRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddItemRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
    kIdFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AddItemRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddExp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddExp) */ {
 public:
  AddExp();
  virtual ~AddExp();

  AddExp(const AddExp& from);
  AddExp(AddExp&& from) noexcept
    : AddExp() {
    *this = ::std::move(from);
  }

  inline AddExp& operator=(const AddExp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddExp& operator=(AddExp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddExp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddExp* internal_default_instance() {
    return reinterpret_cast<const AddExp*>(
               &_AddExp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AddExp& a, AddExp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddExp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddExp* New() const final {
    return CreateMaybeMessage<AddExp>(nullptr);
  }

  AddExp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddExp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddExp& from);
  void MergeFrom(const AddExp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddExp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddExp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpFieldNumber = 1,
  };
  // int32 exp = 1;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AddExp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddExpRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddExpRet) */ {
 public:
  AddExpRet();
  virtual ~AddExpRet();

  AddExpRet(const AddExpRet& from);
  AddExpRet(AddExpRet&& from) noexcept
    : AddExpRet() {
    *this = ::std::move(from);
  }

  inline AddExpRet& operator=(const AddExpRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddExpRet& operator=(AddExpRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddExpRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddExpRet* internal_default_instance() {
    return reinterpret_cast<const AddExpRet*>(
               &_AddExpRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(AddExpRet& a, AddExpRet& b) {
    a.Swap(&b);
  }
  inline void Swap(AddExpRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddExpRet* New() const final {
    return CreateMaybeMessage<AddExpRet>(nullptr);
  }

  AddExpRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddExpRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddExpRet& from);
  void MergeFrom(const AddExpRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddExpRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddExpRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
    kExpFieldNumber = 2,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 exp = 2;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AddExpRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Dungeon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Dungeon) */ {
 public:
  Dungeon();
  virtual ~Dungeon();

  Dungeon(const Dungeon& from);
  Dungeon(Dungeon&& from) noexcept
    : Dungeon() {
    *this = ::std::move(from);
  }

  inline Dungeon& operator=(const Dungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dungeon& operator=(Dungeon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dungeon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dungeon* internal_default_instance() {
    return reinterpret_cast<const Dungeon*>(
               &_Dungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Dungeon& a, Dungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(Dungeon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dungeon* New() const final {
    return CreateMaybeMessage<Dungeon>(nullptr);
  }

  Dungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dungeon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dungeon& from);
  void MergeFrom(const Dungeon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dungeon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Dungeon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStarFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 star = 2;
  void clear_star();
  ::PROTOBUF_NAMESPACE_ID::int32 star() const;
  void set_star(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Dungeon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 star_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DungeonRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DungeonRs) */ {
 public:
  DungeonRs();
  virtual ~DungeonRs();

  DungeonRs(const DungeonRs& from);
  DungeonRs(DungeonRs&& from) noexcept
    : DungeonRs() {
    *this = ::std::move(from);
  }

  inline DungeonRs& operator=(const DungeonRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline DungeonRs& operator=(DungeonRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DungeonRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DungeonRs* internal_default_instance() {
    return reinterpret_cast<const DungeonRs*>(
               &_DungeonRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DungeonRs& a, DungeonRs& b) {
    a.Swap(&b);
  }
  inline void Swap(DungeonRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DungeonRs* New() const final {
    return CreateMaybeMessage<DungeonRs>(nullptr);
  }

  DungeonRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DungeonRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DungeonRs& from);
  void MergeFrom(const DungeonRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DungeonRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DungeonRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated .Proto.ItemBase item_list = 2;
  int item_list_size() const;
  void clear_item_list();
  ::Proto::ItemBase* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >*
      mutable_item_list();
  const ::Proto::ItemBase& item_list(int index) const;
  ::Proto::ItemBase* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >&
      item_list() const;

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DungeonRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase > item_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Chat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(nullptr);
  }

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Chat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 5,
    kTargetSnFieldNumber = 2,
    kChannelFieldNumber = 1,
    kCrossFieldNumber = 3,
    kServerIdFieldNumber = 4,
  };
  // bytes chat_msg = 5;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const void* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);

  // int64 target_sn = 2;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .Proto.eChatChannel channel = 1;
  void clear_channel();
  ::Proto::eChatChannel channel() const;
  void set_channel(::Proto::eChatChannel value);

  // bool cross = 3;
  void clear_cross();
  bool cross() const;
  void set_cross(bool value);

  // int32 server_id = 4;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Chat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  int channel_;
  bool cross_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ChatRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ChatRet) */ {
 public:
  ChatRet();
  virtual ~ChatRet();

  ChatRet(const ChatRet& from);
  ChatRet(ChatRet&& from) noexcept
    : ChatRet() {
    *this = ::std::move(from);
  }

  inline ChatRet& operator=(const ChatRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRet& operator=(ChatRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRet* internal_default_instance() {
    return reinterpret_cast<const ChatRet*>(
               &_ChatRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ChatRet& a, ChatRet& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRet* New() const final {
    return CreateMaybeMessage<ChatRet>(nullptr);
  }

  ChatRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatRet& from);
  void MergeFrom(const ChatRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ChatRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ChatRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncChat) */ {
 public:
  SyncChat();
  virtual ~SyncChat();

  SyncChat(const SyncChat& from);
  SyncChat(SyncChat&& from) noexcept
    : SyncChat() {
    *this = ::std::move(from);
  }

  inline SyncChat& operator=(const SyncChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncChat& operator=(SyncChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncChat* internal_default_instance() {
    return reinterpret_cast<const SyncChat*>(
               &_SyncChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SyncChat& a, SyncChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncChat* New() const final {
    return CreateMaybeMessage<SyncChat>(nullptr);
  }

  SyncChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncChat& from);
  void MergeFrom(const SyncChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatsFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // repeated .Proto.STChatInfo chats = 2;
  int chats_size() const;
  void clear_chats();
  ::Proto::STChatInfo* mutable_chats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >*
      mutable_chats();
  const ::Proto::STChatInfo& chats(int index) const;
  ::Proto::STChatInfo* add_chats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >&
      chats() const;

  // .Proto.eChatChannel channel = 1;
  void clear_channel();
  ::Proto::eChatChannel channel() const;
  void set_channel(::Proto::eChatChannel value);

  // @@protoc_insertion_point(class_scope:Proto.SyncChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo > chats_;
  int channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetChatRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GetChatRecord) */ {
 public:
  GetChatRecord();
  virtual ~GetChatRecord();

  GetChatRecord(const GetChatRecord& from);
  GetChatRecord(GetChatRecord&& from) noexcept
    : GetChatRecord() {
    *this = ::std::move(from);
  }

  inline GetChatRecord& operator=(const GetChatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatRecord& operator=(GetChatRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatRecord* internal_default_instance() {
    return reinterpret_cast<const GetChatRecord*>(
               &_GetChatRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetChatRecord& a, GetChatRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatRecord* New() const final {
    return CreateMaybeMessage<GetChatRecord>(nullptr);
  }

  GetChatRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatRecord& from);
  void MergeFrom(const GetChatRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GetChatRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 2,
    kTargetSnFieldNumber = 3,
    kChannelFieldNumber = 1,
    kServerIdFieldNumber = 5,
    kMySnFieldNumber = 4,
  };
  // int64 chat_id = 2;
  void clear_chat_id();
  ::PROTOBUF_NAMESPACE_ID::int64 chat_id() const;
  void set_chat_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 target_sn = 3;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .Proto.eChatChannel channel = 1;
  void clear_channel();
  ::Proto::eChatChannel channel() const;
  void set_channel(::Proto::eChatChannel value);

  // int32 server_id = 5;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 my_sn = 4;
  void clear_my_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 my_sn() const;
  void set_my_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.GetChatRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 chat_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  int channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 my_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class STChatInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.STChatInfo) */ {
 public:
  STChatInfo();
  virtual ~STChatInfo();

  STChatInfo(const STChatInfo& from);
  STChatInfo(STChatInfo&& from) noexcept
    : STChatInfo() {
    *this = ::std::move(from);
  }

  inline STChatInfo& operator=(const STChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline STChatInfo& operator=(STChatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STChatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STChatInfo* internal_default_instance() {
    return reinterpret_cast<const STChatInfo*>(
               &_STChatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(STChatInfo& a, STChatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(STChatInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STChatInfo* New() const final {
    return CreateMaybeMessage<STChatInfo>(nullptr);
  }

  STChatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STChatInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STChatInfo& from);
  void MergeFrom(const STChatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STChatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.STChatInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 6,
    kSenderNameFieldNumber = 8,
    kRecverNameFieldNumber = 10,
    kChatTimeFieldNumber = 2,
    kChannelFieldNumber = 1,
    kCrossFieldNumber = 4,
    kChatIdFieldNumber = 3,
    kSenderSnFieldNumber = 7,
    kRecverSnFieldNumber = 9,
    kServerIdFieldNumber = 5,
  };
  // bytes chat_msg = 6;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  void set_chat_msg(const std::string& value);
  void set_chat_msg(std::string&& value);
  void set_chat_msg(const char* value);
  void set_chat_msg(const void* value, size_t size);
  std::string* mutable_chat_msg();
  std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);

  // bytes sender_name = 8;
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const void* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);

  // bytes recver_name = 10;
  void clear_recver_name();
  const std::string& recver_name() const;
  void set_recver_name(const std::string& value);
  void set_recver_name(std::string&& value);
  void set_recver_name(const char* value);
  void set_recver_name(const void* value, size_t size);
  std::string* mutable_recver_name();
  std::string* release_recver_name();
  void set_allocated_recver_name(std::string* recver_name);

  // int64 chat_time = 2;
  void clear_chat_time();
  ::PROTOBUF_NAMESPACE_ID::int64 chat_time() const;
  void set_chat_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .Proto.eChatChannel channel = 1;
  void clear_channel();
  ::Proto::eChatChannel channel() const;
  void set_channel(::Proto::eChatChannel value);

  // bool cross = 4;
  void clear_cross();
  bool cross() const;
  void set_cross(bool value);

  // int64 chat_id = 3;
  void clear_chat_id();
  ::PROTOBUF_NAMESPACE_ID::int64 chat_id() const;
  void set_chat_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 sender_sn = 7;
  void clear_sender_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 sender_sn() const;
  void set_sender_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 recver_sn = 9;
  void clear_recver_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 recver_sn() const;
  void set_recver_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 server_id = 5;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.STChatInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recver_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 chat_time_;
  int channel_;
  bool cross_;
  ::PROTOBUF_NAMESPACE_ID::int64 chat_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_sn_;
  ::PROTOBUF_NAMESPACE_ID::int64 recver_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetChatRecordRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GetChatRecordRet) */ {
 public:
  GetChatRecordRet();
  virtual ~GetChatRecordRet();

  GetChatRecordRet(const GetChatRecordRet& from);
  GetChatRecordRet(GetChatRecordRet&& from) noexcept
    : GetChatRecordRet() {
    *this = ::std::move(from);
  }

  inline GetChatRecordRet& operator=(const GetChatRecordRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatRecordRet& operator=(GetChatRecordRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChatRecordRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatRecordRet* internal_default_instance() {
    return reinterpret_cast<const GetChatRecordRet*>(
               &_GetChatRecordRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetChatRecordRet& a, GetChatRecordRet& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatRecordRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChatRecordRet* New() const final {
    return CreateMaybeMessage<GetChatRecordRet>(nullptr);
  }

  GetChatRecordRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChatRecordRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChatRecordRet& from);
  void MergeFrom(const GetChatRecordRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatRecordRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GetChatRecordRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatsFieldNumber = 2,
    kMySnFieldNumber = 3,
    kChannelFieldNumber = 1,
  };
  // repeated .Proto.STChatInfo chats = 2;
  int chats_size() const;
  void clear_chats();
  ::Proto::STChatInfo* mutable_chats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >*
      mutable_chats();
  const ::Proto::STChatInfo& chats(int index) const;
  ::Proto::STChatInfo* add_chats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >&
      chats() const;

  // int64 my_sn = 3;
  void clear_my_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 my_sn() const;
  void set_my_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .Proto.eChatChannel channel = 1;
  void clear_channel();
  ::Proto::eChatChannel channel() const;
  void set_channel(::Proto::eChatChannel value);

  // @@protoc_insertion_point(class_scope:Proto.GetChatRecordRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo > chats_;
  ::PROTOBUF_NAMESPACE_ID::int64 my_sn_;
  int channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryAllPlayerName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryAllPlayerName) */ {
 public:
  QueryAllPlayerName();
  virtual ~QueryAllPlayerName();

  QueryAllPlayerName(const QueryAllPlayerName& from);
  QueryAllPlayerName(QueryAllPlayerName&& from) noexcept
    : QueryAllPlayerName() {
    *this = ::std::move(from);
  }

  inline QueryAllPlayerName& operator=(const QueryAllPlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllPlayerName& operator=(QueryAllPlayerName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryAllPlayerName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryAllPlayerName* internal_default_instance() {
    return reinterpret_cast<const QueryAllPlayerName*>(
               &_QueryAllPlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(QueryAllPlayerName& a, QueryAllPlayerName& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllPlayerName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryAllPlayerName* New() const final {
    return CreateMaybeMessage<QueryAllPlayerName>(nullptr);
  }

  QueryAllPlayerName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryAllPlayerName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryAllPlayerName& from);
  void MergeFrom(const QueryAllPlayerName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllPlayerName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryAllPlayerName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.QueryAllPlayerName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class STPlayerSnName :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.STPlayerSnName) */ {
 public:
  STPlayerSnName();
  virtual ~STPlayerSnName();

  STPlayerSnName(const STPlayerSnName& from);
  STPlayerSnName(STPlayerSnName&& from) noexcept
    : STPlayerSnName() {
    *this = ::std::move(from);
  }

  inline STPlayerSnName& operator=(const STPlayerSnName& from) {
    CopyFrom(from);
    return *this;
  }
  inline STPlayerSnName& operator=(STPlayerSnName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STPlayerSnName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STPlayerSnName* internal_default_instance() {
    return reinterpret_cast<const STPlayerSnName*>(
               &_STPlayerSnName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(STPlayerSnName& a, STPlayerSnName& b) {
    a.Swap(&b);
  }
  inline void Swap(STPlayerSnName* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STPlayerSnName* New() const final {
    return CreateMaybeMessage<STPlayerSnName>(nullptr);
  }

  STPlayerSnName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STPlayerSnName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STPlayerSnName& from);
  void MergeFrom(const STPlayerSnName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STPlayerSnName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.STPlayerSnName";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSnFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.STPlayerSnName)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QueryAllPlayerNameRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QueryAllPlayerNameRet) */ {
 public:
  QueryAllPlayerNameRet();
  virtual ~QueryAllPlayerNameRet();

  QueryAllPlayerNameRet(const QueryAllPlayerNameRet& from);
  QueryAllPlayerNameRet(QueryAllPlayerNameRet&& from) noexcept
    : QueryAllPlayerNameRet() {
    *this = ::std::move(from);
  }

  inline QueryAllPlayerNameRet& operator=(const QueryAllPlayerNameRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllPlayerNameRet& operator=(QueryAllPlayerNameRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryAllPlayerNameRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryAllPlayerNameRet* internal_default_instance() {
    return reinterpret_cast<const QueryAllPlayerNameRet*>(
               &_QueryAllPlayerNameRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(QueryAllPlayerNameRet& a, QueryAllPlayerNameRet& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllPlayerNameRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryAllPlayerNameRet* New() const final {
    return CreateMaybeMessage<QueryAllPlayerNameRet>(nullptr);
  }

  QueryAllPlayerNameRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryAllPlayerNameRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryAllPlayerNameRet& from);
  void MergeFrom(const QueryAllPlayerNameRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllPlayerNameRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QueryAllPlayerNameRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .Proto.STPlayerSnName infos = 1;
  int infos_size() const;
  void clear_infos();
  ::Proto::STPlayerSnName* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STPlayerSnName >*
      mutable_infos();
  const ::Proto::STPlayerSnName& infos(int index) const;
  ::Proto::STPlayerSnName* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STPlayerSnName >&
      infos() const;

  // @@protoc_insertion_point(class_scope:Proto.QueryAllPlayerNameRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STPlayerSnName > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Mute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Mute) */ {
 public:
  Mute();
  virtual ~Mute();

  Mute(const Mute& from);
  Mute(Mute&& from) noexcept
    : Mute() {
    *this = ::std::move(from);
  }

  inline Mute& operator=(const Mute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mute& operator=(Mute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mute* internal_default_instance() {
    return reinterpret_cast<const Mute*>(
               &_Mute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Mute& a, Mute& b) {
    a.Swap(&b);
  }
  inline void Swap(Mute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mute* New() const final {
    return CreateMaybeMessage<Mute>(nullptr);
  }

  Mute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mute& from);
  void MergeFrom(const Mute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Mute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 2,
    kCrossFieldNumber = 1,
    kMuteFieldNumber = 4,
    kTargetSnFieldNumber = 3,
  };
  // int32 server_id = 2;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool cross = 1;
  void clear_cross();
  bool cross() const;
  void set_cross(bool value);

  // bool mute = 4;
  void clear_mute();
  bool mute() const;
  void set_mute(bool value);

  // int64 target_sn = 3;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.Mute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  bool cross_;
  bool mute_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MuteRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MuteRet) */ {
 public:
  MuteRet();
  virtual ~MuteRet();

  MuteRet(const MuteRet& from);
  MuteRet(MuteRet&& from) noexcept
    : MuteRet() {
    *this = ::std::move(from);
  }

  inline MuteRet& operator=(const MuteRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteRet& operator=(MuteRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MuteRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MuteRet* internal_default_instance() {
    return reinterpret_cast<const MuteRet*>(
               &_MuteRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(MuteRet& a, MuteRet& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MuteRet* New() const final {
    return CreateMaybeMessage<MuteRet>(nullptr);
  }

  MuteRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MuteRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MuteRet& from);
  void MergeFrom(const MuteRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MuteRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorSnFieldNumber = 2,
    kRetFieldNumber = 1,
    kMuteFieldNumber = 4,
    kTargetSnFieldNumber = 3,
  };
  // int64 operator_sn = 2;
  void clear_operator_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 operator_sn() const;
  void set_operator_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool mute = 4;
  void clear_mute();
  bool mute() const;
  void set_mute(bool value);

  // int64 target_sn = 3;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.MuteRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 operator_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  bool mute_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetTargetInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GetTargetInfo) */ {
 public:
  GetTargetInfo();
  virtual ~GetTargetInfo();

  GetTargetInfo(const GetTargetInfo& from);
  GetTargetInfo(GetTargetInfo&& from) noexcept
    : GetTargetInfo() {
    *this = ::std::move(from);
  }

  inline GetTargetInfo& operator=(const GetTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetInfo& operator=(GetTargetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTargetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTargetInfo* internal_default_instance() {
    return reinterpret_cast<const GetTargetInfo*>(
               &_GetTargetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetTargetInfo& a, GetTargetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTargetInfo* New() const final {
    return CreateMaybeMessage<GetTargetInfo>(nullptr);
  }

  GetTargetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTargetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTargetInfo& from);
  void MergeFrom(const GetTargetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GetTargetInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kTargetSnFieldNumber = 3,
  };
  // bool cross = 1;
  void clear_cross();
  bool cross() const;
  void set_cross(bool value);

  // int32 server_id = 2;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 target_sn = 3;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.GetTargetInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool cross_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetTargetInfoRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GetTargetInfoRet) */ {
 public:
  GetTargetInfoRet();
  virtual ~GetTargetInfoRet();

  GetTargetInfoRet(const GetTargetInfoRet& from);
  GetTargetInfoRet(GetTargetInfoRet&& from) noexcept
    : GetTargetInfoRet() {
    *this = ::std::move(from);
  }

  inline GetTargetInfoRet& operator=(const GetTargetInfoRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetInfoRet& operator=(GetTargetInfoRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTargetInfoRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTargetInfoRet* internal_default_instance() {
    return reinterpret_cast<const GetTargetInfoRet*>(
               &_GetTargetInfoRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetTargetInfoRet& a, GetTargetInfoRet& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetInfoRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTargetInfoRet* New() const final {
    return CreateMaybeMessage<GetTargetInfoRet>(nullptr);
  }

  GetTargetInfoRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTargetInfoRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTargetInfoRet& from);
  void MergeFrom(const GetTargetInfoRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetInfoRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GetTargetInfoRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNameFieldNumber = 5,
    kResPicFieldNumber = 8,
    kRetFieldNumber = 1,
    kServerIdFieldNumber = 3,
    kTargetSnFieldNumber = 4,
    kCrossFieldNumber = 2,
    kInBlacklistFieldNumber = 6,
    kInMuteFieldNumber = 7,
    kOnlineFieldNumber = 9,
  };
  // bytes target_name = 5;
  void clear_target_name();
  const std::string& target_name() const;
  void set_target_name(const std::string& value);
  void set_target_name(std::string&& value);
  void set_target_name(const char* value);
  void set_target_name(const void* value, size_t size);
  std::string* mutable_target_name();
  std::string* release_target_name();
  void set_allocated_target_name(std::string* target_name);

  // bytes res_pic = 8;
  void clear_res_pic();
  const std::string& res_pic() const;
  void set_res_pic(const std::string& value);
  void set_res_pic(std::string&& value);
  void set_res_pic(const char* value);
  void set_res_pic(const void* value, size_t size);
  std::string* mutable_res_pic();
  std::string* release_res_pic();
  void set_allocated_res_pic(std::string* res_pic);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 target_sn = 4;
  void clear_target_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn() const;
  void set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool cross = 2;
  void clear_cross();
  bool cross() const;
  void set_cross(bool value);

  // bool in_blacklist = 6;
  void clear_in_blacklist();
  bool in_blacklist() const;
  void set_in_blacklist(bool value);

  // bool in_mute = 7;
  void clear_in_mute();
  bool in_mute() const;
  void set_in_mute(bool value);

  // bool online = 9;
  void clear_online();
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:Proto.GetTargetInfoRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_pic_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_sn_;
  bool cross_;
  bool in_blacklist_;
  bool in_mute_;
  bool online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BoardcastLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BoardcastLogin) */ {
 public:
  BoardcastLogin();
  virtual ~BoardcastLogin();

  BoardcastLogin(const BoardcastLogin& from);
  BoardcastLogin(BoardcastLogin&& from) noexcept
    : BoardcastLogin() {
    *this = ::std::move(from);
  }

  inline BoardcastLogin& operator=(const BoardcastLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardcastLogin& operator=(BoardcastLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoardcastLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoardcastLogin* internal_default_instance() {
    return reinterpret_cast<const BoardcastLogin*>(
               &_BoardcastLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(BoardcastLogin& a, BoardcastLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardcastLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoardcastLogin* New() const final {
    return CreateMaybeMessage<BoardcastLogin>(nullptr);
  }

  BoardcastLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoardcastLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoardcastLogin& from);
  void MergeFrom(const BoardcastLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardcastLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BoardcastLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSnFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.BoardcastLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class STFriendInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.STFriendInfo) */ {
 public:
  STFriendInfo();
  virtual ~STFriendInfo();

  STFriendInfo(const STFriendInfo& from);
  STFriendInfo(STFriendInfo&& from) noexcept
    : STFriendInfo() {
    *this = ::std::move(from);
  }

  inline STFriendInfo& operator=(const STFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline STFriendInfo& operator=(STFriendInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STFriendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STFriendInfo* internal_default_instance() {
    return reinterpret_cast<const STFriendInfo*>(
               &_STFriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(STFriendInfo& a, STFriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(STFriendInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STFriendInfo* New() const final {
    return CreateMaybeMessage<STFriendInfo>(nullptr);
  }

  STFriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STFriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STFriendInfo& from);
  void MergeFrom(const STFriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STFriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.STFriendInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
    kLevelFieldNumber = 2,
    kVipFieldNumber = 3,
    kOnlineFieldNumber = 4,
  };
  // int32 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 vip = 3;
  void clear_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 vip() const;
  void set_vip(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 online = 4;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.STFriendInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFriendList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GetFriendList) */ {
 public:
  GetFriendList();
  virtual ~GetFriendList();

  GetFriendList(const GetFriendList& from);
  GetFriendList(GetFriendList&& from) noexcept
    : GetFriendList() {
    *this = ::std::move(from);
  }

  inline GetFriendList& operator=(const GetFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendList& operator=(GetFriendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendList* internal_default_instance() {
    return reinterpret_cast<const GetFriendList*>(
               &_GetFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetFriendList& a, GetFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendList* New() const final {
    return CreateMaybeMessage<GetFriendList>(nullptr);
  }

  GetFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendList& from);
  void MergeFrom(const GetFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GetFriendList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.GetFriendList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class GetFriendListRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.GetFriendListRet) */ {
 public:
  GetFriendListRet();
  virtual ~GetFriendListRet();

  GetFriendListRet(const GetFriendListRet& from);
  GetFriendListRet(GetFriendListRet&& from) noexcept
    : GetFriendListRet() {
    *this = ::std::move(from);
  }

  inline GetFriendListRet& operator=(const GetFriendListRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendListRet& operator=(GetFriendListRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFriendListRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListRet* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRet*>(
               &_GetFriendListRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GetFriendListRet& a, GetFriendListRet& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendListRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListRet* New() const final {
    return CreateMaybeMessage<GetFriendListRet>(nullptr);
  }

  GetFriendListRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendListRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFriendListRet& from);
  void MergeFrom(const GetFriendListRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendListRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.GetFriendListRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .Proto.STFriendInfo friends = 1;
  int friends_size() const;
  void clear_friends();
  ::Proto::STFriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >*
      mutable_friends();
  const ::Proto::STFriendInfo& friends(int index) const;
  ::Proto::STFriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:Proto.GetFriendListRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddFriend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddFriend) */ {
 public:
  AddFriend();
  virtual ~AddFriend();

  AddFriend(const AddFriend& from);
  AddFriend(AddFriend&& from) noexcept
    : AddFriend() {
    *this = ::std::move(from);
  }

  inline AddFriend& operator=(const AddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriend& operator=(AddFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriend* internal_default_instance() {
    return reinterpret_cast<const AddFriend*>(
               &_AddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(AddFriend& a, AddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriend* New() const final {
    return CreateMaybeMessage<AddFriend>(nullptr);
  }

  AddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriend& from);
  void MergeFrom(const AddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddFriend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // int64 player_sn = 2;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AddFriend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 player_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.AddFriendRet) */ {
 public:
  AddFriendRet();
  virtual ~AddFriendRet();

  AddFriendRet(const AddFriendRet& from);
  AddFriendRet(AddFriendRet&& from) noexcept
    : AddFriendRet() {
    *this = ::std::move(from);
  }

  inline AddFriendRet& operator=(const AddFriendRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRet& operator=(AddFriendRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFriendRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendRet* internal_default_instance() {
    return reinterpret_cast<const AddFriendRet*>(
               &_AddFriendRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(AddFriendRet& a, AddFriendRet& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFriendRet* New() const final {
    return CreateMaybeMessage<AddFriendRet>(nullptr);
  }

  AddFriendRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFriendRet& from);
  void MergeFrom(const AddFriendRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.AddFriendRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.AddFriendRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DelFriend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DelFriend) */ {
 public:
  DelFriend();
  virtual ~DelFriend();

  DelFriend(const DelFriend& from);
  DelFriend(DelFriend&& from) noexcept
    : DelFriend() {
    *this = ::std::move(from);
  }

  inline DelFriend& operator=(const DelFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriend& operator=(DelFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelFriend* internal_default_instance() {
    return reinterpret_cast<const DelFriend*>(
               &_DelFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(DelFriend& a, DelFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelFriend* New() const final {
    return CreateMaybeMessage<DelFriend>(nullptr);
  }

  DelFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelFriend& from);
  void MergeFrom(const DelFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DelFriend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // int32 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DelFriend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DelFriendRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DelFriendRet) */ {
 public:
  DelFriendRet();
  virtual ~DelFriendRet();

  DelFriendRet(const DelFriendRet& from);
  DelFriendRet(DelFriendRet&& from) noexcept
    : DelFriendRet() {
    *this = ::std::move(from);
  }

  inline DelFriendRet& operator=(const DelFriendRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendRet& operator=(DelFriendRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelFriendRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelFriendRet* internal_default_instance() {
    return reinterpret_cast<const DelFriendRet*>(
               &_DelFriendRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(DelFriendRet& a, DelFriendRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelFriendRet* New() const final {
    return CreateMaybeMessage<DelFriendRet>(nullptr);
  }

  DelFriendRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelFriendRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelFriendRet& from);
  void MergeFrom(const DelFriendRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DelFriendRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DelFriendRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RefreshFriend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RefreshFriend) */ {
 public:
  RefreshFriend();
  virtual ~RefreshFriend();

  RefreshFriend(const RefreshFriend& from);
  RefreshFriend(RefreshFriend&& from) noexcept
    : RefreshFriend() {
    *this = ::std::move(from);
  }

  inline RefreshFriend& operator=(const RefreshFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshFriend& operator=(RefreshFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshFriend* internal_default_instance() {
    return reinterpret_cast<const RefreshFriend*>(
               &_RefreshFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RefreshFriend& a, RefreshFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshFriend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshFriend* New() const final {
    return CreateMaybeMessage<RefreshFriend>(nullptr);
  }

  RefreshFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshFriend& from);
  void MergeFrom(const RefreshFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RefreshFriend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.RefreshFriend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RefreshFriendRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RefreshFriendRet) */ {
 public:
  RefreshFriendRet();
  virtual ~RefreshFriendRet();

  RefreshFriendRet(const RefreshFriendRet& from);
  RefreshFriendRet(RefreshFriendRet&& from) noexcept
    : RefreshFriendRet() {
    *this = ::std::move(from);
  }

  inline RefreshFriendRet& operator=(const RefreshFriendRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshFriendRet& operator=(RefreshFriendRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshFriendRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshFriendRet* internal_default_instance() {
    return reinterpret_cast<const RefreshFriendRet*>(
               &_RefreshFriendRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(RefreshFriendRet& a, RefreshFriendRet& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshFriendRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshFriendRet* New() const final {
    return CreateMaybeMessage<RefreshFriendRet>(nullptr);
  }

  RefreshFriendRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshFriendRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshFriendRet& from);
  void MergeFrom(const RefreshFriendRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshFriendRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RefreshFriendRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .Proto.STFriendInfo friends = 1;
  int friends_size() const;
  void clear_friends();
  ::Proto::STFriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >*
      mutable_friends();
  const ::Proto::STFriendInfo& friends(int index) const;
  ::Proto::STFriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:Proto.RefreshFriendRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class JoinGuild :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.JoinGuild) */ {
 public:
  JoinGuild();
  virtual ~JoinGuild();

  JoinGuild(const JoinGuild& from);
  JoinGuild(JoinGuild&& from) noexcept
    : JoinGuild() {
    *this = ::std::move(from);
  }

  inline JoinGuild& operator=(const JoinGuild& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGuild& operator=(JoinGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGuild* internal_default_instance() {
    return reinterpret_cast<const JoinGuild*>(
               &_JoinGuild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(JoinGuild& a, JoinGuild& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGuild* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGuild* New() const final {
    return CreateMaybeMessage<JoinGuild>(nullptr);
  }

  JoinGuild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGuild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGuild& from);
  void MergeFrom(const JoinGuild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGuild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.JoinGuild";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildSnFieldNumber = 1,
  };
  // int64 guild_sn = 1;
  void clear_guild_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn() const;
  void set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.JoinGuild)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class JoinGuildRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.JoinGuildRet) */ {
 public:
  JoinGuildRet();
  virtual ~JoinGuildRet();

  JoinGuildRet(const JoinGuildRet& from);
  JoinGuildRet(JoinGuildRet&& from) noexcept
    : JoinGuildRet() {
    *this = ::std::move(from);
  }

  inline JoinGuildRet& operator=(const JoinGuildRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGuildRet& operator=(JoinGuildRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGuildRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGuildRet* internal_default_instance() {
    return reinterpret_cast<const JoinGuildRet*>(
               &_JoinGuildRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(JoinGuildRet& a, JoinGuildRet& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGuildRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGuildRet* New() const final {
    return CreateMaybeMessage<JoinGuildRet>(nullptr);
  }

  JoinGuildRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGuildRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGuildRet& from);
  void MergeFrom(const JoinGuildRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGuildRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.JoinGuildRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildSnFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 guild_sn = 2;
  void clear_guild_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn() const;
  void set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.JoinGuildRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QuitGuild :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QuitGuild) */ {
 public:
  QuitGuild();
  virtual ~QuitGuild();

  QuitGuild(const QuitGuild& from);
  QuitGuild(QuitGuild&& from) noexcept
    : QuitGuild() {
    *this = ::std::move(from);
  }

  inline QuitGuild& operator=(const QuitGuild& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGuild& operator=(QuitGuild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGuild* internal_default_instance() {
    return reinterpret_cast<const QuitGuild*>(
               &_QuitGuild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(QuitGuild& a, QuitGuild& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGuild* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitGuild* New() const final {
    return CreateMaybeMessage<QuitGuild>(nullptr);
  }

  QuitGuild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitGuild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitGuild& from);
  void MergeFrom(const QuitGuild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGuild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QuitGuild";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildSnFieldNumber = 1,
  };
  // int64 guild_sn = 1;
  void clear_guild_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn() const;
  void set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.QuitGuild)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QuitGuildRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QuitGuildRet) */ {
 public:
  QuitGuildRet();
  virtual ~QuitGuildRet();

  QuitGuildRet(const QuitGuildRet& from);
  QuitGuildRet(QuitGuildRet&& from) noexcept
    : QuitGuildRet() {
    *this = ::std::move(from);
  }

  inline QuitGuildRet& operator=(const QuitGuildRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGuildRet& operator=(QuitGuildRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitGuildRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGuildRet* internal_default_instance() {
    return reinterpret_cast<const QuitGuildRet*>(
               &_QuitGuildRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(QuitGuildRet& a, QuitGuildRet& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGuildRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitGuildRet* New() const final {
    return CreateMaybeMessage<QuitGuildRet>(nullptr);
  }

  QuitGuildRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitGuildRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitGuildRet& from);
  void MergeFrom(const QuitGuildRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGuildRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QuitGuildRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildSnFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 guild_sn = 2;
  void clear_guild_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn() const;
  void set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.QuitGuildRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 guild_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class JoinTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.JoinTeam) */ {
 public:
  JoinTeam();
  virtual ~JoinTeam();

  JoinTeam(const JoinTeam& from);
  JoinTeam(JoinTeam&& from) noexcept
    : JoinTeam() {
    *this = ::std::move(from);
  }

  inline JoinTeam& operator=(const JoinTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinTeam& operator=(JoinTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinTeam* internal_default_instance() {
    return reinterpret_cast<const JoinTeam*>(
               &_JoinTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(JoinTeam& a, JoinTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinTeam* New() const final {
    return CreateMaybeMessage<JoinTeam>(nullptr);
  }

  JoinTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinTeam& from);
  void MergeFrom(const JoinTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.JoinTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamSnFieldNumber = 1,
  };
  // int64 team_sn = 1;
  void clear_team_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn() const;
  void set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.JoinTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class JoinTeamRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.JoinTeamRet) */ {
 public:
  JoinTeamRet();
  virtual ~JoinTeamRet();

  JoinTeamRet(const JoinTeamRet& from);
  JoinTeamRet(JoinTeamRet&& from) noexcept
    : JoinTeamRet() {
    *this = ::std::move(from);
  }

  inline JoinTeamRet& operator=(const JoinTeamRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinTeamRet& operator=(JoinTeamRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinTeamRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinTeamRet* internal_default_instance() {
    return reinterpret_cast<const JoinTeamRet*>(
               &_JoinTeamRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(JoinTeamRet& a, JoinTeamRet& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinTeamRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinTeamRet* New() const final {
    return CreateMaybeMessage<JoinTeamRet>(nullptr);
  }

  JoinTeamRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinTeamRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinTeamRet& from);
  void MergeFrom(const JoinTeamRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinTeamRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.JoinTeamRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamSnFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 team_sn = 2;
  void clear_team_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn() const;
  void set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.JoinTeamRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QuitTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QuitTeam) */ {
 public:
  QuitTeam();
  virtual ~QuitTeam();

  QuitTeam(const QuitTeam& from);
  QuitTeam(QuitTeam&& from) noexcept
    : QuitTeam() {
    *this = ::std::move(from);
  }

  inline QuitTeam& operator=(const QuitTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitTeam& operator=(QuitTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitTeam* internal_default_instance() {
    return reinterpret_cast<const QuitTeam*>(
               &_QuitTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(QuitTeam& a, QuitTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitTeam* New() const final {
    return CreateMaybeMessage<QuitTeam>(nullptr);
  }

  QuitTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitTeam& from);
  void MergeFrom(const QuitTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QuitTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamSnFieldNumber = 1,
  };
  // int64 team_sn = 1;
  void clear_team_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn() const;
  void set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Proto.QuitTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class QuitTeamRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.QuitTeamRet) */ {
 public:
  QuitTeamRet();
  virtual ~QuitTeamRet();

  QuitTeamRet(const QuitTeamRet& from);
  QuitTeamRet(QuitTeamRet&& from) noexcept
    : QuitTeamRet() {
    *this = ::std::move(from);
  }

  inline QuitTeamRet& operator=(const QuitTeamRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitTeamRet& operator=(QuitTeamRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitTeamRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitTeamRet* internal_default_instance() {
    return reinterpret_cast<const QuitTeamRet*>(
               &_QuitTeamRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(QuitTeamRet& a, QuitTeamRet& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitTeamRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitTeamRet* New() const final {
    return CreateMaybeMessage<QuitTeamRet>(nullptr);
  }

  QuitTeamRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitTeamRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitTeamRet& from);
  void MergeFrom(const QuitTeamRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitTeamRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.QuitTeamRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamSnFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 team_sn = 2;
  void clear_team_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn() const;
  void set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.QuitTeamRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 team_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerProperty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayerProperty) */ {
 public:
  SyncPlayerProperty();
  virtual ~SyncPlayerProperty();

  SyncPlayerProperty(const SyncPlayerProperty& from);
  SyncPlayerProperty(SyncPlayerProperty&& from) noexcept
    : SyncPlayerProperty() {
    *this = ::std::move(from);
  }

  inline SyncPlayerProperty& operator=(const SyncPlayerProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerProperty& operator=(SyncPlayerProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayerProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayerProperty* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerProperty*>(
               &_SyncPlayerProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(SyncPlayerProperty& a, SyncPlayerProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerProperty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerProperty* New() const final {
    return CreateMaybeMessage<SyncPlayerProperty>(nullptr);
  }

  SyncPlayerProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerProperty& from);
  void MergeFrom(const SyncPlayerProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayerProperty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SyncPlayerProperty_PlayerPropertyType PlayerPropertyType;
  static constexpr PlayerPropertyType Level =
    SyncPlayerProperty_PlayerPropertyType_Level;
  static constexpr PlayerPropertyType Exp =
    SyncPlayerProperty_PlayerPropertyType_Exp;
  static constexpr PlayerPropertyType Gold =
    SyncPlayerProperty_PlayerPropertyType_Gold;
  static constexpr PlayerPropertyType Diamond =
    SyncPlayerProperty_PlayerPropertyType_Diamond;
  static inline bool PlayerPropertyType_IsValid(int value) {
    return SyncPlayerProperty_PlayerPropertyType_IsValid(value);
  }
  static constexpr PlayerPropertyType PlayerPropertyType_MIN =
    SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_MIN;
  static constexpr PlayerPropertyType PlayerPropertyType_MAX =
    SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_MAX;
  static constexpr int PlayerPropertyType_ARRAYSIZE =
    SyncPlayerProperty_PlayerPropertyType_PlayerPropertyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayerPropertyType_descriptor() {
    return SyncPlayerProperty_PlayerPropertyType_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayerPropertyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayerPropertyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayerPropertyType_Name.");
    return SyncPlayerProperty_PlayerPropertyType_Name(enum_t_value);
  }
  static inline bool PlayerPropertyType_Parse(const std::string& name,
      PlayerPropertyType* value) {
    return SyncPlayerProperty_PlayerPropertyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kValueChangeFieldNumber = 3,
    kPropertyTypeFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 value_change = 3;
  void clear_value_change();
  ::PROTOBUF_NAMESPACE_ID::int64 value_change() const;
  void set_value_change(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
  void clear_property_type();
  ::Proto::SyncPlayerProperty_PlayerPropertyType property_type() const;
  void set_property_type(::Proto::SyncPlayerProperty_PlayerPropertyType value);

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayerProperty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_change_;
  int property_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerPropertyList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayerPropertyList) */ {
 public:
  SyncPlayerPropertyList();
  virtual ~SyncPlayerPropertyList();

  SyncPlayerPropertyList(const SyncPlayerPropertyList& from);
  SyncPlayerPropertyList(SyncPlayerPropertyList&& from) noexcept
    : SyncPlayerPropertyList() {
    *this = ::std::move(from);
  }

  inline SyncPlayerPropertyList& operator=(const SyncPlayerPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerPropertyList& operator=(SyncPlayerPropertyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPlayerPropertyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayerPropertyList* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerPropertyList*>(
               &_SyncPlayerPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(SyncPlayerPropertyList& a, SyncPlayerPropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerPropertyList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerPropertyList* New() const final {
    return CreateMaybeMessage<SyncPlayerPropertyList>(nullptr);
  }

  SyncPlayerPropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerPropertyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerPropertyList& from);
  void MergeFrom(const SyncPlayerPropertyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerPropertyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayerPropertyList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .Proto.SyncPlayerProperty properties = 1;
  int properties_size() const;
  void clear_properties();
  ::Proto::SyncPlayerProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayerProperty >*
      mutable_properties();
  const ::Proto::SyncPlayerProperty& properties(int index) const;
  ::Proto::SyncPlayerProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayerProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayerPropertyList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayerProperty > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestChangeTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestChangeTeam) */ {
 public:
  RequestChangeTeam();
  virtual ~RequestChangeTeam();

  RequestChangeTeam(const RequestChangeTeam& from);
  RequestChangeTeam(RequestChangeTeam&& from) noexcept
    : RequestChangeTeam() {
    *this = ::std::move(from);
  }

  inline RequestChangeTeam& operator=(const RequestChangeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestChangeTeam& operator=(RequestChangeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestChangeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestChangeTeam* internal_default_instance() {
    return reinterpret_cast<const RequestChangeTeam*>(
               &_RequestChangeTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(RequestChangeTeam& a, RequestChangeTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestChangeTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestChangeTeam* New() const final {
    return CreateMaybeMessage<RequestChangeTeam>(nullptr);
  }

  RequestChangeTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestChangeTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestChangeTeam& from);
  void MergeFrom(const RequestChangeTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestChangeTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestChangeTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kTeamTypeFieldNumber = 1,
  };
  // repeated .Proto.CardTeam cards = 2;
  int cards_size() const;
  void clear_cards();
  ::Proto::CardTeam* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >*
      mutable_cards();
  const ::Proto::CardTeam& cards(int index) const;
  ::Proto::CardTeam* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >&
      cards() const;

  // .Proto.Team.TeamType team_type = 1;
  void clear_team_type();
  ::Proto::Team_TeamType team_type() const;
  void set_team_type(::Proto::Team_TeamType value);

  // @@protoc_insertion_point(class_scope:Proto.RequestChangeTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam > cards_;
  int team_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReseponseChangeTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReseponseChangeTeam) */ {
 public:
  ReseponseChangeTeam();
  virtual ~ReseponseChangeTeam();

  ReseponseChangeTeam(const ReseponseChangeTeam& from);
  ReseponseChangeTeam(ReseponseChangeTeam&& from) noexcept
    : ReseponseChangeTeam() {
    *this = ::std::move(from);
  }

  inline ReseponseChangeTeam& operator=(const ReseponseChangeTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReseponseChangeTeam& operator=(ReseponseChangeTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReseponseChangeTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReseponseChangeTeam* internal_default_instance() {
    return reinterpret_cast<const ReseponseChangeTeam*>(
               &_ReseponseChangeTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ReseponseChangeTeam& a, ReseponseChangeTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReseponseChangeTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReseponseChangeTeam* New() const final {
    return CreateMaybeMessage<ReseponseChangeTeam>(nullptr);
  }

  ReseponseChangeTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReseponseChangeTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReseponseChangeTeam& from);
  void MergeFrom(const ReseponseChangeTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReseponseChangeTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReseponseChangeTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kTeamTypeFieldNumber = 1,
  };
  // repeated .Proto.CardTeam cards = 2;
  int cards_size() const;
  void clear_cards();
  ::Proto::CardTeam* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >*
      mutable_cards();
  const ::Proto::CardTeam& cards(int index) const;
  ::Proto::CardTeam* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >&
      cards() const;

  // .Proto.Team.TeamType team_type = 1;
  void clear_team_type();
  ::Proto::Team_TeamType team_type() const;
  void set_team_type(::Proto::Team_TeamType value);

  // @@protoc_insertion_point(class_scope:Proto.ReseponseChangeTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam > cards_;
  int team_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqCardLevelUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqCardLevelUp) */ {
 public:
  ReqCardLevelUp();
  virtual ~ReqCardLevelUp();

  ReqCardLevelUp(const ReqCardLevelUp& from);
  ReqCardLevelUp(ReqCardLevelUp&& from) noexcept
    : ReqCardLevelUp() {
    *this = ::std::move(from);
  }

  inline ReqCardLevelUp& operator=(const ReqCardLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCardLevelUp& operator=(ReqCardLevelUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCardLevelUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCardLevelUp* internal_default_instance() {
    return reinterpret_cast<const ReqCardLevelUp*>(
               &_ReqCardLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(ReqCardLevelUp& a, ReqCardLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCardLevelUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCardLevelUp* New() const final {
    return CreateMaybeMessage<ReqCardLevelUp>(nullptr);
  }

  ReqCardLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCardLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCardLevelUp& from);
  void MergeFrom(const ReqCardLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCardLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqCardLevelUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialFieldNumber = 3,
    kCardIDFieldNumber = 1,
    kIsOneKeyFieldNumber = 2,
    kOperatorTypeFieldNumber = 4,
  };
  // repeated .Proto.Item material = 3;
  int material_size() const;
  void clear_material();
  ::Proto::Item* mutable_material(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >*
      mutable_material();
  const ::Proto::Item& material(int index) const;
  ::Proto::Item* add_material();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >&
      material() const;

  // int32 cardID = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool isOneKey = 2;
  void clear_isonekey();
  bool isonekey() const;
  void set_isonekey(bool value);

  // int32 operator_type = 4;
  void clear_operator_type();
  ::PROTOBUF_NAMESPACE_ID::int32 operator_type() const;
  void set_operator_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqCardLevelUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item > material_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  bool isonekey_;
  ::PROTOBUF_NAMESPACE_ID::int32 operator_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqCardStar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqCardStar) */ {
 public:
  ReqCardStar();
  virtual ~ReqCardStar();

  ReqCardStar(const ReqCardStar& from);
  ReqCardStar(ReqCardStar&& from) noexcept
    : ReqCardStar() {
    *this = ::std::move(from);
  }

  inline ReqCardStar& operator=(const ReqCardStar& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCardStar& operator=(ReqCardStar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCardStar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCardStar* internal_default_instance() {
    return reinterpret_cast<const ReqCardStar*>(
               &_ReqCardStar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ReqCardStar& a, ReqCardStar& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCardStar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCardStar* New() const final {
    return CreateMaybeMessage<ReqCardStar>(nullptr);
  }

  ReqCardStar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCardStar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCardStar& from);
  void MergeFrom(const ReqCardStar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCardStar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqCardStar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialItemsFieldNumber = 2,
    kCardIDFieldNumber = 1,
  };
  // repeated .Proto.ItemBase materialItems = 2;
  int materialitems_size() const;
  void clear_materialitems();
  ::Proto::ItemBase* mutable_materialitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >*
      mutable_materialitems();
  const ::Proto::ItemBase& materialitems(int index) const;
  ::Proto::ItemBase* add_materialitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >&
      materialitems() const;

  // int32 cardID = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqCardStar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase > materialitems_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqCardQlt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqCardQlt) */ {
 public:
  ReqCardQlt();
  virtual ~ReqCardQlt();

  ReqCardQlt(const ReqCardQlt& from);
  ReqCardQlt(ReqCardQlt&& from) noexcept
    : ReqCardQlt() {
    *this = ::std::move(from);
  }

  inline ReqCardQlt& operator=(const ReqCardQlt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCardQlt& operator=(ReqCardQlt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCardQlt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCardQlt* internal_default_instance() {
    return reinterpret_cast<const ReqCardQlt*>(
               &_ReqCardQlt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ReqCardQlt& a, ReqCardQlt& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCardQlt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCardQlt* New() const final {
    return CreateMaybeMessage<ReqCardQlt>(nullptr);
  }

  ReqCardQlt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCardQlt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCardQlt& from);
  void MergeFrom(const ReqCardQlt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCardQlt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqCardQlt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialItemsFieldNumber = 2,
    kQltCardIDFieldNumber = 1,
  };
  // repeated .Proto.ItemBase materialItems = 2;
  int materialitems_size() const;
  void clear_materialitems();
  ::Proto::ItemBase* mutable_materialitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >*
      mutable_materialitems();
  const ::Proto::ItemBase& materialitems(int index) const;
  ::Proto::ItemBase* add_materialitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >&
      materialitems() const;

  // int32 qltCardID = 1;
  void clear_qltcardid();
  ::PROTOBUF_NAMESPACE_ID::int32 qltcardid() const;
  void set_qltcardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqCardQlt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase > materialitems_;
  ::PROTOBUF_NAMESPACE_ID::int32 qltcardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResCardLevel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResCardLevel) */ {
 public:
  ResCardLevel();
  virtual ~ResCardLevel();

  ResCardLevel(const ResCardLevel& from);
  ResCardLevel(ResCardLevel&& from) noexcept
    : ResCardLevel() {
    *this = ::std::move(from);
  }

  inline ResCardLevel& operator=(const ResCardLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCardLevel& operator=(ResCardLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCardLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCardLevel* internal_default_instance() {
    return reinterpret_cast<const ResCardLevel*>(
               &_ResCardLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ResCardLevel& a, ResCardLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(ResCardLevel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResCardLevel* New() const final {
    return CreateMaybeMessage<ResCardLevel>(nullptr);
  }

  ResCardLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCardLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCardLevel& from);
  void MergeFrom(const ResCardLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCardLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResCardLevel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResCardLevel_ResCode ResCode;
  static constexpr ResCode succeed =
    ResCardLevel_ResCode_succeed;
  static constexpr ResCode playerlevellimit =
    ResCardLevel_ResCode_playerlevellimit;
  static constexpr ResCode noitem =
    ResCardLevel_ResCode_noitem;
  static constexpr ResCode cardlevelmax =
    ResCardLevel_ResCode_cardlevelmax;
  static constexpr ResCode notReachQlt =
    ResCardLevel_ResCode_notReachQlt;
  static constexpr ResCode error =
    ResCardLevel_ResCode_error;
  static inline bool ResCode_IsValid(int value) {
    return ResCardLevel_ResCode_IsValid(value);
  }
  static constexpr ResCode ResCode_MIN =
    ResCardLevel_ResCode_ResCode_MIN;
  static constexpr ResCode ResCode_MAX =
    ResCardLevel_ResCode_ResCode_MAX;
  static constexpr int ResCode_ARRAYSIZE =
    ResCardLevel_ResCode_ResCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResCode_descriptor() {
    return ResCardLevel_ResCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ResCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResCode_Name.");
    return ResCardLevel_ResCode_Name(enum_t_value);
  }
  static inline bool ResCode_Parse(const std::string& name,
      ResCode* value) {
    return ResCardLevel_ResCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewcardFieldNumber = 3,
    kRescodeFieldNumber = 1,
    kIsOneKeyFieldNumber = 2,
    kDetalfightpowerFieldNumber = 4,
  };
  // .Proto.Card newcard = 3;
  bool has_newcard() const;
  void clear_newcard();
  const ::Proto::Card& newcard() const;
  ::Proto::Card* release_newcard();
  ::Proto::Card* mutable_newcard();
  void set_allocated_newcard(::Proto::Card* newcard);

  // .Proto.ResCardLevel.ResCode rescode = 1;
  void clear_rescode();
  ::Proto::ResCardLevel_ResCode rescode() const;
  void set_rescode(::Proto::ResCardLevel_ResCode value);

  // int32 isOneKey = 2;
  void clear_isonekey();
  ::PROTOBUF_NAMESPACE_ID::int32 isonekey() const;
  void set_isonekey(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 detalfightpower = 4;
  void clear_detalfightpower();
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower() const;
  void set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResCardLevel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Card* newcard_;
  int rescode_;
  ::PROTOBUF_NAMESPACE_ID::int32 isonekey_;
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResCardStar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResCardStar) */ {
 public:
  ResCardStar();
  virtual ~ResCardStar();

  ResCardStar(const ResCardStar& from);
  ResCardStar(ResCardStar&& from) noexcept
    : ResCardStar() {
    *this = ::std::move(from);
  }

  inline ResCardStar& operator=(const ResCardStar& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCardStar& operator=(ResCardStar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCardStar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCardStar* internal_default_instance() {
    return reinterpret_cast<const ResCardStar*>(
               &_ResCardStar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ResCardStar& a, ResCardStar& b) {
    a.Swap(&b);
  }
  inline void Swap(ResCardStar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResCardStar* New() const final {
    return CreateMaybeMessage<ResCardStar>(nullptr);
  }

  ResCardStar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCardStar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCardStar& from);
  void MergeFrom(const ResCardStar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCardStar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResCardStar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResCardStar_StarResCode StarResCode;
  static constexpr StarResCode SUCCED =
    ResCardStar_StarResCode_SUCCED;
  static constexpr StarResCode NOTREACHLV =
    ResCardStar_StarResCode_NOTREACHLV;
  static constexpr StarResCode NOITEM =
    ResCardStar_StarResCode_NOITEM;
  static constexpr StarResCode STARMAX =
    ResCardStar_StarResCode_STARMAX;
  static constexpr StarResCode UNKNOWNERROR =
    ResCardStar_StarResCode_UNKNOWNERROR;
  static inline bool StarResCode_IsValid(int value) {
    return ResCardStar_StarResCode_IsValid(value);
  }
  static constexpr StarResCode StarResCode_MIN =
    ResCardStar_StarResCode_StarResCode_MIN;
  static constexpr StarResCode StarResCode_MAX =
    ResCardStar_StarResCode_StarResCode_MAX;
  static constexpr int StarResCode_ARRAYSIZE =
    ResCardStar_StarResCode_StarResCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StarResCode_descriptor() {
    return ResCardStar_StarResCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StarResCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StarResCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StarResCode_Name.");
    return ResCardStar_StarResCode_Name(enum_t_value);
  }
  static inline bool StarResCode_Parse(const std::string& name,
      StarResCode* value) {
    return ResCardStar_StarResCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewcardFieldNumber = 2,
    kStarResCodeFieldNumber = 1,
    kDetalfightpowerFieldNumber = 3,
  };
  // .Proto.Card newcard = 2;
  bool has_newcard() const;
  void clear_newcard();
  const ::Proto::Card& newcard() const;
  ::Proto::Card* release_newcard();
  ::Proto::Card* mutable_newcard();
  void set_allocated_newcard(::Proto::Card* newcard);

  // .Proto.ResCardStar.StarResCode starResCode = 1;
  void clear_starrescode();
  ::Proto::ResCardStar_StarResCode starrescode() const;
  void set_starrescode(::Proto::ResCardStar_StarResCode value);

  // int32 detalfightpower = 3;
  void clear_detalfightpower();
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower() const;
  void set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResCardStar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Card* newcard_;
  int starrescode_;
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResCardQlt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResCardQlt) */ {
 public:
  ResCardQlt();
  virtual ~ResCardQlt();

  ResCardQlt(const ResCardQlt& from);
  ResCardQlt(ResCardQlt&& from) noexcept
    : ResCardQlt() {
    *this = ::std::move(from);
  }

  inline ResCardQlt& operator=(const ResCardQlt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCardQlt& operator=(ResCardQlt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCardQlt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCardQlt* internal_default_instance() {
    return reinterpret_cast<const ResCardQlt*>(
               &_ResCardQlt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ResCardQlt& a, ResCardQlt& b) {
    a.Swap(&b);
  }
  inline void Swap(ResCardQlt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResCardQlt* New() const final {
    return CreateMaybeMessage<ResCardQlt>(nullptr);
  }

  ResCardQlt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCardQlt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCardQlt& from);
  void MergeFrom(const ResCardQlt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCardQlt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResCardQlt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResCardQlt_ResQltCode ResQltCode;
  static constexpr ResQltCode SUCCED =
    ResCardQlt_ResQltCode_SUCCED;
  static constexpr ResQltCode NOTREACHSTAR =
    ResCardQlt_ResQltCode_NOTREACHSTAR;
  static constexpr ResQltCode NOITEM =
    ResCardQlt_ResQltCode_NOITEM;
  static constexpr ResQltCode QltMAX =
    ResCardQlt_ResQltCode_QltMAX;
  static constexpr ResQltCode UNKNOWNERROR =
    ResCardQlt_ResQltCode_UNKNOWNERROR;
  static inline bool ResQltCode_IsValid(int value) {
    return ResCardQlt_ResQltCode_IsValid(value);
  }
  static constexpr ResQltCode ResQltCode_MIN =
    ResCardQlt_ResQltCode_ResQltCode_MIN;
  static constexpr ResQltCode ResQltCode_MAX =
    ResCardQlt_ResQltCode_ResQltCode_MAX;
  static constexpr int ResQltCode_ARRAYSIZE =
    ResCardQlt_ResQltCode_ResQltCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResQltCode_descriptor() {
    return ResCardQlt_ResQltCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ResQltCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResQltCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResQltCode_Name.");
    return ResCardQlt_ResQltCode_Name(enum_t_value);
  }
  static inline bool ResQltCode_Parse(const std::string& name,
      ResQltCode* value) {
    return ResCardQlt_ResQltCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewcardFieldNumber = 2,
    kQLtResCodeFieldNumber = 1,
    kDetalfightpowerFieldNumber = 3,
  };
  // .Proto.Card newcard = 2;
  bool has_newcard() const;
  void clear_newcard();
  const ::Proto::Card& newcard() const;
  ::Proto::Card* release_newcard();
  ::Proto::Card* mutable_newcard();
  void set_allocated_newcard(::Proto::Card* newcard);

  // .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
  void clear_qltrescode();
  ::Proto::ResCardQlt_ResQltCode qltrescode() const;
  void set_qltrescode(::Proto::ResCardQlt_ResQltCode value);

  // int32 detalfightpower = 3;
  void clear_detalfightpower();
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower() const;
  void set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResCardQlt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Card* newcard_;
  int qltrescode_;
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResInten :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResInten) */ {
 public:
  ResInten();
  virtual ~ResInten();

  ResInten(const ResInten& from);
  ResInten(ResInten&& from) noexcept
    : ResInten() {
    *this = ::std::move(from);
  }

  inline ResInten& operator=(const ResInten& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResInten& operator=(ResInten&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResInten& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResInten* internal_default_instance() {
    return reinterpret_cast<const ResInten*>(
               &_ResInten_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ResInten& a, ResInten& b) {
    a.Swap(&b);
  }
  inline void Swap(ResInten* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResInten* New() const final {
    return CreateMaybeMessage<ResInten>(nullptr);
  }

  ResInten* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResInten>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResInten& from);
  void MergeFrom(const ResInten& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResInten* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResInten";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResInten_ResIntenCode ResIntenCode;
  static constexpr ResIntenCode SUCCED =
    ResInten_ResIntenCode_SUCCED;
  static constexpr ResIntenCode NOTREACHCONDITION =
    ResInten_ResIntenCode_NOTREACHCONDITION;
  static constexpr ResIntenCode NOITEM =
    ResInten_ResIntenCode_NOITEM;
  static constexpr ResIntenCode INTENMAX =
    ResInten_ResIntenCode_INTENMAX;
  static constexpr ResIntenCode UNKNOWNERROR =
    ResInten_ResIntenCode_UNKNOWNERROR;
  static inline bool ResIntenCode_IsValid(int value) {
    return ResInten_ResIntenCode_IsValid(value);
  }
  static constexpr ResIntenCode ResIntenCode_MIN =
    ResInten_ResIntenCode_ResIntenCode_MIN;
  static constexpr ResIntenCode ResIntenCode_MAX =
    ResInten_ResIntenCode_ResIntenCode_MAX;
  static constexpr int ResIntenCode_ARRAYSIZE =
    ResInten_ResIntenCode_ResIntenCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResIntenCode_descriptor() {
    return ResInten_ResIntenCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ResIntenCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResIntenCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResIntenCode_Name.");
    return ResInten_ResIntenCode_Name(enum_t_value);
  }
  static inline bool ResIntenCode_Parse(const std::string& name,
      ResIntenCode* value) {
    return ResInten_ResIntenCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewcardFieldNumber = 2,
    kMyIntenResCodeFieldNumber = 1,
    kDetalfightpowerFieldNumber = 3,
  };
  // .Proto.Card newcard = 2;
  bool has_newcard() const;
  void clear_newcard();
  const ::Proto::Card& newcard() const;
  ::Proto::Card* release_newcard();
  ::Proto::Card* mutable_newcard();
  void set_allocated_newcard(::Proto::Card* newcard);

  // .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
  void clear_myintenrescode();
  ::Proto::ResInten_ResIntenCode myintenrescode() const;
  void set_myintenrescode(::Proto::ResInten_ResIntenCode value);

  // int32 detalfightpower = 3;
  void clear_detalfightpower();
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower() const;
  void set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResInten)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Card* newcard_;
  int myintenrescode_;
  ::PROTOBUF_NAMESPACE_ID::int32 detalfightpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReuqestGMAddItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReuqestGMAddItem) */ {
 public:
  ReuqestGMAddItem();
  virtual ~ReuqestGMAddItem();

  ReuqestGMAddItem(const ReuqestGMAddItem& from);
  ReuqestGMAddItem(ReuqestGMAddItem&& from) noexcept
    : ReuqestGMAddItem() {
    *this = ::std::move(from);
  }

  inline ReuqestGMAddItem& operator=(const ReuqestGMAddItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReuqestGMAddItem& operator=(ReuqestGMAddItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReuqestGMAddItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReuqestGMAddItem* internal_default_instance() {
    return reinterpret_cast<const ReuqestGMAddItem*>(
               &_ReuqestGMAddItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(ReuqestGMAddItem& a, ReuqestGMAddItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ReuqestGMAddItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReuqestGMAddItem* New() const final {
    return CreateMaybeMessage<ReuqestGMAddItem>(nullptr);
  }

  ReuqestGMAddItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReuqestGMAddItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReuqestGMAddItem& from);
  void MergeFrom(const ReuqestGMAddItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReuqestGMAddItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReuqestGMAddItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kNumFieldNumber = 3,
  };
  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReuqestGMAddItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ItemChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ItemChange) */ {
 public:
  ItemChange();
  virtual ~ItemChange();

  ItemChange(const ItemChange& from);
  ItemChange(ItemChange&& from) noexcept
    : ItemChange() {
    *this = ::std::move(from);
  }

  inline ItemChange& operator=(const ItemChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemChange& operator=(ItemChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemChange* internal_default_instance() {
    return reinterpret_cast<const ItemChange*>(
               &_ItemChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ItemChange& a, ItemChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemChange* New() const final {
    return CreateMaybeMessage<ItemChange>(nullptr);
  }

  ItemChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemChange& from);
  void MergeFrom(const ItemChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ItemChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kIdFieldNumber = 2,
    kNumFieldNumber = 3,
    kDeltaFieldNumber = 4,
    kBagIndexFieldNumber = 11,
  };
  // uint64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delta = 4;
  void clear_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 bagIndex = 11;
  void clear_bagindex();
  ::PROTOBUF_NAMESPACE_ID::int32 bagindex() const;
  void set_bagindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ItemChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 bagindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PushItemChange_ChangeShow :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PushItemChange.ChangeShow) */ {
 public:
  PushItemChange_ChangeShow();
  virtual ~PushItemChange_ChangeShow();

  PushItemChange_ChangeShow(const PushItemChange_ChangeShow& from);
  PushItemChange_ChangeShow(PushItemChange_ChangeShow&& from) noexcept
    : PushItemChange_ChangeShow() {
    *this = ::std::move(from);
  }

  inline PushItemChange_ChangeShow& operator=(const PushItemChange_ChangeShow& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushItemChange_ChangeShow& operator=(PushItemChange_ChangeShow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushItemChange_ChangeShow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushItemChange_ChangeShow* internal_default_instance() {
    return reinterpret_cast<const PushItemChange_ChangeShow*>(
               &_PushItemChange_ChangeShow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(PushItemChange_ChangeShow& a, PushItemChange_ChangeShow& b) {
    a.Swap(&b);
  }
  inline void Swap(PushItemChange_ChangeShow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushItemChange_ChangeShow* New() const final {
    return CreateMaybeMessage<PushItemChange_ChangeShow>(nullptr);
  }

  PushItemChange_ChangeShow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushItemChange_ChangeShow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushItemChange_ChangeShow& from);
  void MergeFrom(const PushItemChange_ChangeShow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushItemChange_ChangeShow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PushItemChange.ChangeShow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDeltaFieldNumber = 2,
    kReplaceFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delta = 2;
  void clear_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 replace = 3;
  void clear_replace();
  ::PROTOBUF_NAMESPACE_ID::int32 replace() const;
  void set_replace(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PushItemChange.ChangeShow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 replace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class PushItemChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.PushItemChange) */ {
 public:
  PushItemChange();
  virtual ~PushItemChange();

  PushItemChange(const PushItemChange& from);
  PushItemChange(PushItemChange&& from) noexcept
    : PushItemChange() {
    *this = ::std::move(from);
  }

  inline PushItemChange& operator=(const PushItemChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushItemChange& operator=(PushItemChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushItemChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushItemChange* internal_default_instance() {
    return reinterpret_cast<const PushItemChange*>(
               &_PushItemChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(PushItemChange& a, PushItemChange& b) {
    a.Swap(&b);
  }
  inline void Swap(PushItemChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushItemChange* New() const final {
    return CreateMaybeMessage<PushItemChange>(nullptr);
  }

  PushItemChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushItemChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushItemChange& from);
  void MergeFrom(const PushItemChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushItemChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.PushItemChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PushItemChange_ChangeShow ChangeShow;

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 1,
    kShowFieldNumber = 3,
    kSourceFieldNumber = 2,
  };
  // repeated .Proto.ItemChange changes = 1;
  int changes_size() const;
  void clear_changes();
  ::Proto::ItemChange* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemChange >*
      mutable_changes();
  const ::Proto::ItemChange& changes(int index) const;
  ::Proto::ItemChange* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemChange >&
      changes() const;

  // repeated .Proto.PushItemChange.ChangeShow show = 3;
  int show_size() const;
  void clear_show();
  ::Proto::PushItemChange_ChangeShow* mutable_show(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >*
      mutable_show();
  const ::Proto::PushItemChange_ChangeShow& show(int index) const;
  ::Proto::PushItemChange_ChangeShow* add_show();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >&
      show() const;

  // int32 source = 2;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.PushItemChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemChange > changes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow > show_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestUseItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestUseItem) */ {
 public:
  RequestUseItem();
  virtual ~RequestUseItem();

  RequestUseItem(const RequestUseItem& from);
  RequestUseItem(RequestUseItem&& from) noexcept
    : RequestUseItem() {
    *this = ::std::move(from);
  }

  inline RequestUseItem& operator=(const RequestUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestUseItem& operator=(RequestUseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestUseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestUseItem* internal_default_instance() {
    return reinterpret_cast<const RequestUseItem*>(
               &_RequestUseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(RequestUseItem& a, RequestUseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestUseItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestUseItem* New() const final {
    return CreateMaybeMessage<RequestUseItem>(nullptr);
  }

  RequestUseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestUseItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestUseItem& from);
  void MergeFrom(const RequestUseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestUseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestUseItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestUseItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResponseUseItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResponseUseItem) */ {
 public:
  ResponseUseItem();
  virtual ~ResponseUseItem();

  ResponseUseItem(const ResponseUseItem& from);
  ResponseUseItem(ResponseUseItem&& from) noexcept
    : ResponseUseItem() {
    *this = ::std::move(from);
  }

  inline ResponseUseItem& operator=(const ResponseUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseUseItem& operator=(ResponseUseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseUseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseUseItem* internal_default_instance() {
    return reinterpret_cast<const ResponseUseItem*>(
               &_ResponseUseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(ResponseUseItem& a, ResponseUseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseUseItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseUseItem* New() const final {
    return CreateMaybeMessage<ResponseUseItem>(nullptr);
  }

  ResponseUseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseUseItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseUseItem& from);
  void MergeFrom(const ResponseUseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseUseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResponseUseItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.ResponseUseItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestSortBag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestSortBag) */ {
 public:
  RequestSortBag();
  virtual ~RequestSortBag();

  RequestSortBag(const RequestSortBag& from);
  RequestSortBag(RequestSortBag&& from) noexcept
    : RequestSortBag() {
    *this = ::std::move(from);
  }

  inline RequestSortBag& operator=(const RequestSortBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSortBag& operator=(RequestSortBag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSortBag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSortBag* internal_default_instance() {
    return reinterpret_cast<const RequestSortBag*>(
               &_RequestSortBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(RequestSortBag& a, RequestSortBag& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSortBag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSortBag* New() const final {
    return CreateMaybeMessage<RequestSortBag>(nullptr);
  }

  RequestSortBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSortBag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSortBag& from);
  void MergeFrom(const RequestSortBag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSortBag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestSortBag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.RequestSortBag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResponseSortBag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResponseSortBag) */ {
 public:
  ResponseSortBag();
  virtual ~ResponseSortBag();

  ResponseSortBag(const ResponseSortBag& from);
  ResponseSortBag(ResponseSortBag&& from) noexcept
    : ResponseSortBag() {
    *this = ::std::move(from);
  }

  inline ResponseSortBag& operator=(const ResponseSortBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseSortBag& operator=(ResponseSortBag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseSortBag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseSortBag* internal_default_instance() {
    return reinterpret_cast<const ResponseSortBag*>(
               &_ResponseSortBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(ResponseSortBag& a, ResponseSortBag& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseSortBag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseSortBag* New() const final {
    return CreateMaybeMessage<ResponseSortBag>(nullptr);
  }

  ResponseSortBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseSortBag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseSortBag& from);
  void MergeFrom(const ResponseSortBag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseSortBag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResponseSortBag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagsFieldNumber = 1,
    kItemsFieldNumber = 2,
  };
  // repeated uint64 bags = 1;
  int bags_size() const;
  void clear_bags();
  ::PROTOBUF_NAMESPACE_ID::uint64 bags(int index) const;
  void set_bags(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bags();

  // repeated .Proto.Item items = 2;
  int items_size() const;
  void clear_items();
  ::Proto::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >*
      mutable_items();
  const ::Proto::Item& items(int index) const;
  ::Proto::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:Proto.ResponseSortBag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bags_;
  mutable std::atomic<int> _bags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestSellItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestSellItem) */ {
 public:
  RequestSellItem();
  virtual ~RequestSellItem();

  RequestSellItem(const RequestSellItem& from);
  RequestSellItem(RequestSellItem&& from) noexcept
    : RequestSellItem() {
    *this = ::std::move(from);
  }

  inline RequestSellItem& operator=(const RequestSellItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSellItem& operator=(RequestSellItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSellItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSellItem* internal_default_instance() {
    return reinterpret_cast<const RequestSellItem*>(
               &_RequestSellItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(RequestSellItem& a, RequestSellItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSellItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSellItem* New() const final {
    return CreateMaybeMessage<RequestSellItem>(nullptr);
  }

  RequestSellItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSellItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSellItem& from);
  void MergeFrom(const RequestSellItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSellItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestSellItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int64 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestSellItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResponseSellItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResponseSellItem) */ {
 public:
  ResponseSellItem();
  virtual ~ResponseSellItem();

  ResponseSellItem(const ResponseSellItem& from);
  ResponseSellItem(ResponseSellItem&& from) noexcept
    : ResponseSellItem() {
    *this = ::std::move(from);
  }

  inline ResponseSellItem& operator=(const ResponseSellItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseSellItem& operator=(ResponseSellItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseSellItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseSellItem* internal_default_instance() {
    return reinterpret_cast<const ResponseSellItem*>(
               &_ResponseSellItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(ResponseSellItem& a, ResponseSellItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseSellItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseSellItem* New() const final {
    return CreateMaybeMessage<ResponseSellItem>(nullptr);
  }

  ResponseSellItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseSellItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseSellItem& from);
  void MergeFrom(const ResponseSellItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseSellItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResponseSellItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.ResponseSellItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RequestGachaPull :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.RequestGachaPull) */ {
 public:
  RequestGachaPull();
  virtual ~RequestGachaPull();

  RequestGachaPull(const RequestGachaPull& from);
  RequestGachaPull(RequestGachaPull&& from) noexcept
    : RequestGachaPull() {
    *this = ::std::move(from);
  }

  inline RequestGachaPull& operator=(const RequestGachaPull& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGachaPull& operator=(RequestGachaPull&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestGachaPull& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestGachaPull* internal_default_instance() {
    return reinterpret_cast<const RequestGachaPull*>(
               &_RequestGachaPull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(RequestGachaPull& a, RequestGachaPull& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGachaPull* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGachaPull* New() const final {
    return CreateMaybeMessage<RequestGachaPull>(nullptr);
  }

  RequestGachaPull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGachaPull>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGachaPull& from);
  void MergeFrom(const RequestGachaPull& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGachaPull* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.RequestGachaPull";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolIdFieldNumber = 1,
    kSingleFieldNumber = 2,
    kCostTypeFieldNumber = 3,
  };
  // int32 poolId = 1;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool single = 2;
  void clear_single();
  bool single() const;
  void set_single(bool value);

  // uint32 costType = 3;
  void clear_costtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype() const;
  void set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.RequestGachaPull)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  bool single_;
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResponseGachaPull :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResponseGachaPull) */ {
 public:
  ResponseGachaPull();
  virtual ~ResponseGachaPull();

  ResponseGachaPull(const ResponseGachaPull& from);
  ResponseGachaPull(ResponseGachaPull&& from) noexcept
    : ResponseGachaPull() {
    *this = ::std::move(from);
  }

  inline ResponseGachaPull& operator=(const ResponseGachaPull& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseGachaPull& operator=(ResponseGachaPull&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseGachaPull& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseGachaPull* internal_default_instance() {
    return reinterpret_cast<const ResponseGachaPull*>(
               &_ResponseGachaPull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(ResponseGachaPull& a, ResponseGachaPull& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseGachaPull* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseGachaPull* New() const final {
    return CreateMaybeMessage<ResponseGachaPull>(nullptr);
  }

  ResponseGachaPull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseGachaPull>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseGachaPull& from);
  void MergeFrom(const ResponseGachaPull& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseGachaPull* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResponseGachaPull";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kPoolIdFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // repeated .Proto.PushItemChange.ChangeShow items = 1;
  int items_size() const;
  void clear_items();
  ::Proto::PushItemChange_ChangeShow* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >*
      mutable_items();
  const ::Proto::PushItemChange_ChangeShow& items(int index) const;
  ::Proto::PushItemChange_ChangeShow* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >&
      items() const;

  // int32 poolId = 2;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResponseGachaPull)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow > items_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBQueryPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBQueryPlayer) */ {
 public:
  DBQueryPlayer();
  virtual ~DBQueryPlayer();

  DBQueryPlayer(const DBQueryPlayer& from);
  DBQueryPlayer(DBQueryPlayer&& from) noexcept
    : DBQueryPlayer() {
    *this = ::std::move(from);
  }

  inline DBQueryPlayer& operator=(const DBQueryPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBQueryPlayer& operator=(DBQueryPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBQueryPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBQueryPlayer* internal_default_instance() {
    return reinterpret_cast<const DBQueryPlayer*>(
               &_DBQueryPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(DBQueryPlayer& a, DBQueryPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DBQueryPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBQueryPlayer* New() const final {
    return CreateMaybeMessage<DBQueryPlayer>(nullptr);
  }

  DBQueryPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBQueryPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBQueryPlayer& from);
  void MergeFrom(const DBQueryPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBQueryPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBQueryPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kUuidFieldNumber = 3,
    kServerIdFieldNumber = 1,
  };
  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBQueryPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBQueryPlayerRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBQueryPlayerRet) */ {
 public:
  DBQueryPlayerRet();
  virtual ~DBQueryPlayerRet();

  DBQueryPlayerRet(const DBQueryPlayerRet& from);
  DBQueryPlayerRet(DBQueryPlayerRet&& from) noexcept
    : DBQueryPlayerRet() {
    *this = ::std::move(from);
  }

  inline DBQueryPlayerRet& operator=(const DBQueryPlayerRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBQueryPlayerRet& operator=(DBQueryPlayerRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBQueryPlayerRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBQueryPlayerRet* internal_default_instance() {
    return reinterpret_cast<const DBQueryPlayerRet*>(
               &_DBQueryPlayerRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(DBQueryPlayerRet& a, DBQueryPlayerRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DBQueryPlayerRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBQueryPlayerRet* New() const final {
    return CreateMaybeMessage<DBQueryPlayerRet>(nullptr);
  }

  DBQueryPlayerRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBQueryPlayerRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBQueryPlayerRet& from);
  void MergeFrom(const DBQueryPlayerRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBQueryPlayerRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBQueryPlayerRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBQueryPlayerRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBCreatePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBCreatePlayer) */ {
 public:
  DBCreatePlayer();
  virtual ~DBCreatePlayer();

  DBCreatePlayer(const DBCreatePlayer& from);
  DBCreatePlayer(DBCreatePlayer&& from) noexcept
    : DBCreatePlayer() {
    *this = ::std::move(from);
  }

  inline DBCreatePlayer& operator=(const DBCreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBCreatePlayer& operator=(DBCreatePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBCreatePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBCreatePlayer* internal_default_instance() {
    return reinterpret_cast<const DBCreatePlayer*>(
               &_DBCreatePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(DBCreatePlayer& a, DBCreatePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DBCreatePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBCreatePlayer* New() const final {
    return CreateMaybeMessage<DBCreatePlayer>(nullptr);
  }

  DBCreatePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBCreatePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBCreatePlayer& from);
  void MergeFrom(const DBCreatePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBCreatePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBCreatePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kUuidFieldNumber = 3,
    kPlayerFieldNumber = 4,
    kServerIdFieldNumber = 1,
  };
  // string channel = 2;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // .Proto.Player player = 4;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBCreatePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBCreatePlayerRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBCreatePlayerRet) */ {
 public:
  DBCreatePlayerRet();
  virtual ~DBCreatePlayerRet();

  DBCreatePlayerRet(const DBCreatePlayerRet& from);
  DBCreatePlayerRet(DBCreatePlayerRet&& from) noexcept
    : DBCreatePlayerRet() {
    *this = ::std::move(from);
  }

  inline DBCreatePlayerRet& operator=(const DBCreatePlayerRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBCreatePlayerRet& operator=(DBCreatePlayerRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBCreatePlayerRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBCreatePlayerRet* internal_default_instance() {
    return reinterpret_cast<const DBCreatePlayerRet*>(
               &_DBCreatePlayerRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(DBCreatePlayerRet& a, DBCreatePlayerRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DBCreatePlayerRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBCreatePlayerRet* New() const final {
    return CreateMaybeMessage<DBCreatePlayerRet>(nullptr);
  }

  DBCreatePlayerRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBCreatePlayerRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBCreatePlayerRet& from);
  void MergeFrom(const DBCreatePlayerRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBCreatePlayerRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBCreatePlayerRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBCreatePlayerRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBSavePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBSavePlayer) */ {
 public:
  DBSavePlayer();
  virtual ~DBSavePlayer();

  DBSavePlayer(const DBSavePlayer& from);
  DBSavePlayer(DBSavePlayer&& from) noexcept
    : DBSavePlayer() {
    *this = ::std::move(from);
  }

  inline DBSavePlayer& operator=(const DBSavePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSavePlayer& operator=(DBSavePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBSavePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBSavePlayer* internal_default_instance() {
    return reinterpret_cast<const DBSavePlayer*>(
               &_DBSavePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(DBSavePlayer& a, DBSavePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSavePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBSavePlayer* New() const final {
    return CreateMaybeMessage<DBSavePlayer>(nullptr);
  }

  DBSavePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBSavePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBSavePlayer& from);
  void MergeFrom(const DBSavePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSavePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBSavePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSaveModeFieldNumber = 1,
  };
  // .Proto.Player player = 2;
  bool has_player() const;
  void clear_player();
  const ::Proto::Player& player() const;
  ::Proto::Player* release_player();
  ::Proto::Player* mutable_player();
  void set_allocated_player(::Proto::Player* player);

  // .Proto.ESaveMode save_mode = 1;
  void clear_save_mode();
  ::Proto::ESaveMode save_mode() const;
  void set_save_mode(::Proto::ESaveMode value);

  // @@protoc_insertion_point(class_scope:Proto.DBSavePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Player* player_;
  int save_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBSavePlayerRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBSavePlayerRet) */ {
 public:
  DBSavePlayerRet();
  virtual ~DBSavePlayerRet();

  DBSavePlayerRet(const DBSavePlayerRet& from);
  DBSavePlayerRet(DBSavePlayerRet&& from) noexcept
    : DBSavePlayerRet() {
    *this = ::std::move(from);
  }

  inline DBSavePlayerRet& operator=(const DBSavePlayerRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSavePlayerRet& operator=(DBSavePlayerRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBSavePlayerRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBSavePlayerRet* internal_default_instance() {
    return reinterpret_cast<const DBSavePlayerRet*>(
               &_DBSavePlayerRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(DBSavePlayerRet& a, DBSavePlayerRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSavePlayerRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBSavePlayerRet* New() const final {
    return CreateMaybeMessage<DBSavePlayerRet>(nullptr);
  }

  DBSavePlayerRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBSavePlayerRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBSavePlayerRet& from);
  void MergeFrom(const DBSavePlayerRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSavePlayerRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBSavePlayerRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBSavePlayerRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBSaveList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBSaveList) */ {
 public:
  DBSaveList();
  virtual ~DBSaveList();

  DBSaveList(const DBSaveList& from);
  DBSaveList(DBSaveList&& from) noexcept
    : DBSaveList() {
    *this = ::std::move(from);
  }

  inline DBSaveList& operator=(const DBSaveList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSaveList& operator=(DBSaveList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBSaveList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBSaveList* internal_default_instance() {
    return reinterpret_cast<const DBSaveList*>(
               &_DBSaveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(DBSaveList& a, DBSaveList& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSaveList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBSaveList* New() const final {
    return CreateMaybeMessage<DBSaveList>(nullptr);
  }

  DBSaveList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBSaveList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBSaveList& from);
  void MergeFrom(const DBSaveList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSaveList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBSaveList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.DBSaveList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBSaveListRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBSaveListRet) */ {
 public:
  DBSaveListRet();
  virtual ~DBSaveListRet();

  DBSaveListRet(const DBSaveListRet& from);
  DBSaveListRet(DBSaveListRet&& from) noexcept
    : DBSaveListRet() {
    *this = ::std::move(from);
  }

  inline DBSaveListRet& operator=(const DBSaveListRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSaveListRet& operator=(DBSaveListRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBSaveListRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBSaveListRet* internal_default_instance() {
    return reinterpret_cast<const DBSaveListRet*>(
               &_DBSaveListRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(DBSaveListRet& a, DBSaveListRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSaveListRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBSaveListRet* New() const final {
    return CreateMaybeMessage<DBSaveListRet>(nullptr);
  }

  DBSaveListRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBSaveListRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBSaveListRet& from);
  void MergeFrom(const DBSaveListRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSaveListRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBSaveListRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated .Proto.Player player_list = 2;
  int player_list_size() const;
  void clear_player_list();
  ::Proto::Player* mutable_player_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >*
      mutable_player_list();
  const ::Proto::Player& player_list(int index) const;
  ::Proto::Player* add_player_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >&
      player_list() const;

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBSaveListRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player > player_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBSaveWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBSaveWorld) */ {
 public:
  DBSaveWorld();
  virtual ~DBSaveWorld();

  DBSaveWorld(const DBSaveWorld& from);
  DBSaveWorld(DBSaveWorld&& from) noexcept
    : DBSaveWorld() {
    *this = ::std::move(from);
  }

  inline DBSaveWorld& operator=(const DBSaveWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSaveWorld& operator=(DBSaveWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBSaveWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBSaveWorld* internal_default_instance() {
    return reinterpret_cast<const DBSaveWorld*>(
               &_DBSaveWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(DBSaveWorld& a, DBSaveWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSaveWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBSaveWorld* New() const final {
    return CreateMaybeMessage<DBSaveWorld>(nullptr);
  }

  DBSaveWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBSaveWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBSaveWorld& from);
  void MergeFrom(const DBSaveWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSaveWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBSaveWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .Proto.DBWorldData data = 1;
  bool has_data() const;
  void clear_data();
  const ::Proto::DBWorldData& data() const;
  ::Proto::DBWorldData* release_data();
  ::Proto::DBWorldData* mutable_data();
  void set_allocated_data(::Proto::DBWorldData* data);

  // @@protoc_insertion_point(class_scope:Proto.DBSaveWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::DBWorldData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBSaveWorldRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBSaveWorldRet) */ {
 public:
  DBSaveWorldRet();
  virtual ~DBSaveWorldRet();

  DBSaveWorldRet(const DBSaveWorldRet& from);
  DBSaveWorldRet(DBSaveWorldRet&& from) noexcept
    : DBSaveWorldRet() {
    *this = ::std::move(from);
  }

  inline DBSaveWorldRet& operator=(const DBSaveWorldRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSaveWorldRet& operator=(DBSaveWorldRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBSaveWorldRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBSaveWorldRet* internal_default_instance() {
    return reinterpret_cast<const DBSaveWorldRet*>(
               &_DBSaveWorldRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(DBSaveWorldRet& a, DBSaveWorldRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSaveWorldRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBSaveWorldRet* New() const final {
    return CreateMaybeMessage<DBSaveWorldRet>(nullptr);
  }

  DBSaveWorldRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBSaveWorldRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBSaveWorldRet& from);
  void MergeFrom(const DBSaveWorldRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSaveWorldRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBSaveWorldRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBSaveWorldRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBQueryWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBQueryWorld) */ {
 public:
  DBQueryWorld();
  virtual ~DBQueryWorld();

  DBQueryWorld(const DBQueryWorld& from);
  DBQueryWorld(DBQueryWorld&& from) noexcept
    : DBQueryWorld() {
    *this = ::std::move(from);
  }

  inline DBQueryWorld& operator=(const DBQueryWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBQueryWorld& operator=(DBQueryWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBQueryWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBQueryWorld* internal_default_instance() {
    return reinterpret_cast<const DBQueryWorld*>(
               &_DBQueryWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(DBQueryWorld& a, DBQueryWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(DBQueryWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBQueryWorld* New() const final {
    return CreateMaybeMessage<DBQueryWorld>(nullptr);
  }

  DBQueryWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBQueryWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBQueryWorld& from);
  void MergeFrom(const DBQueryWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBQueryWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBQueryWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kWorldIdFieldNumber = 2,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 world_id = 2;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBQueryWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DBQueryWorldRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.DBQueryWorldRet) */ {
 public:
  DBQueryWorldRet();
  virtual ~DBQueryWorldRet();

  DBQueryWorldRet(const DBQueryWorldRet& from);
  DBQueryWorldRet(DBQueryWorldRet&& from) noexcept
    : DBQueryWorldRet() {
    *this = ::std::move(from);
  }

  inline DBQueryWorldRet& operator=(const DBQueryWorldRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBQueryWorldRet& operator=(DBQueryWorldRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBQueryWorldRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DBQueryWorldRet* internal_default_instance() {
    return reinterpret_cast<const DBQueryWorldRet*>(
               &_DBQueryWorldRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(DBQueryWorldRet& a, DBQueryWorldRet& b) {
    a.Swap(&b);
  }
  inline void Swap(DBQueryWorldRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBQueryWorldRet* New() const final {
    return CreateMaybeMessage<DBQueryWorldRet>(nullptr);
  }

  DBQueryWorldRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBQueryWorldRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBQueryWorldRet& from);
  void MergeFrom(const DBQueryWorldRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBQueryWorldRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.DBQueryWorldRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Proto.DBWorldData data = 2;
  bool has_data() const;
  void clear_data();
  const ::Proto::DBWorldData& data() const;
  ::Proto::DBWorldData* release_data();
  ::Proto::DBWorldData* mutable_data();
  void set_allocated_data(::Proto::DBWorldData* data);

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.DBQueryWorldRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::DBWorldData* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleDamage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleDamage) */ {
 public:
  BattleDamage();
  virtual ~BattleDamage();

  BattleDamage(const BattleDamage& from);
  BattleDamage(BattleDamage&& from) noexcept
    : BattleDamage() {
    *this = ::std::move(from);
  }

  inline BattleDamage& operator=(const BattleDamage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleDamage& operator=(BattleDamage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleDamage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleDamage* internal_default_instance() {
    return reinterpret_cast<const BattleDamage*>(
               &_BattleDamage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(BattleDamage& a, BattleDamage& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleDamage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleDamage* New() const final {
    return CreateMaybeMessage<BattleDamage>(nullptr);
  }

  BattleDamage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleDamage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleDamage& from);
  void MergeFrom(const BattleDamage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleDamage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleDamage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // int32 pos = 1;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 damage = 2;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::int32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BattleDamage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleAction) */ {
 public:
  BattleAction();
  virtual ~BattleAction();

  BattleAction(const BattleAction& from);
  BattleAction(BattleAction&& from) noexcept
    : BattleAction() {
    *this = ::std::move(from);
  }

  inline BattleAction& operator=(const BattleAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleAction& operator=(BattleAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleAction* internal_default_instance() {
    return reinterpret_cast<const BattleAction*>(
               &_BattleAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(BattleAction& a, BattleAction& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleAction* New() const final {
    return CreateMaybeMessage<BattleAction>(nullptr);
  }

  BattleAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleAction& from);
  void MergeFrom(const BattleAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDamageFieldNumber = 5,
    kOwnerSnFieldNumber = 1,
    kPosFieldNumber = 2,
    kSkillIdFieldNumber = 3,
    kActionTypeFieldNumber = 4,
  };
  // repeated .Proto.BattleDamage damage = 5;
  int damage_size() const;
  void clear_damage();
  ::Proto::BattleDamage* mutable_damage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleDamage >*
      mutable_damage();
  const ::Proto::BattleDamage& damage(int index) const;
  ::Proto::BattleDamage* add_damage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleDamage >&
      damage() const;

  // uint64 owner_sn = 1;
  void clear_owner_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_sn() const;
  void set_owner_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 pos = 2;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 skill_id = 3;
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .Proto.BattleActionType action_type = 4;
  void clear_action_type();
  ::Proto::BattleActionType action_type() const;
  void set_action_type(::Proto::BattleActionType value);

  // @@protoc_insertion_point(class_scope:Proto.BattleAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleDamage > damage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 skill_id_;
  int action_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleActionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleActionList) */ {
 public:
  BattleActionList();
  virtual ~BattleActionList();

  BattleActionList(const BattleActionList& from);
  BattleActionList(BattleActionList&& from) noexcept
    : BattleActionList() {
    *this = ::std::move(from);
  }

  inline BattleActionList& operator=(const BattleActionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleActionList& operator=(BattleActionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleActionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleActionList* internal_default_instance() {
    return reinterpret_cast<const BattleActionList*>(
               &_BattleActionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(BattleActionList& a, BattleActionList& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleActionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleActionList* New() const final {
    return CreateMaybeMessage<BattleActionList>(nullptr);
  }

  BattleActionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleActionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleActionList& from);
  void MergeFrom(const BattleActionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleActionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleActionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .Proto.BattleAction actions = 1;
  int actions_size() const;
  void clear_actions();
  ::Proto::BattleAction* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleAction >*
      mutable_actions();
  const ::Proto::BattleAction& actions(int index) const;
  ::Proto::BattleAction* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleAction >&
      actions() const;

  // @@protoc_insertion_point(class_scope:Proto.BattleActionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleAction > actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleJoin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleJoin) */ {
 public:
  BattleJoin();
  virtual ~BattleJoin();

  BattleJoin(const BattleJoin& from);
  BattleJoin(BattleJoin&& from) noexcept
    : BattleJoin() {
    *this = ::std::move(from);
  }

  inline BattleJoin& operator=(const BattleJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleJoin& operator=(BattleJoin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleJoin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleJoin* internal_default_instance() {
    return reinterpret_cast<const BattleJoin*>(
               &_BattleJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(BattleJoin& a, BattleJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleJoin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleJoin* New() const final {
    return CreateMaybeMessage<BattleJoin>(nullptr);
  }

  BattleJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleJoin& from);
  void MergeFrom(const BattleJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleJoin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.BattleJoin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleCreate) */ {
 public:
  BattleCreate();
  virtual ~BattleCreate();

  BattleCreate(const BattleCreate& from);
  BattleCreate(BattleCreate&& from) noexcept
    : BattleCreate() {
    *this = ::std::move(from);
  }

  inline BattleCreate& operator=(const BattleCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleCreate& operator=(BattleCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleCreate* internal_default_instance() {
    return reinterpret_cast<const BattleCreate*>(
               &_BattleCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(BattleCreate& a, BattleCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleCreate* New() const final {
    return CreateMaybeMessage<BattleCreate>(nullptr);
  }

  BattleCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleCreate& from);
  void MergeFrom(const BattleCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterTeamIdFieldNumber = 1,
  };
  // int32 monster_team_id = 1;
  void clear_monster_team_id();
  ::PROTOBUF_NAMESPACE_ID::int32 monster_team_id() const;
  void set_monster_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BattleCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 monster_team_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleView) */ {
 public:
  BattleView();
  virtual ~BattleView();

  BattleView(const BattleView& from);
  BattleView(BattleView&& from) noexcept
    : BattleView() {
    *this = ::std::move(from);
  }

  inline BattleView& operator=(const BattleView& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleView& operator=(BattleView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleView* internal_default_instance() {
    return reinterpret_cast<const BattleView*>(
               &_BattleView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(BattleView& a, BattleView& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleView* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleView* New() const final {
    return CreateMaybeMessage<BattleView>(nullptr);
  }

  BattleView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleView& from);
  void MergeFrom(const BattleView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSnFieldNumber = 1,
  };
  // uint64 player_sn = 1;
  void clear_player_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn() const;
  void set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Proto.BattleView)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleRs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleRs) */ {
 public:
  BattleRs();
  virtual ~BattleRs();

  BattleRs(const BattleRs& from);
  BattleRs(BattleRs&& from) noexcept
    : BattleRs() {
    *this = ::std::move(from);
  }

  inline BattleRs& operator=(const BattleRs& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleRs& operator=(BattleRs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleRs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleRs* internal_default_instance() {
    return reinterpret_cast<const BattleRs*>(
               &_BattleRs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(BattleRs& a, BattleRs& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleRs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleRs* New() const final {
    return CreateMaybeMessage<BattleRs>(nullptr);
  }

  BattleRs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleRs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleRs& from);
  void MergeFrom(const BattleRs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleRs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleRs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
  };
  // .Proto.RsCode return_code = 1;
  void clear_return_code();
  ::Proto::RsCode return_code() const;
  void set_return_code(::Proto::RsCode value);

  // @@protoc_insertion_point(class_scope:Proto.BattleRs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int return_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleTeam) */ {
 public:
  BattleTeam();
  virtual ~BattleTeam();

  BattleTeam(const BattleTeam& from);
  BattleTeam(BattleTeam&& from) noexcept
    : BattleTeam() {
    *this = ::std::move(from);
  }

  inline BattleTeam& operator=(const BattleTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleTeam& operator=(BattleTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleTeam* internal_default_instance() {
    return reinterpret_cast<const BattleTeam*>(
               &_BattleTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(BattleTeam& a, BattleTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleTeam* New() const final {
    return CreateMaybeMessage<BattleTeam>(nullptr);
  }

  BattleTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleTeam& from);
  void MergeFrom(const BattleTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 3,
    kOwnerSnFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // .Proto.Card card = 3;
  bool has_card() const;
  void clear_card();
  const ::Proto::Card& card() const;
  ::Proto::Card* release_card();
  ::Proto::Card* mutable_card();
  void set_allocated_card(::Proto::Card* card);

  // uint64 owner_sn = 1;
  void clear_owner_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_sn() const;
  void set_owner_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 pos = 2;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BattleTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Card* card_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleSyncTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleSyncTeam) */ {
 public:
  BattleSyncTeam();
  virtual ~BattleSyncTeam();

  BattleSyncTeam(const BattleSyncTeam& from);
  BattleSyncTeam(BattleSyncTeam&& from) noexcept
    : BattleSyncTeam() {
    *this = ::std::move(from);
  }

  inline BattleSyncTeam& operator=(const BattleSyncTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleSyncTeam& operator=(BattleSyncTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleSyncTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleSyncTeam* internal_default_instance() {
    return reinterpret_cast<const BattleSyncTeam*>(
               &_BattleSyncTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(BattleSyncTeam& a, BattleSyncTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleSyncTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleSyncTeam* New() const final {
    return CreateMaybeMessage<BattleSyncTeam>(nullptr);
  }

  BattleSyncTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleSyncTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleSyncTeam& from);
  void MergeFrom(const BattleSyncTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleSyncTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleSyncTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 2,
  };
  // repeated .Proto.BattleTeam team = 2;
  int team_size() const;
  void clear_team();
  ::Proto::BattleTeam* mutable_team(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleTeam >*
      mutable_team();
  const ::Proto::BattleTeam& team(int index) const;
  ::Proto::BattleTeam* add_team();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleTeam >&
      team() const;

  // @@protoc_insertion_point(class_scope:Proto.BattleSyncTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleTeam > team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleBegin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleBegin) */ {
 public:
  BattleBegin();
  virtual ~BattleBegin();

  BattleBegin(const BattleBegin& from);
  BattleBegin(BattleBegin&& from) noexcept
    : BattleBegin() {
    *this = ::std::move(from);
  }

  inline BattleBegin& operator=(const BattleBegin& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleBegin& operator=(BattleBegin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleBegin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleBegin* internal_default_instance() {
    return reinterpret_cast<const BattleBegin*>(
               &_BattleBegin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(BattleBegin& a, BattleBegin& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleBegin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleBegin* New() const final {
    return CreateMaybeMessage<BattleBegin>(nullptr);
  }

  BattleBegin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleBegin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleBegin& from);
  void MergeFrom(const BattleBegin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleBegin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleBegin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerSnFieldNumber = 1,
    kMonsterTeamIdFieldNumber = 2,
  };
  // uint64 owner_sn = 1;
  void clear_owner_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_sn() const;
  void set_owner_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 monster_team_id = 2;
  void clear_monster_team_id();
  ::PROTOBUF_NAMESPACE_ID::int32 monster_team_id() const;
  void set_monster_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.BattleBegin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 monster_team_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BattleEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.BattleEnd) */ {
 public:
  BattleEnd();
  virtual ~BattleEnd();

  BattleEnd(const BattleEnd& from);
  BattleEnd(BattleEnd&& from) noexcept
    : BattleEnd() {
    *this = ::std::move(from);
  }

  inline BattleEnd& operator=(const BattleEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleEnd& operator=(BattleEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleEnd* internal_default_instance() {
    return reinterpret_cast<const BattleEnd*>(
               &_BattleEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(BattleEnd& a, BattleEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleEnd* New() const final {
    return CreateMaybeMessage<BattleEnd>(nullptr);
  }

  BattleEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleEnd& from);
  void MergeFrom(const BattleEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.BattleEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.BattleEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqeustSkillLvUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqeustSkillLvUp) */ {
 public:
  ReqeustSkillLvUp();
  virtual ~ReqeustSkillLvUp();

  ReqeustSkillLvUp(const ReqeustSkillLvUp& from);
  ReqeustSkillLvUp(ReqeustSkillLvUp&& from) noexcept
    : ReqeustSkillLvUp() {
    *this = ::std::move(from);
  }

  inline ReqeustSkillLvUp& operator=(const ReqeustSkillLvUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqeustSkillLvUp& operator=(ReqeustSkillLvUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqeustSkillLvUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqeustSkillLvUp* internal_default_instance() {
    return reinterpret_cast<const ReqeustSkillLvUp*>(
               &_ReqeustSkillLvUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(ReqeustSkillLvUp& a, ReqeustSkillLvUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqeustSkillLvUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqeustSkillLvUp* New() const final {
    return CreateMaybeMessage<ReqeustSkillLvUp>(nullptr);
  }

  ReqeustSkillLvUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqeustSkillLvUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqeustSkillLvUp& from);
  void MergeFrom(const ReqeustSkillLvUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqeustSkillLvUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqeustSkillLvUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqeustSkillLvUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResponseSkillLvUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResponseSkillLvUp) */ {
 public:
  ResponseSkillLvUp();
  virtual ~ResponseSkillLvUp();

  ResponseSkillLvUp(const ResponseSkillLvUp& from);
  ResponseSkillLvUp(ResponseSkillLvUp&& from) noexcept
    : ResponseSkillLvUp() {
    *this = ::std::move(from);
  }

  inline ResponseSkillLvUp& operator=(const ResponseSkillLvUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseSkillLvUp& operator=(ResponseSkillLvUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseSkillLvUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseSkillLvUp* internal_default_instance() {
    return reinterpret_cast<const ResponseSkillLvUp*>(
               &_ResponseSkillLvUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(ResponseSkillLvUp& a, ResponseSkillLvUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseSkillLvUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseSkillLvUp* New() const final {
    return CreateMaybeMessage<ResponseSkillLvUp>(nullptr);
  }

  ResponseSkillLvUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseSkillLvUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseSkillLvUp& from);
  void MergeFrom(const ResponseSkillLvUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseSkillLvUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResponseSkillLvUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResponseSkillLvUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqeustEquipmentLvUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqeustEquipmentLvUp) */ {
 public:
  ReqeustEquipmentLvUp();
  virtual ~ReqeustEquipmentLvUp();

  ReqeustEquipmentLvUp(const ReqeustEquipmentLvUp& from);
  ReqeustEquipmentLvUp(ReqeustEquipmentLvUp&& from) noexcept
    : ReqeustEquipmentLvUp() {
    *this = ::std::move(from);
  }

  inline ReqeustEquipmentLvUp& operator=(const ReqeustEquipmentLvUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqeustEquipmentLvUp& operator=(ReqeustEquipmentLvUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqeustEquipmentLvUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqeustEquipmentLvUp* internal_default_instance() {
    return reinterpret_cast<const ReqeustEquipmentLvUp*>(
               &_ReqeustEquipmentLvUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(ReqeustEquipmentLvUp& a, ReqeustEquipmentLvUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqeustEquipmentLvUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqeustEquipmentLvUp* New() const final {
    return CreateMaybeMessage<ReqeustEquipmentLvUp>(nullptr);
  }

  ReqeustEquipmentLvUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqeustEquipmentLvUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqeustEquipmentLvUp& from);
  void MergeFrom(const ReqeustEquipmentLvUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqeustEquipmentLvUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqeustEquipmentLvUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqeustEquipmentLvUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResponseEquipmentLvUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResponseEquipmentLvUp) */ {
 public:
  ResponseEquipmentLvUp();
  virtual ~ResponseEquipmentLvUp();

  ResponseEquipmentLvUp(const ResponseEquipmentLvUp& from);
  ResponseEquipmentLvUp(ResponseEquipmentLvUp&& from) noexcept
    : ResponseEquipmentLvUp() {
    *this = ::std::move(from);
  }

  inline ResponseEquipmentLvUp& operator=(const ResponseEquipmentLvUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseEquipmentLvUp& operator=(ResponseEquipmentLvUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseEquipmentLvUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseEquipmentLvUp* internal_default_instance() {
    return reinterpret_cast<const ResponseEquipmentLvUp*>(
               &_ResponseEquipmentLvUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(ResponseEquipmentLvUp& a, ResponseEquipmentLvUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseEquipmentLvUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseEquipmentLvUp* New() const final {
    return CreateMaybeMessage<ResponseEquipmentLvUp>(nullptr);
  }

  ResponseEquipmentLvUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseEquipmentLvUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseEquipmentLvUp& from);
  void MergeFrom(const ResponseEquipmentLvUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseEquipmentLvUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResponseEquipmentLvUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResponseEquipmentLvUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqCardSkillLvUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ReqCardSkillLvUp) */ {
 public:
  ReqCardSkillLvUp();
  virtual ~ReqCardSkillLvUp();

  ReqCardSkillLvUp(const ReqCardSkillLvUp& from);
  ReqCardSkillLvUp(ReqCardSkillLvUp&& from) noexcept
    : ReqCardSkillLvUp() {
    *this = ::std::move(from);
  }

  inline ReqCardSkillLvUp& operator=(const ReqCardSkillLvUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCardSkillLvUp& operator=(ReqCardSkillLvUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqCardSkillLvUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCardSkillLvUp* internal_default_instance() {
    return reinterpret_cast<const ReqCardSkillLvUp*>(
               &_ReqCardSkillLvUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(ReqCardSkillLvUp& a, ReqCardSkillLvUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCardSkillLvUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCardSkillLvUp* New() const final {
    return CreateMaybeMessage<ReqCardSkillLvUp>(nullptr);
  }

  ReqCardSkillLvUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCardSkillLvUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCardSkillLvUp& from);
  void MergeFrom(const ReqCardSkillLvUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCardSkillLvUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ReqCardSkillLvUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestSkillFieldNumber = 2,
    kCardIDFieldNumber = 1,
  };
  // .Proto.ReqeustSkillLvUp requestSkill = 2;
  bool has_requestskill() const;
  void clear_requestskill();
  const ::Proto::ReqeustSkillLvUp& requestskill() const;
  ::Proto::ReqeustSkillLvUp* release_requestskill();
  ::Proto::ReqeustSkillLvUp* mutable_requestskill();
  void set_allocated_requestskill(::Proto::ReqeustSkillLvUp* requestskill);

  // int32 cardID = 1;
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::int32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ReqCardSkillLvUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::ReqeustSkillLvUp* requestskill_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ResCardSkillLvUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.ResCardSkillLvUp) */ {
 public:
  ResCardSkillLvUp();
  virtual ~ResCardSkillLvUp();

  ResCardSkillLvUp(const ResCardSkillLvUp& from);
  ResCardSkillLvUp(ResCardSkillLvUp&& from) noexcept
    : ResCardSkillLvUp() {
    *this = ::std::move(from);
  }

  inline ResCardSkillLvUp& operator=(const ResCardSkillLvUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResCardSkillLvUp& operator=(ResCardSkillLvUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResCardSkillLvUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResCardSkillLvUp* internal_default_instance() {
    return reinterpret_cast<const ResCardSkillLvUp*>(
               &_ResCardSkillLvUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(ResCardSkillLvUp& a, ResCardSkillLvUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResCardSkillLvUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResCardSkillLvUp* New() const final {
    return CreateMaybeMessage<ResCardSkillLvUp>(nullptr);
  }

  ResCardSkillLvUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResCardSkillLvUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResCardSkillLvUp& from);
  void MergeFrom(const ResCardSkillLvUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResCardSkillLvUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.ResCardSkillLvUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResSkillLvUpFieldNumber = 3,
    kRescodeFieldNumber = 1,
    kRescardIDFieldNumber = 2,
  };
  // .Proto.ResponseSkillLvUp resSkillLvUp = 3;
  bool has_resskilllvup() const;
  void clear_resskilllvup();
  const ::Proto::ResponseSkillLvUp& resskilllvup() const;
  ::Proto::ResponseSkillLvUp* release_resskilllvup();
  ::Proto::ResponseSkillLvUp* mutable_resskilllvup();
  void set_allocated_resskilllvup(::Proto::ResponseSkillLvUp* resskilllvup);

  // int32 rescode = 1;
  void clear_rescode();
  ::PROTOBUF_NAMESPACE_ID::int32 rescode() const;
  void set_rescode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 rescardID = 2;
  void clear_rescardid();
  ::PROTOBUF_NAMESPACE_ID::int32 rescardid() const;
  void set_rescardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.ResCardSkillLvUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::ResponseSkillLvUp* resskilllvup_;
  ::PROTOBUF_NAMESPACE_ID::int32 rescode_;
  ::PROTOBUF_NAMESPACE_ID::int32 rescardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NullMsg

// -------------------------------------------------------------------

// CmdThread

// .Proto.CmdThread.CmdType cmd_type = 1;
inline void CmdThread::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::Proto::CmdThread_CmdType CmdThread::cmd_type() const {
  // @@protoc_insertion_point(field_get:Proto.CmdThread.cmd_type)
  return static_cast< ::Proto::CmdThread_CmdType >(cmd_type_);
}
inline void CmdThread::set_cmd_type(::Proto::CmdThread_CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CmdThread.cmd_type)
}

// -------------------------------------------------------------------

// CmdApp

// .Proto.CmdApp.CmdType cmd_type = 1;
inline void CmdApp::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::Proto::CmdApp_CmdType CmdApp::cmd_type() const {
  // @@protoc_insertion_point(field_get:Proto.CmdApp.cmd_type)
  return static_cast< ::Proto::CmdApp_CmdType >(cmd_type_);
}
inline void CmdApp::set_cmd_type(::Proto::CmdApp_CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CmdApp.cmd_type)
}

// -------------------------------------------------------------------

// Efficiency

// int32 thread_type = 1;
inline void Efficiency::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Efficiency::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.Efficiency.thread_type)
  return thread_type_;
}
inline void Efficiency::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.Efficiency.thread_type)
}

// string thread_id = 2;
inline void Efficiency::clear_thread_id() {
  thread_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Efficiency::thread_id() const {
  // @@protoc_insertion_point(field_get:Proto.Efficiency.thread_id)
  return thread_id_.GetNoArena();
}
inline void Efficiency::set_thread_id(const std::string& value) {
  
  thread_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Efficiency.thread_id)
}
inline void Efficiency::set_thread_id(std::string&& value) {
  
  thread_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Efficiency.thread_id)
}
inline void Efficiency::set_thread_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thread_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Efficiency.thread_id)
}
inline void Efficiency::set_thread_id(const char* value, size_t size) {
  
  thread_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Efficiency.thread_id)
}
inline std::string* Efficiency::mutable_thread_id() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Efficiency.thread_id)
  return thread_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Efficiency::release_thread_id() {
  // @@protoc_insertion_point(field_release:Proto.Efficiency.thread_id)
  
  return thread_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Efficiency::set_allocated_thread_id(std::string* thread_id) {
  if (thread_id != nullptr) {
    
  } else {
    
  }
  thread_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thread_id);
  // @@protoc_insertion_point(field_set_allocated:Proto.Efficiency.thread_id)
}

// int64 time = 3;
inline void Efficiency::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Efficiency::time() const {
  // @@protoc_insertion_point(field_get:Proto.Efficiency.time)
  return time_;
}
inline void Efficiency::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Proto.Efficiency.time)
}

// -------------------------------------------------------------------

// AppRegister

// int32 type = 1;
inline void AppRegister::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppRegister::type() const {
  // @@protoc_insertion_point(field_get:Proto.AppRegister.type)
  return type_;
}
inline void AppRegister::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppRegister.type)
}

// int32 id = 2;
inline void AppRegister::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppRegister::id() const {
  // @@protoc_insertion_point(field_get:Proto.AppRegister.id)
  return id_;
}
inline void AppRegister::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppRegister.id)
}

// -------------------------------------------------------------------

// AppInfoSync

// int32 app_id = 1;
inline void AppInfoSync::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::app_id() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.app_id)
  return app_id_;
}
inline void AppInfoSync::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.app_id)
}

// int32 app_type = 2;
inline void AppInfoSync::clear_app_type() {
  app_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::app_type() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.app_type)
  return app_type_;
}
inline void AppInfoSync::set_app_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.app_type)
}

// int32 online = 3;
inline void AppInfoSync::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfoSync::online() const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoSync.online)
  return online_;
}
inline void AppInfoSync::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.AppInfoSync.online)
}

// -------------------------------------------------------------------

// AppInfoListSync

// repeated .Proto.AppInfoSync apps = 1;
inline int AppInfoListSync::apps_size() const {
  return apps_.size();
}
inline void AppInfoListSync::clear_apps() {
  apps_.Clear();
}
inline ::Proto::AppInfoSync* AppInfoListSync::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.AppInfoListSync.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >*
AppInfoListSync::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:Proto.AppInfoListSync.apps)
  return &apps_;
}
inline const ::Proto::AppInfoSync& AppInfoListSync::apps(int index) const {
  // @@protoc_insertion_point(field_get:Proto.AppInfoListSync.apps)
  return apps_.Get(index);
}
inline ::Proto::AppInfoSync* AppInfoListSync::add_apps() {
  // @@protoc_insertion_point(field_add:Proto.AppInfoListSync.apps)
  return apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::AppInfoSync >&
AppInfoListSync::apps() const {
  // @@protoc_insertion_point(field_list:Proto.AppInfoListSync.apps)
  return apps_;
}

// -------------------------------------------------------------------

// NetworkDisconnect

// int32 network_type = 1;
inline void NetworkDisconnect::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkDisconnect::network_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkDisconnect.network_type)
  return network_type_;
}
inline void NetworkDisconnect::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkDisconnect.network_type)
}

// int32 socket = 2;
inline void NetworkDisconnect::clear_socket() {
  socket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkDisconnect::socket() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkDisconnect.socket)
  return socket_;
}
inline void NetworkDisconnect::set_socket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkDisconnect.socket)
}

// -------------------------------------------------------------------

// TagValue

// uint64 value_int64 = 1;
inline void TagValue::clear_value_int64() {
  value_int64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TagValue::value_int64() const {
  // @@protoc_insertion_point(field_get:Proto.TagValue.value_int64)
  return value_int64_;
}
inline void TagValue::set_value_int64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_int64_ = value;
  // @@protoc_insertion_point(field_set:Proto.TagValue.value_int64)
}

// string value_str = 2;
inline void TagValue::clear_value_str() {
  value_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TagValue::value_str() const {
  // @@protoc_insertion_point(field_get:Proto.TagValue.value_str)
  return value_str_.GetNoArena();
}
inline void TagValue::set_value_str(const std::string& value) {
  
  value_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.TagValue.value_str)
}
inline void TagValue::set_value_str(std::string&& value) {
  
  value_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.TagValue.value_str)
}
inline void TagValue::set_value_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TagValue.value_str)
}
inline void TagValue::set_value_str(const char* value, size_t size) {
  
  value_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TagValue.value_str)
}
inline std::string* TagValue::mutable_value_str() {
  
  // @@protoc_insertion_point(field_mutable:Proto.TagValue.value_str)
  return value_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TagValue::release_value_str() {
  // @@protoc_insertion_point(field_release:Proto.TagValue.value_str)
  
  return value_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TagValue::set_allocated_value_str(std::string* value_str) {
  if (value_str != nullptr) {
    
  } else {
    
  }
  value_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_str);
  // @@protoc_insertion_point(field_set_allocated:Proto.TagValue.value_str)
}

// -------------------------------------------------------------------

// Tag

// int32 tag_type = 1;
inline void Tag::clear_tag_type() {
  tag_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tag::tag_type() const {
  // @@protoc_insertion_point(field_get:Proto.Tag.tag_type)
  return tag_type_;
}
inline void Tag::set_tag_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tag_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.Tag.tag_type)
}

// .Proto.TagValue tag_value = 2;
inline bool Tag::has_tag_value() const {
  return this != internal_default_instance() && tag_value_ != nullptr;
}
inline void Tag::clear_tag_value() {
  if (GetArenaNoVirtual() == nullptr && tag_value_ != nullptr) {
    delete tag_value_;
  }
  tag_value_ = nullptr;
}
inline const ::Proto::TagValue& Tag::tag_value() const {
  const ::Proto::TagValue* p = tag_value_;
  // @@protoc_insertion_point(field_get:Proto.Tag.tag_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::TagValue*>(
      &::Proto::_TagValue_default_instance_);
}
inline ::Proto::TagValue* Tag::release_tag_value() {
  // @@protoc_insertion_point(field_release:Proto.Tag.tag_value)
  
  ::Proto::TagValue* temp = tag_value_;
  tag_value_ = nullptr;
  return temp;
}
inline ::Proto::TagValue* Tag::mutable_tag_value() {
  
  if (tag_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TagValue>(GetArenaNoVirtual());
    tag_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Tag.tag_value)
  return tag_value_;
}
inline void Tag::set_allocated_tag_value(::Proto::TagValue* tag_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tag_value_;
  }
  if (tag_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tag_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_value, submessage_arena);
    }
    
  } else {
    
  }
  tag_value_ = tag_value;
  // @@protoc_insertion_point(field_set_allocated:Proto.Tag.tag_value)
}

// -------------------------------------------------------------------

// NetworkConnect

// int32 network_type = 1;
inline void NetworkConnect::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkConnect::network_type() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.network_type)
  return network_type_;
}
inline void NetworkConnect::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.network_type)
}

// repeated .Proto.Tag tag = 2;
inline int NetworkConnect::tag_size() const {
  return tag_.size();
}
inline void NetworkConnect::clear_tag() {
  tag_.Clear();
}
inline ::Proto::Tag* NetworkConnect::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.NetworkConnect.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Tag >*
NetworkConnect::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:Proto.NetworkConnect.tag)
  return &tag_;
}
inline const ::Proto::Tag& NetworkConnect::tag(int index) const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.tag)
  return tag_.Get(index);
}
inline ::Proto::Tag* NetworkConnect::add_tag() {
  // @@protoc_insertion_point(field_add:Proto.NetworkConnect.tag)
  return tag_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Tag >&
NetworkConnect::tag() const {
  // @@protoc_insertion_point(field_list:Proto.NetworkConnect.tag)
  return tag_;
}

// string ip = 3;
inline void NetworkConnect::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkConnect::ip() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.ip)
  return ip_.GetNoArena();
}
inline void NetworkConnect::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.NetworkConnect.ip)
}
inline void NetworkConnect::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.NetworkConnect.ip)
}
inline std::string* NetworkConnect::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Proto.NetworkConnect.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkConnect::release_ip() {
  // @@protoc_insertion_point(field_release:Proto.NetworkConnect.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkConnect::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Proto.NetworkConnect.ip)
}

// int32 port = 4;
inline void NetworkConnect::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkConnect::port() const {
  // @@protoc_insertion_point(field_get:Proto.NetworkConnect.port)
  return port_;
}
inline void NetworkConnect::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.NetworkConnect.port)
}

// -------------------------------------------------------------------

// Http

// string body = 1;
inline void Http::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Http::body() const {
  // @@protoc_insertion_point(field_get:Proto.Http.body)
  return body_.GetNoArena();
}
inline void Http::set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Http.body)
}
inline void Http::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Http.body)
}
inline void Http::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Http.body)
}
inline void Http::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Http.body)
}
inline std::string* Http::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Http.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Http::release_body() {
  // @@protoc_insertion_point(field_release:Proto.Http.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Http::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:Proto.Http.body)
}

// int32 status_code = 2;
inline void Http::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Http::status_code() const {
  // @@protoc_insertion_point(field_get:Proto.Http.status_code)
  return status_code_;
}
inline void Http::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.Http.status_code)
}

// -------------------------------------------------------------------

// CreateComponentParam

// .Proto.CreateComponentParam.ParamType type = 1;
inline void CreateComponentParam::clear_type() {
  type_ = 0;
}
inline ::Proto::CreateComponentParam_ParamType CreateComponentParam::type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.type)
  return static_cast< ::Proto::CreateComponentParam_ParamType >(type_);
}
inline void CreateComponentParam::set_type(::Proto::CreateComponentParam_ParamType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.type)
}

// int32 int_param = 2;
inline void CreateComponentParam::clear_int_param() {
  int_param_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateComponentParam::int_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.int_param)
  return int_param_;
}
inline void CreateComponentParam::set_int_param(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int_param_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.int_param)
}

// string string_param = 3;
inline void CreateComponentParam::clear_string_param() {
  string_param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateComponentParam::string_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.string_param)
  return string_param_.GetNoArena();
}
inline void CreateComponentParam::set_string_param(const std::string& value) {
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(std::string&& value) {
  
  string_param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateComponentParam.string_param)
}
inline void CreateComponentParam::set_string_param(const char* value, size_t size) {
  
  string_param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateComponentParam.string_param)
}
inline std::string* CreateComponentParam::mutable_string_param() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponentParam.string_param)
  return string_param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateComponentParam::release_string_param() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponentParam.string_param)
  
  return string_param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateComponentParam::set_allocated_string_param(std::string* string_param) {
  if (string_param != nullptr) {
    
  } else {
    
  }
  string_param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_param);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponentParam.string_param)
}

// uint64 uint64_param = 4;
inline void CreateComponentParam::clear_uint64_param() {
  uint64_param_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateComponentParam::uint64_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.uint64_param)
  return uint64_param_;
}
inline void CreateComponentParam::set_uint64_param(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uint64_param_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.uint64_param)
}

// -------------------------------------------------------------------

// CreateComponent

// int32 thread_type = 1;
inline void CreateComponent::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateComponent::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.thread_type)
  return thread_type_;
}
inline void CreateComponent::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.thread_type)
}

// string class_name = 2;
inline void CreateComponent::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateComponent::class_name() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.class_name)
  return class_name_.GetNoArena();
}
inline void CreateComponent::set_class_name(const std::string& value) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(std::string&& value) {
  
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateComponent.class_name)
}
inline void CreateComponent::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateComponent.class_name)
}
inline std::string* CreateComponent::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateComponent::release_class_name() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponent.class_name)
  
  return class_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateComponent::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponent.class_name)
}

// repeated .Proto.CreateComponentParam params = 3;
inline int CreateComponent::params_size() const {
  return params_.size();
}
inline void CreateComponent::clear_params() {
  params_.Clear();
}
inline ::Proto::CreateComponentParam* CreateComponent::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
CreateComponent::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.CreateComponent.params)
  return &params_;
}
inline const ::Proto::CreateComponentParam& CreateComponent::params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.params)
  return params_.Get(index);
}
inline ::Proto::CreateComponentParam* CreateComponent::add_params() {
  // @@protoc_insertion_point(field_add:Proto.CreateComponent.params)
  return params_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
CreateComponent::params() const {
  // @@protoc_insertion_point(field_list:Proto.CreateComponent.params)
  return params_;
}

// uint64 sn = 4;
inline void CreateComponent::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateComponent::sn() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.sn)
  return sn_;
}
inline void CreateComponent::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.sn)
}

// bool is_to_all = 5;
inline void CreateComponent::clear_is_to_all() {
  is_to_all_ = false;
}
inline bool CreateComponent::is_to_all() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.is_to_all)
  return is_to_all_;
}
inline void CreateComponent::set_is_to_all(bool value) {
  
  is_to_all_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.is_to_all)
}

// -------------------------------------------------------------------

// RemoveComponent

// uint64 sn = 1;
inline void RemoveComponent::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveComponent::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RemoveComponent.sn)
  return sn_;
}
inline void RemoveComponent::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RemoveComponent.sn)
}

// -------------------------------------------------------------------

// CreateSystem

// int32 thread_type = 1;
inline void CreateSystem::clear_thread_type() {
  thread_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateSystem::thread_type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateSystem.thread_type)
  return thread_type_;
}
inline void CreateSystem::set_thread_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  thread_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateSystem.thread_type)
}

// string system_name = 2;
inline void CreateSystem::clear_system_name() {
  system_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSystem::system_name() const {
  // @@protoc_insertion_point(field_get:Proto.CreateSystem.system_name)
  return system_name_.GetNoArena();
}
inline void CreateSystem::set_system_name(const std::string& value) {
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.CreateSystem.system_name)
}
inline void CreateSystem::set_system_name(std::string&& value) {
  
  system_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.CreateSystem.system_name)
}
inline void CreateSystem::set_system_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.CreateSystem.system_name)
}
inline void CreateSystem::set_system_name(const char* value, size_t size) {
  
  system_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.CreateSystem.system_name)
}
inline std::string* CreateSystem::mutable_system_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.CreateSystem.system_name)
  return system_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSystem::release_system_name() {
  // @@protoc_insertion_point(field_release:Proto.CreateSystem.system_name)
  
  return system_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSystem::set_allocated_system_name(std::string* system_name) {
  if (system_name != nullptr) {
    
  } else {
    
  }
  system_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateSystem.system_name)
}

// -------------------------------------------------------------------

// AccountCheck

// int32 server_id = 1;
inline void AccountCheck::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountCheck::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.server_id)
  return server_id_;
}
inline void AccountCheck::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.server_id)
}

// string channel = 2;
inline void AccountCheck::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCheck::channel() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.channel)
  return channel_.GetNoArena();
}
inline void AccountCheck::set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.channel)
}
inline void AccountCheck::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountCheck.channel)
}
inline void AccountCheck::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountCheck.channel)
}
inline void AccountCheck::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountCheck.channel)
}
inline std::string* AccountCheck::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountCheck.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCheck::release_channel() {
  // @@protoc_insertion_point(field_release:Proto.AccountCheck.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCheck::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountCheck.channel)
}

// string uuid = 3;
inline void AccountCheck::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCheck::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheck.uuid)
  return uuid_.GetNoArena();
}
inline void AccountCheck::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.AccountCheck.uuid)
}
inline void AccountCheck::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.AccountCheck.uuid)
}
inline void AccountCheck::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.AccountCheck.uuid)
}
inline void AccountCheck::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.AccountCheck.uuid)
}
inline std::string* AccountCheck::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Proto.AccountCheck.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCheck::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.AccountCheck.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCheck::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Proto.AccountCheck.uuid)
}

// -------------------------------------------------------------------

// AccountCheckRs

// .Proto.AccountCheckReturnCode return_code = 1;
inline void AccountCheckRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::AccountCheckReturnCode AccountCheckRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.AccountCheckRs.return_code)
  return static_cast< ::Proto::AccountCheckReturnCode >(return_code_);
}
inline void AccountCheckRs::set_return_code(::Proto::AccountCheckReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.AccountCheckRs.return_code)
}

// -------------------------------------------------------------------

// RobotState

// string account = 1;
inline void RobotState::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RobotState::account() const {
  // @@protoc_insertion_point(field_get:Proto.RobotState.account)
  return account_.GetNoArena();
}
inline void RobotState::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RobotState.account)
}
inline void RobotState::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RobotState.account)
}
inline void RobotState::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RobotState.account)
}
inline void RobotState::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RobotState.account)
}
inline std::string* RobotState::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RobotState.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RobotState::release_account() {
  // @@protoc_insertion_point(field_release:Proto.RobotState.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RobotState::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.RobotState.account)
}

// int32 state = 2;
inline void RobotState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotState::state() const {
  // @@protoc_insertion_point(field_get:Proto.RobotState.state)
  return state_;
}
inline void RobotState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Proto.RobotState.state)
}

// -------------------------------------------------------------------

// RobotSyncState

// repeated .Proto.RobotState states = 1;
inline int RobotSyncState::states_size() const {
  return states_.size();
}
inline void RobotSyncState::clear_states() {
  states_.Clear();
}
inline ::Proto::RobotState* RobotSyncState::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.RobotSyncState.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >*
RobotSyncState::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:Proto.RobotSyncState.states)
  return &states_;
}
inline const ::Proto::RobotState& RobotSyncState::states(int index) const {
  // @@protoc_insertion_point(field_get:Proto.RobotSyncState.states)
  return states_.Get(index);
}
inline ::Proto::RobotState* RobotSyncState::add_states() {
  // @@protoc_insertion_point(field_add:Proto.RobotSyncState.states)
  return states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::RobotState >&
RobotSyncState::states() const {
  // @@protoc_insertion_point(field_list:Proto.RobotSyncState.states)
  return states_;
}

// -------------------------------------------------------------------

// RobotCreate

// string account = 1;
inline void RobotCreate::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RobotCreate::account() const {
  // @@protoc_insertion_point(field_get:Proto.RobotCreate.account)
  return account_.GetNoArena();
}
inline void RobotCreate::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RobotCreate.account)
}
inline void RobotCreate::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RobotCreate.account)
}
inline void RobotCreate::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RobotCreate.account)
}
inline void RobotCreate::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RobotCreate.account)
}
inline std::string* RobotCreate::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RobotCreate.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RobotCreate::release_account() {
  // @@protoc_insertion_point(field_release:Proto.RobotCreate.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RobotCreate::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.RobotCreate.account)
}

// -------------------------------------------------------------------

// PlayerLittle

// uint64 sn = 1;
inline void PlayerLittle::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerLittle::sn() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.sn)
  return sn_;
}
inline void PlayerLittle::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.sn)
}

// string name = 2;
inline void PlayerLittle::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLittle::name() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.name)
  return name_.GetNoArena();
}
inline void PlayerLittle::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerLittle.name)
}
inline void PlayerLittle::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerLittle.name)
}
inline std::string* PlayerLittle::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLittle.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLittle::release_name() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLittle.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLittle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLittle.name)
}

// int32 level = 4;
inline void PlayerLittle::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLittle::level() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.level)
  return level_;
}
inline void PlayerLittle::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.level)
}

// int32 template_id = 5;
inline void PlayerLittle::clear_template_id() {
  template_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLittle::template_id() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLittle.template_id)
  return template_id_;
}
inline void PlayerLittle::set_template_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  template_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLittle.template_id)
}

// -------------------------------------------------------------------

// PlayerList

// string account = 1;
inline void PlayerList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerList::account() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.account)
  return account_.GetNoArena();
}
inline void PlayerList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerList.account)
}
inline void PlayerList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerList.account)
}
inline void PlayerList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerList.account)
}
inline void PlayerList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerList.account)
}
inline std::string* PlayerList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerList::release_account() {
  // @@protoc_insertion_point(field_release:Proto.PlayerList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerList.account)
}

// repeated .Proto.PlayerLittle player = 2;
inline int PlayerList::player_size() const {
  return player_.size();
}
inline void PlayerList::clear_player() {
  player_.Clear();
}
inline ::Proto::PlayerLittle* PlayerList::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PlayerList.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >*
PlayerList::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PlayerList.player)
  return &player_;
}
inline const ::Proto::PlayerLittle& PlayerList::player(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PlayerList.player)
  return player_.Get(index);
}
inline ::Proto::PlayerLittle* PlayerList::add_player() {
  // @@protoc_insertion_point(field_add:Proto.PlayerList.player)
  return player_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PlayerLittle >&
PlayerList::player() const {
  // @@protoc_insertion_point(field_list:Proto.PlayerList.player)
  return player_;
}

// -------------------------------------------------------------------

// QueryPlayerList

// string account = 1;
inline void QueryPlayerList::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayerList::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerList.account)
  return account_.GetNoArena();
}
inline void QueryPlayerList::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayerList.account)
}
inline void QueryPlayerList::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayerList.account)
}
inline std::string* QueryPlayerList::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerList.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayerList::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerList.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayerList::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerList.account)
}

// -------------------------------------------------------------------

// QueryPlayer

// string account = 1;
inline void QueryPlayer::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayer::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayer.account)
  return account_.GetNoArena();
}
inline void QueryPlayer::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayer.account)
}
inline void QueryPlayer::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayer.account)
}
inline void QueryPlayer::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayer.account)
}
inline void QueryPlayer::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayer.account)
}
inline std::string* QueryPlayer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayer.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayer::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayer.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayer.account)
}

// uint64 player_sn = 2;
inline void QueryPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayer.player_sn)
  return player_sn_;
}
inline void QueryPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryPlayer.player_sn)
}

// -------------------------------------------------------------------

// QueryPlayerRs

// string account = 1;
inline void QueryPlayerRs::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryPlayerRs::account() const {
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerRs.account)
  return account_.GetNoArena();
}
inline void QueryPlayerRs::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.QueryPlayerRs.account)
}
inline void QueryPlayerRs::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.QueryPlayerRs.account)
}
inline std::string* QueryPlayerRs::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerRs.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryPlayerRs::release_account() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerRs.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryPlayerRs::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerRs.account)
}

// .Proto.Player player = 2;
inline bool QueryPlayerRs::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& QueryPlayerRs::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.QueryPlayerRs.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* QueryPlayerRs::release_player() {
  // @@protoc_insertion_point(field_release:Proto.QueryPlayerRs.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* QueryPlayerRs::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.QueryPlayerRs.player)
  return player_;
}
inline void QueryPlayerRs::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryPlayerRs.player)
}

// -------------------------------------------------------------------

// LoadAllAccount

// repeated int32 server_id = 1;
inline int LoadAllAccount::server_id_size() const {
  return server_id_.size();
}
inline void LoadAllAccount::clear_server_id() {
  server_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadAllAccount::server_id(int index) const {
  // @@protoc_insertion_point(field_get:Proto.LoadAllAccount.server_id)
  return server_id_.Get(index);
}
inline void LoadAllAccount::set_server_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  server_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.LoadAllAccount.server_id)
}
inline void LoadAllAccount::add_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  server_id_.Add(value);
  // @@protoc_insertion_point(field_add:Proto.LoadAllAccount.server_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LoadAllAccount::server_id() const {
  // @@protoc_insertion_point(field_list:Proto.LoadAllAccount.server_id)
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LoadAllAccount::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable_list:Proto.LoadAllAccount.server_id)
  return &server_id_;
}

// -------------------------------------------------------------------

// LoadAllAccountRet

// repeated .Proto.DBAccount account_list = 1;
inline int LoadAllAccountRet::account_list_size() const {
  return account_list_.size();
}
inline ::Proto::DBAccount* LoadAllAccountRet::mutable_account_list(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.LoadAllAccountRet.account_list)
  return account_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::DBAccount >*
LoadAllAccountRet::mutable_account_list() {
  // @@protoc_insertion_point(field_mutable_list:Proto.LoadAllAccountRet.account_list)
  return &account_list_;
}
inline const ::Proto::DBAccount& LoadAllAccountRet::account_list(int index) const {
  // @@protoc_insertion_point(field_get:Proto.LoadAllAccountRet.account_list)
  return account_list_.Get(index);
}
inline ::Proto::DBAccount* LoadAllAccountRet::add_account_list() {
  // @@protoc_insertion_point(field_add:Proto.LoadAllAccountRet.account_list)
  return account_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::DBAccount >&
LoadAllAccountRet::account_list() const {
  // @@protoc_insertion_point(field_list:Proto.LoadAllAccountRet.account_list)
  return account_list_;
}

// -------------------------------------------------------------------

// LoadAllPlayer

// repeated int32 server_id = 1;
inline int LoadAllPlayer::server_id_size() const {
  return server_id_.size();
}
inline void LoadAllPlayer::clear_server_id() {
  server_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadAllPlayer::server_id(int index) const {
  // @@protoc_insertion_point(field_get:Proto.LoadAllPlayer.server_id)
  return server_id_.Get(index);
}
inline void LoadAllPlayer::set_server_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  server_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.LoadAllPlayer.server_id)
}
inline void LoadAllPlayer::add_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  server_id_.Add(value);
  // @@protoc_insertion_point(field_add:Proto.LoadAllPlayer.server_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LoadAllPlayer::server_id() const {
  // @@protoc_insertion_point(field_list:Proto.LoadAllPlayer.server_id)
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LoadAllPlayer::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable_list:Proto.LoadAllPlayer.server_id)
  return &server_id_;
}

// -------------------------------------------------------------------

// LoadAllPlayerRet

// repeated .Proto.Player player_list = 1;
inline int LoadAllPlayerRet::player_list_size() const {
  return player_list_.size();
}
inline ::Proto::Player* LoadAllPlayerRet::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.LoadAllPlayerRet.player_list)
  return player_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >*
LoadAllPlayerRet::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:Proto.LoadAllPlayerRet.player_list)
  return &player_list_;
}
inline const ::Proto::Player& LoadAllPlayerRet::player_list(int index) const {
  // @@protoc_insertion_point(field_get:Proto.LoadAllPlayerRet.player_list)
  return player_list_.Get(index);
}
inline ::Proto::Player* LoadAllPlayerRet::add_player_list() {
  // @@protoc_insertion_point(field_add:Proto.LoadAllPlayerRet.player_list)
  return player_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >&
LoadAllPlayerRet::player_list() const {
  // @@protoc_insertion_point(field_list:Proto.LoadAllPlayerRet.player_list)
  return player_list_;
}

// -------------------------------------------------------------------

// LoadPlayer

// int64 player_sn = 1;
inline void LoadPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.LoadPlayer.player_sn)
  return player_sn_;
}
inline void LoadPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoadPlayer.player_sn)
}

// string account = 2;
inline void LoadPlayer::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadPlayer::account() const {
  // @@protoc_insertion_point(field_get:Proto.LoadPlayer.account)
  return account_.GetNoArena();
}
inline void LoadPlayer::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoadPlayer.account)
}
inline void LoadPlayer::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoadPlayer.account)
}
inline void LoadPlayer::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoadPlayer.account)
}
inline void LoadPlayer::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoadPlayer.account)
}
inline std::string* LoadPlayer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoadPlayer.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadPlayer::release_account() {
  // @@protoc_insertion_point(field_release:Proto.LoadPlayer.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadPlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoadPlayer.account)
}

// -------------------------------------------------------------------

// LoadPlayerRet

// .Proto.Player player_info = 1;
inline bool LoadPlayerRet::has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline const ::Proto::Player& LoadPlayerRet::player_info() const {
  const ::Proto::Player* p = player_info_;
  // @@protoc_insertion_point(field_get:Proto.LoadPlayerRet.player_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* LoadPlayerRet::release_player_info() {
  // @@protoc_insertion_point(field_release:Proto.LoadPlayerRet.player_info)
  
  ::Proto::Player* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::Proto::Player* LoadPlayerRet::mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LoadPlayerRet.player_info)
  return player_info_;
}
inline void LoadPlayerRet::set_allocated_player_info(::Proto::Player* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:Proto.LoadPlayerRet.player_info)
}

// -------------------------------------------------------------------

// PlayerLogin

// int32 server_id = 1;
inline void PlayerLogin::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLogin::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLogin.server_id)
  return server_id_;
}
inline void PlayerLogin::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLogin.server_id)
}

// string channel = 2;
inline void PlayerLogin::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLogin::channel() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLogin.channel)
  return channel_.GetNoArena();
}
inline void PlayerLogin::set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerLogin.channel)
}
inline void PlayerLogin::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerLogin.channel)
}
inline void PlayerLogin::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerLogin.channel)
}
inline void PlayerLogin::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerLogin.channel)
}
inline std::string* PlayerLogin::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLogin.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLogin::release_channel() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLogin.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLogin::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLogin.channel)
}

// string uuid = 3;
inline void PlayerLogin::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerLogin::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLogin.uuid)
  return uuid_.GetNoArena();
}
inline void PlayerLogin::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerLogin.uuid)
}
inline void PlayerLogin::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerLogin.uuid)
}
inline void PlayerLogin::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerLogin.uuid)
}
inline void PlayerLogin::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerLogin.uuid)
}
inline std::string* PlayerLogin::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLogin.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerLogin::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLogin.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLogin::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLogin.uuid)
}

// -------------------------------------------------------------------

// PlayerLoginRet

// .Proto.LoginRetCode ret = 1;
inline void PlayerLoginRet::clear_ret() {
  ret_ = 0;
}
inline ::Proto::LoginRetCode PlayerLoginRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerLoginRet.ret)
  return static_cast< ::Proto::LoginRetCode >(ret_);
}
inline void PlayerLoginRet::set_ret(::Proto::LoginRetCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerLoginRet.ret)
}

// .Proto.Player player = 2;
inline bool PlayerLoginRet::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& PlayerLoginRet::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.PlayerLoginRet.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* PlayerLoginRet::release_player() {
  // @@protoc_insertion_point(field_release:Proto.PlayerLoginRet.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* PlayerLoginRet::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerLoginRet.player)
  return player_;
}
inline void PlayerLoginRet::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerLoginRet.player)
}

// -------------------------------------------------------------------

// PlayerCreate

// string name = 1;
inline void PlayerCreate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerCreate::name() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerCreate.name)
  return name_.GetNoArena();
}
inline void PlayerCreate::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerCreate.name)
}
inline void PlayerCreate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.PlayerCreate.name)
}
inline void PlayerCreate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerCreate.name)
}
inline void PlayerCreate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerCreate.name)
}
inline std::string* PlayerCreate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerCreate.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerCreate::release_name() {
  // @@protoc_insertion_point(field_release:Proto.PlayerCreate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerCreate.name)
}

// int32 template_id = 3;
inline void PlayerCreate::clear_template_id() {
  template_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerCreate::template_id() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerCreate.template_id)
  return template_id_;
}
inline void PlayerCreate::set_template_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  template_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerCreate.template_id)
}

// -------------------------------------------------------------------

// PlayerCreateRet

// .Proto.CreateRetCode ret = 1;
inline void PlayerCreateRet::clear_ret() {
  ret_ = 0;
}
inline ::Proto::CreateRetCode PlayerCreateRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerCreateRet.ret)
  return static_cast< ::Proto::CreateRetCode >(ret_);
}
inline void PlayerCreateRet::set_ret(::Proto::CreateRetCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerCreateRet.ret)
}

// .Proto.Player player = 2;
inline bool PlayerCreateRet::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& PlayerCreateRet::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.PlayerCreateRet.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* PlayerCreateRet::release_player() {
  // @@protoc_insertion_point(field_release:Proto.PlayerCreateRet.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* PlayerCreateRet::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.PlayerCreateRet.player)
  return player_;
}
inline void PlayerCreateRet::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerCreateRet.player)
}

// -------------------------------------------------------------------

// SelectPlayer

// uint64 player_sn = 1;
inline void SelectPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SelectPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SelectPlayer.player_sn)
  return player_sn_;
}
inline void SelectPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SelectPlayer.player_sn)
}

// -------------------------------------------------------------------

// SelectPlayerRs

// .Proto.SelectPlayerRs.SelectPlayerReturnCode return_code = 1;
inline void SelectPlayerRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::SelectPlayerRs_SelectPlayerReturnCode SelectPlayerRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.SelectPlayerRs.return_code)
  return static_cast< ::Proto::SelectPlayerRs_SelectPlayerReturnCode >(return_code_);
}
inline void SelectPlayerRs::set_return_code(::Proto::SelectPlayerRs_SelectPlayerReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.SelectPlayerRs.return_code)
}

// -------------------------------------------------------------------

// SavePlayer

// .Proto.ESaveMode save_mode = 1;
inline void SavePlayer::clear_save_mode() {
  save_mode_ = 0;
}
inline ::Proto::ESaveMode SavePlayer::save_mode() const {
  // @@protoc_insertion_point(field_get:Proto.SavePlayer.save_mode)
  return static_cast< ::Proto::ESaveMode >(save_mode_);
}
inline void SavePlayer::set_save_mode(::Proto::ESaveMode value) {
  
  save_mode_ = value;
  // @@protoc_insertion_point(field_set:Proto.SavePlayer.save_mode)
}

// .Proto.Player player = 2;
inline bool SavePlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& SavePlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.SavePlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* SavePlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.SavePlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* SavePlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SavePlayer.player)
  return player_;
}
inline void SavePlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.SavePlayer.player)
}

// -------------------------------------------------------------------

// WorldSyncToGather

// uint64 world_sn = 1;
inline void WorldSyncToGather::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldSyncToGather::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.world_sn)
  return world_sn_;
}
inline void WorldSyncToGather::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.world_sn)
}

// int32 world_id = 2;
inline void WorldSyncToGather::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSyncToGather::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.world_id)
  return world_id_;
}
inline void WorldSyncToGather::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.world_id)
}

// int32 online = 3;
inline void WorldSyncToGather::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldSyncToGather::online() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.online)
  return online_;
}
inline void WorldSyncToGather::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.online)
}

// bool is_remove = 4;
inline void WorldSyncToGather::clear_is_remove() {
  is_remove_ = false;
}
inline bool WorldSyncToGather::is_remove() const {
  // @@protoc_insertion_point(field_get:Proto.WorldSyncToGather.is_remove)
  return is_remove_;
}
inline void WorldSyncToGather::set_is_remove(bool value) {
  
  is_remove_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldSyncToGather.is_remove)
}

// -------------------------------------------------------------------

// WorldProxySyncToGather

// uint64 world_sn = 1;
inline void WorldProxySyncToGather::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WorldProxySyncToGather::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_sn)
  return world_sn_;
}
inline void WorldProxySyncToGather::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_sn)
}

// bool is_remove = 2;
inline void WorldProxySyncToGather::clear_is_remove() {
  is_remove_ = false;
}
inline bool WorldProxySyncToGather::is_remove() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.is_remove)
  return is_remove_;
}
inline void WorldProxySyncToGather::set_is_remove(bool value) {
  
  is_remove_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.is_remove)
}

// int32 world_id = 3;
inline void WorldProxySyncToGather::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldProxySyncToGather::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.world_id)
  return world_id_;
}
inline void WorldProxySyncToGather::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.world_id)
}

// int32 online = 4;
inline void WorldProxySyncToGather::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldProxySyncToGather::online() const {
  // @@protoc_insertion_point(field_get:Proto.WorldProxySyncToGather.online)
  return online_;
}
inline void WorldProxySyncToGather::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldProxySyncToGather.online)
}

// -------------------------------------------------------------------

// GameToken

// .Proto.GameToken.ReturnCode return_code = 1;
inline void GameToken::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::GameToken_ReturnCode GameToken::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.return_code)
  return static_cast< ::Proto::GameToken_ReturnCode >(return_code_);
}
inline void GameToken::set_return_code(::Proto::GameToken_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.return_code)
}

// string token = 2;
inline void GameToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::token() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.token)
  return token_.GetNoArena();
}
inline void GameToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.token)
}
inline void GameToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.token)
}
inline void GameToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.token)
}
inline void GameToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.token)
}
inline std::string* GameToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_token() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.token)
}

// string ip = 3;
inline void GameToken::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::ip() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.ip)
  return ip_.GetNoArena();
}
inline void GameToken::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.ip)
}
inline void GameToken::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.ip)
}
inline void GameToken::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.ip)
}
inline void GameToken::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.ip)
}
inline std::string* GameToken::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_ip() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.ip)
}

// int32 port = 4;
inline void GameToken::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToken::port() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.port)
  return port_;
}
inline void GameToken::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.port)
}

// int32 server_id = 5;
inline void GameToken::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameToken::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.server_id)
  return server_id_;
}
inline void GameToken::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameToken.server_id)
}

// string channel = 6;
inline void GameToken::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::channel() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.channel)
  return channel_.GetNoArena();
}
inline void GameToken::set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.channel)
}
inline void GameToken::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.channel)
}
inline void GameToken::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.channel)
}
inline void GameToken::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.channel)
}
inline std::string* GameToken::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_channel() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.channel)
}

// string uuid = 7;
inline void GameToken::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameToken::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.GameToken.uuid)
  return uuid_.GetNoArena();
}
inline void GameToken::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameToken.uuid)
}
inline void GameToken::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameToken.uuid)
}
inline void GameToken::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameToken.uuid)
}
inline void GameToken::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameToken.uuid)
}
inline std::string* GameToken::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GameToken.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameToken::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.GameToken.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameToken::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameToken.uuid)
}

// -------------------------------------------------------------------

// LoginByToken

// int32 server_id = 1;
inline void LoginByToken::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginByToken::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.server_id)
  return server_id_;
}
inline void LoginByToken::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.server_id)
}

// string channel = 2;
inline void LoginByToken::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::channel() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.channel)
  return channel_.GetNoArena();
}
inline void LoginByToken::set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.channel)
}
inline void LoginByToken::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.channel)
}
inline void LoginByToken::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.channel)
}
inline void LoginByToken::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.channel)
}
inline std::string* LoginByToken::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_channel() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.channel)
}

// string uuid = 3;
inline void LoginByToken::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.uuid)
  return uuid_.GetNoArena();
}
inline void LoginByToken::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.uuid)
}
inline void LoginByToken::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.uuid)
}
inline void LoginByToken::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.uuid)
}
inline void LoginByToken::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.uuid)
}
inline std::string* LoginByToken::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.uuid)
}

// string account = 4;
inline void LoginByToken::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::account() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.account)
  return account_.GetNoArena();
}
inline void LoginByToken::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.account)
}
inline void LoginByToken::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.account)
}
inline std::string* LoginByToken::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_account() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.account)
}

// string token = 5;
inline void LoginByToken::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginByToken::token() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByToken.token)
  return token_.GetNoArena();
}
inline void LoginByToken::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.LoginByToken.token)
}
inline void LoginByToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.LoginByToken.token)
}
inline std::string* LoginByToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.LoginByToken.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginByToken::release_token() {
  // @@protoc_insertion_point(field_release:Proto.LoginByToken.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginByToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.LoginByToken.token)
}

// -------------------------------------------------------------------

// LoginByTokenRs

// .Proto.LoginByTokenRs.ReturnCode return_code = 1;
inline void LoginByTokenRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::LoginByTokenRs_ReturnCode LoginByTokenRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.LoginByTokenRs.return_code)
  return static_cast< ::Proto::LoginByTokenRs_ReturnCode >(return_code_);
}
inline void LoginByTokenRs::set_return_code(::Proto::LoginByTokenRs_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.LoginByTokenRs.return_code)
}

// -------------------------------------------------------------------

// TokenInfo

// string token = 1;
inline void TokenInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TokenInfo::token() const {
  // @@protoc_insertion_point(field_get:Proto.TokenInfo.token)
  return token_.GetNoArena();
}
inline void TokenInfo::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.TokenInfo.token)
}
inline void TokenInfo::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.TokenInfo.token)
}
inline void TokenInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TokenInfo.token)
}
inline void TokenInfo::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TokenInfo.token)
}
inline std::string* TokenInfo::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Proto.TokenInfo.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenInfo::release_token() {
  // @@protoc_insertion_point(field_release:Proto.TokenInfo.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenInfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Proto.TokenInfo.token)
}

// uint64 player_sn = 2;
inline void TokenInfo::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TokenInfo::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.TokenInfo.player_sn)
  return player_sn_;
}
inline void TokenInfo::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.TokenInfo.player_sn)
}

// -------------------------------------------------------------------

// SyncPlayer

// int32 app_id = 1;
inline void SyncPlayer::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayer::app_id() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.app_id)
  return app_id_;
}
inline void SyncPlayer::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayer.app_id)
}

// string account = 2;
inline void SyncPlayer::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncPlayer::account() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.account)
  return account_.GetNoArena();
}
inline void SyncPlayer::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.SyncPlayer.account)
}
inline void SyncPlayer::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.SyncPlayer.account)
}
inline void SyncPlayer::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.SyncPlayer.account)
}
inline void SyncPlayer::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.SyncPlayer.account)
}
inline std::string* SyncPlayer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayer.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncPlayer::release_account() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayer.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayer.account)
}

// .Proto.Player player = 3;
inline bool SyncPlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& SyncPlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* SyncPlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* SyncPlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayer.player)
  return player_;
}
inline void SyncPlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayer.player)
}

// -------------------------------------------------------------------

// EnterWorld

// int32 world_id = 1;
inline void EnterWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.world_id)
  return world_id_;
}
inline void EnterWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.EnterWorld.world_id)
}

// uint64 world_sn = 2;
inline void EnterWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.world_sn)
  return world_sn_;
}
inline void EnterWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.EnterWorld.world_sn)
}

// .Proto.Vector3 position = 3;
inline bool EnterWorld::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::Proto::Vector3& EnterWorld::position() const {
  const ::Proto::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3*>(
      &::Proto::_Vector3_default_instance_);
}
inline ::Proto::Vector3* EnterWorld::release_position() {
  // @@protoc_insertion_point(field_release:Proto.EnterWorld.position)
  
  ::Proto::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3* EnterWorld::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.EnterWorld.position)
  return position_;
}
inline void EnterWorld::set_allocated_position(::Proto::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.EnterWorld.position)
}

// .Proto.Vector3 rotation = 4;
inline bool EnterWorld::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::Proto::Vector3& EnterWorld::rotation() const {
  const ::Proto::Vector3* p = rotation_;
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3*>(
      &::Proto::_Vector3_default_instance_);
}
inline ::Proto::Vector3* EnterWorld::release_rotation() {
  // @@protoc_insertion_point(field_release:Proto.EnterWorld.rotation)
  
  ::Proto::Vector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Proto::Vector3* EnterWorld::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.EnterWorld.rotation)
  return rotation_;
}
inline void EnterWorld::set_allocated_rotation(::Proto::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Proto.EnterWorld.rotation)
}

// .Proto.DBWorldData world_data = 5;
inline bool EnterWorld::has_world_data() const {
  return this != internal_default_instance() && world_data_ != nullptr;
}
inline const ::Proto::DBWorldData& EnterWorld::world_data() const {
  const ::Proto::DBWorldData* p = world_data_;
  // @@protoc_insertion_point(field_get:Proto.EnterWorld.world_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::DBWorldData*>(
      &::Proto::_DBWorldData_default_instance_);
}
inline ::Proto::DBWorldData* EnterWorld::release_world_data() {
  // @@protoc_insertion_point(field_release:Proto.EnterWorld.world_data)
  
  ::Proto::DBWorldData* temp = world_data_;
  world_data_ = nullptr;
  return temp;
}
inline ::Proto::DBWorldData* EnterWorld::mutable_world_data() {
  
  if (world_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DBWorldData>(GetArenaNoVirtual());
    world_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.EnterWorld.world_data)
  return world_data_;
}
inline void EnterWorld::set_allocated_world_data(::Proto::DBWorldData* world_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_data_);
  }
  if (world_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_data, submessage_arena);
    }
    
  } else {
    
  }
  world_data_ = world_data;
  // @@protoc_insertion_point(field_set_allocated:Proto.EnterWorld.world_data)
}

// -------------------------------------------------------------------

// EnterHome

// uint64 player_sn = 1;
inline void EnterHome::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnterHome::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.EnterHome.player_sn)
  return player_sn_;
}
inline void EnterHome::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.EnterHome.player_sn)
}

// -------------------------------------------------------------------

// QueryDungeonBySn

// uint64 world_sn = 1;
inline void QueryDungeonBySn::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryDungeonBySn::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryDungeonBySn.world_sn)
  return world_sn_;
}
inline void QueryDungeonBySn::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryDungeonBySn.world_sn)
}

// -------------------------------------------------------------------

// QueryDungeonBySnRs

// uint64 world_sn = 1;
inline void QueryDungeonBySnRs::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryDungeonBySnRs::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryDungeonBySnRs.world_sn)
  return world_sn_;
}
inline void QueryDungeonBySnRs::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryDungeonBySnRs.world_sn)
}

// .Proto.QueryDungeonBySnRs.ReturnCode return_code = 3;
inline void QueryDungeonBySnRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::QueryDungeonBySnRs_ReturnCode QueryDungeonBySnRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.QueryDungeonBySnRs.return_code)
  return static_cast< ::Proto::QueryDungeonBySnRs_ReturnCode >(return_code_);
}
inline void QueryDungeonBySnRs::set_return_code(::Proto::QueryDungeonBySnRs_ReturnCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryDungeonBySnRs.return_code)
}

// -------------------------------------------------------------------

// RequestWorld

// int32 world_id = 1;
inline void RequestWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.RequestWorld.world_id)
  return world_id_;
}
inline void RequestWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestWorld.world_id)
}

// uint64 for_player = 2;
inline void RequestWorld::clear_for_player() {
  for_player_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestWorld::for_player() const {
  // @@protoc_insertion_point(field_get:Proto.RequestWorld.for_player)
  return for_player_;
}
inline void RequestWorld::set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  for_player_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestWorld.for_player)
}

// -------------------------------------------------------------------

// CreateWorld

// int32 world_id = 1;
inline void CreateWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.CreateWorld.world_id)
  return world_id_;
}
inline void CreateWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateWorld.world_id)
}

// int32 alive = 2;
inline void CreateWorld::clear_alive() {
  alive_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateWorld::alive() const {
  // @@protoc_insertion_point(field_get:Proto.CreateWorld.alive)
  return alive_;
}
inline void CreateWorld::set_alive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateWorld.alive)
}

// uint64 for_player = 3;
inline void CreateWorld::clear_for_player() {
  for_player_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateWorld::for_player() const {
  // @@protoc_insertion_point(field_get:Proto.CreateWorld.for_player)
  return for_player_;
}
inline void CreateWorld::set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  for_player_ = value;
  // @@protoc_insertion_point(field_set:Proto.CreateWorld.for_player)
}

// -------------------------------------------------------------------

// DestoryWorld

// uint64 world_sn = 1;
inline void DestoryWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestoryWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.DestoryWorld.world_sn)
  return world_sn_;
}
inline void DestoryWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.DestoryWorld.world_sn)
}

// uint64 for_player = 2;
inline void DestoryWorld::clear_for_player() {
  for_player_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DestoryWorld::for_player() const {
  // @@protoc_insertion_point(field_get:Proto.DestoryWorld.for_player)
  return for_player_;
}
inline void DestoryWorld::set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  for_player_ = value;
  // @@protoc_insertion_point(field_set:Proto.DestoryWorld.for_player)
}

// -------------------------------------------------------------------

// BroadcastCreateWorld

// int32 world_id = 1;
inline void BroadcastCreateWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastCreateWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorld.world_id)
  return world_id_;
}
inline void BroadcastCreateWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorld.world_id)
}

// uint64 world_sn = 2;
inline void BroadcastCreateWorld::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorld::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorld.world_sn)
  return world_sn_;
}
inline void BroadcastCreateWorld::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorld.world_sn)
}

// uint64 for_player = 4;
inline void BroadcastCreateWorld::clear_for_player() {
  for_player_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorld::for_player() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorld.for_player)
  return for_player_;
}
inline void BroadcastCreateWorld::set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  for_player_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorld.for_player)
}

// -------------------------------------------------------------------

// RequestCreateWorldProxy

// int32 world_id = 1;
inline void RequestCreateWorldProxy::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestCreateWorldProxy::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.RequestCreateWorldProxy.world_id)
  return world_id_;
}
inline void RequestCreateWorldProxy::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestCreateWorldProxy.world_id)
}

// uint64 world_sn = 2;
inline void RequestCreateWorldProxy::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestCreateWorldProxy::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.RequestCreateWorldProxy.world_sn)
  return world_sn_;
}
inline void RequestCreateWorldProxy::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestCreateWorldProxy.world_sn)
}

// -------------------------------------------------------------------

// BroadcastCreateWorldProxy

// int32 world_id = 1;
inline void BroadcastCreateWorldProxy::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastCreateWorldProxy::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorldProxy.world_id)
  return world_id_;
}
inline void BroadcastCreateWorldProxy::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorldProxy.world_id)
}

// uint64 world_sn = 2;
inline void BroadcastCreateWorldProxy::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorldProxy::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorldProxy.world_sn)
  return world_sn_;
}
inline void BroadcastCreateWorldProxy::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorldProxy.world_sn)
}

// uint64 for_player = 3;
inline void BroadcastCreateWorldProxy::clear_for_player() {
  for_player_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastCreateWorldProxy::for_player() const {
  // @@protoc_insertion_point(field_get:Proto.BroadcastCreateWorldProxy.for_player)
  return for_player_;
}
inline void BroadcastCreateWorldProxy::set_for_player(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  for_player_ = value;
  // @@protoc_insertion_point(field_set:Proto.BroadcastCreateWorldProxy.for_player)
}

// -------------------------------------------------------------------

// QueryWorldData

// int32 world_id = 1;
inline void QueryWorldData::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryWorldData::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorldData.world_id)
  return world_id_;
}
inline void QueryWorldData::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorldData.world_id)
}

// uint64 world_sn = 2;
inline void QueryWorldData::clear_world_sn() {
  world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryWorldData::world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorldData.world_sn)
  return world_sn_;
}
inline void QueryWorldData::set_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorldData.world_sn)
}

// -------------------------------------------------------------------

// QueryWorldDataRet

// int32 ret = 1;
inline void QueryWorldDataRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryWorldDataRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.QueryWorldDataRet.ret)
  return ret_;
}
inline void QueryWorldDataRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.QueryWorldDataRet.ret)
}

// .Proto.DBWorldData world_data = 2;
inline bool QueryWorldDataRet::has_world_data() const {
  return this != internal_default_instance() && world_data_ != nullptr;
}
inline const ::Proto::DBWorldData& QueryWorldDataRet::world_data() const {
  const ::Proto::DBWorldData* p = world_data_;
  // @@protoc_insertion_point(field_get:Proto.QueryWorldDataRet.world_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::DBWorldData*>(
      &::Proto::_DBWorldData_default_instance_);
}
inline ::Proto::DBWorldData* QueryWorldDataRet::release_world_data() {
  // @@protoc_insertion_point(field_release:Proto.QueryWorldDataRet.world_data)
  
  ::Proto::DBWorldData* temp = world_data_;
  world_data_ = nullptr;
  return temp;
}
inline ::Proto::DBWorldData* QueryWorldDataRet::mutable_world_data() {
  
  if (world_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DBWorldData>(GetArenaNoVirtual());
    world_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.QueryWorldDataRet.world_data)
  return world_data_;
}
inline void QueryWorldDataRet::set_allocated_world_data(::Proto::DBWorldData* world_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_data_);
  }
  if (world_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_data, submessage_arena);
    }
    
  } else {
    
  }
  world_data_ = world_data;
  // @@protoc_insertion_point(field_set_allocated:Proto.QueryWorldDataRet.world_data)
}

// -------------------------------------------------------------------

// SyncWorldData

// .Proto.DBWorldData world_data = 1;
inline bool SyncWorldData::has_world_data() const {
  return this != internal_default_instance() && world_data_ != nullptr;
}
inline const ::Proto::DBWorldData& SyncWorldData::world_data() const {
  const ::Proto::DBWorldData* p = world_data_;
  // @@protoc_insertion_point(field_get:Proto.SyncWorldData.world_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::DBWorldData*>(
      &::Proto::_DBWorldData_default_instance_);
}
inline ::Proto::DBWorldData* SyncWorldData::release_world_data() {
  // @@protoc_insertion_point(field_release:Proto.SyncWorldData.world_data)
  
  ::Proto::DBWorldData* temp = world_data_;
  world_data_ = nullptr;
  return temp;
}
inline ::Proto::DBWorldData* SyncWorldData::mutable_world_data() {
  
  if (world_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DBWorldData>(GetArenaNoVirtual());
    world_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.SyncWorldData.world_data)
  return world_data_;
}
inline void SyncWorldData::set_allocated_world_data(::Proto::DBWorldData* world_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_data_);
  }
  if (world_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_data, submessage_arena);
    }
    
  } else {
    
  }
  world_data_ = world_data;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncWorldData.world_data)
}

// repeated int64 die_sn_list = 2;
inline int SyncWorldData::die_sn_list_size() const {
  return die_sn_list_.size();
}
inline void SyncWorldData::clear_die_sn_list() {
  die_sn_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncWorldData::die_sn_list(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SyncWorldData.die_sn_list)
  return die_sn_list_.Get(index);
}
inline void SyncWorldData::set_die_sn_list(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  die_sn_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.SyncWorldData.die_sn_list)
}
inline void SyncWorldData::add_die_sn_list(::PROTOBUF_NAMESPACE_ID::int64 value) {
  die_sn_list_.Add(value);
  // @@protoc_insertion_point(field_add:Proto.SyncWorldData.die_sn_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SyncWorldData::die_sn_list() const {
  // @@protoc_insertion_point(field_list:Proto.SyncWorldData.die_sn_list)
  return die_sn_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SyncWorldData::mutable_die_sn_list() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SyncWorldData.die_sn_list)
  return &die_sn_list_;
}

// -------------------------------------------------------------------

// WorldAction

// int32 target_type = 1;
inline void WorldAction::clear_target_type() {
  target_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldAction::target_type() const {
  // @@protoc_insertion_point(field_get:Proto.WorldAction.target_type)
  return target_type_;
}
inline void WorldAction::set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldAction.target_type)
}

// int64 target_sn = 2;
inline void WorldAction::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorldAction::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.WorldAction.target_sn)
  return target_sn_;
}
inline void WorldAction::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldAction.target_sn)
}

// int32 action_type = 3;
inline void WorldAction::clear_action_type() {
  action_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldAction::action_type() const {
  // @@protoc_insertion_point(field_get:Proto.WorldAction.action_type)
  return action_type_;
}
inline void WorldAction::set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldAction.action_type)
}

// -------------------------------------------------------------------

// WorldActionRet

// int32 ret = 1;
inline void WorldActionRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldActionRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.WorldActionRet.ret)
  return ret_;
}
inline void WorldActionRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.WorldActionRet.ret)
}

// -------------------------------------------------------------------

// SyncWorldAction

// int64 player_sn = 1;
inline void SyncWorldAction::clear_player_sn() {
  player_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncWorldAction::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncWorldAction.player_sn)
  return player_sn_;
}
inline void SyncWorldAction::set_player_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncWorldAction.player_sn)
}

// int64 target_sn = 2;
inline void SyncWorldAction::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncWorldAction::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.SyncWorldAction.target_sn)
  return target_sn_;
}
inline void SyncWorldAction::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncWorldAction.target_sn)
}

// int32 target_type = 3;
inline void SyncWorldAction::clear_target_type() {
  target_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWorldAction::target_type() const {
  // @@protoc_insertion_point(field_get:Proto.SyncWorldAction.target_type)
  return target_type_;
}
inline void SyncWorldAction::set_target_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncWorldAction.target_type)
}

// int32 action_type = 4;
inline void SyncWorldAction::clear_action_type() {
  action_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWorldAction::action_type() const {
  // @@protoc_insertion_point(field_get:Proto.SyncWorldAction.action_type)
  return action_type_;
}
inline void SyncWorldAction::set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncWorldAction.action_type)
}

// -------------------------------------------------------------------

// RemovePlayer

// uint64 player_sn = 1;
inline void RemovePlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemovePlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.RemovePlayer.player_sn)
  return player_sn_;
}
inline void RemovePlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RemovePlayer.player_sn)
}

// -------------------------------------------------------------------

// RequestSyncPlayer

// uint64 player_sn = 1;
inline void RequestSyncPlayer::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestSyncPlayer::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.RequestSyncPlayer.player_sn)
  return player_sn_;
}
inline void RequestSyncPlayer::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestSyncPlayer.player_sn)
}

// -------------------------------------------------------------------

// Role

// string name = 1;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:Proto.Role.name)
  return name_.GetNoArena();
}
inline void Role::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Role.name)
}
inline void Role::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Role.name)
}
inline std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Role.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:Proto.Role.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.Role.name)
}

// uint64 sn = 2;
inline void Role::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Role::sn() const {
  // @@protoc_insertion_point(field_get:Proto.Role.sn)
  return sn_;
}
inline void Role::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.sn)
}

// int32 template_id = 3;
inline void Role::clear_template_id() {
  template_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::template_id() const {
  // @@protoc_insertion_point(field_get:Proto.Role.template_id)
  return template_id_;
}
inline void Role::set_template_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  template_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.template_id)
}

// int32 level = 4;
inline void Role::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::level() const {
  // @@protoc_insertion_point(field_get:Proto.Role.level)
  return level_;
}
inline void Role::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.Role.level)
}

// .Proto.Vector3 position = 5;
inline bool Role::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::Proto::Vector3& Role::position() const {
  const ::Proto::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:Proto.Role.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3*>(
      &::Proto::_Vector3_default_instance_);
}
inline ::Proto::Vector3* Role::release_position() {
  // @@protoc_insertion_point(field_release:Proto.Role.position)
  
  ::Proto::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3* Role::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Role.position)
  return position_;
}
inline void Role::set_allocated_position(::Proto::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.Role.position)
}

// -------------------------------------------------------------------

// RoleAppear

// repeated .Proto.Role role = 1;
inline int RoleAppear::role_size() const {
  return role_.size();
}
inline void RoleAppear::clear_role() {
  role_.Clear();
}
inline ::Proto::Role* RoleAppear::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.RoleAppear.role)
  return role_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >*
RoleAppear::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Proto.RoleAppear.role)
  return &role_;
}
inline const ::Proto::Role& RoleAppear::role(int index) const {
  // @@protoc_insertion_point(field_get:Proto.RoleAppear.role)
  return role_.Get(index);
}
inline ::Proto::Role* RoleAppear::add_role() {
  // @@protoc_insertion_point(field_add:Proto.RoleAppear.role)
  return role_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Role >&
RoleAppear::role() const {
  // @@protoc_insertion_point(field_list:Proto.RoleAppear.role)
  return role_;
}

// -------------------------------------------------------------------

// RoleDisAppear

// uint64 sn = 1;
inline void RoleDisAppear::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleDisAppear::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RoleDisAppear.sn)
  return sn_;
}
inline void RoleDisAppear::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RoleDisAppear.sn)
}

// -------------------------------------------------------------------

// Teleport

// uint64 last_world_sn = 1;
inline void Teleport::clear_last_world_sn() {
  last_world_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Teleport::last_world_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Teleport.last_world_sn)
  return last_world_sn_;
}
inline void Teleport::set_last_world_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_world_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Teleport.last_world_sn)
}

// uint64 player_sn = 2;
inline void Teleport::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Teleport::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Teleport.player_sn)
  return player_sn_;
}
inline void Teleport::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Teleport.player_sn)
}

// string account = 3;
inline void Teleport::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Teleport::account() const {
  // @@protoc_insertion_point(field_get:Proto.Teleport.account)
  return account_.GetNoArena();
}
inline void Teleport::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Teleport.account)
}
inline void Teleport::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Teleport.account)
}
inline void Teleport::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Teleport.account)
}
inline void Teleport::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Teleport.account)
}
inline std::string* Teleport::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Teleport.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Teleport::release_account() {
  // @@protoc_insertion_point(field_release:Proto.Teleport.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Teleport::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Proto.Teleport.account)
}

// .Proto.Player player = 4;
inline bool Teleport::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& Teleport::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.Teleport.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* Teleport::release_player() {
  // @@protoc_insertion_point(field_release:Proto.Teleport.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* Teleport::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Teleport.player)
  return player_;
}
inline void Teleport::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.Teleport.player)
}

// -------------------------------------------------------------------

// TeleportAfter

// uint64 player_sn = 1;
inline void TeleportAfter::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TeleportAfter::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.TeleportAfter.player_sn)
  return player_sn_;
}
inline void TeleportAfter::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.TeleportAfter.player_sn)
}

// -------------------------------------------------------------------

// MoveByRotation

// uint64 player_sn = 1;
inline void MoveByRotation::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveByRotation::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.MoveByRotation.player_sn)
  return player_sn_;
}
inline void MoveByRotation::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.MoveByRotation.player_sn)
}

// .Proto.Vector3 position = 2;
inline bool MoveByRotation::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::Proto::Vector3& MoveByRotation::position() const {
  const ::Proto::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:Proto.MoveByRotation.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3*>(
      &::Proto::_Vector3_default_instance_);
}
inline ::Proto::Vector3* MoveByRotation::release_position() {
  // @@protoc_insertion_point(field_release:Proto.MoveByRotation.position)
  
  ::Proto::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Proto::Vector3* MoveByRotation::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MoveByRotation.position)
  return position_;
}
inline void MoveByRotation::set_allocated_position(::Proto::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.MoveByRotation.position)
}

// .Proto.Vector3 rotation = 3;
inline bool MoveByRotation::has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline const ::Proto::Vector3& MoveByRotation::rotation() const {
  const ::Proto::Vector3* p = rotation_;
  // @@protoc_insertion_point(field_get:Proto.MoveByRotation.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3*>(
      &::Proto::_Vector3_default_instance_);
}
inline ::Proto::Vector3* MoveByRotation::release_rotation() {
  // @@protoc_insertion_point(field_release:Proto.MoveByRotation.rotation)
  
  ::Proto::Vector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Proto::Vector3* MoveByRotation::mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MoveByRotation.rotation)
  return rotation_;
}
inline void MoveByRotation::set_allocated_rotation(::Proto::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Proto.MoveByRotation.rotation)
}

// .Proto.Vector3 direction = 4;
inline bool MoveByRotation::has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline const ::Proto::Vector3& MoveByRotation::direction() const {
  const ::Proto::Vector3* p = direction_;
  // @@protoc_insertion_point(field_get:Proto.MoveByRotation.direction)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Vector3*>(
      &::Proto::_Vector3_default_instance_);
}
inline ::Proto::Vector3* MoveByRotation::release_direction() {
  // @@protoc_insertion_point(field_release:Proto.MoveByRotation.direction)
  
  ::Proto::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Proto::Vector3* MoveByRotation::mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Vector3>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MoveByRotation.direction)
  return direction_;
}
inline void MoveByRotation::set_allocated_direction(::Proto::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:Proto.MoveByRotation.direction)
}

// float value = 5;
inline void MoveByRotation::clear_value() {
  value_ = 0;
}
inline float MoveByRotation::value() const {
  // @@protoc_insertion_point(field_get:Proto.MoveByRotation.value)
  return value_;
}
inline void MoveByRotation::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Proto.MoveByRotation.value)
}

// -------------------------------------------------------------------

// AddItem

// int32 id = 1;
inline void AddItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddItem::id() const {
  // @@protoc_insertion_point(field_get:Proto.AddItem.id)
  return id_;
}
inline void AddItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddItem.id)
}

// int32 num = 2;
inline void AddItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddItem::num() const {
  // @@protoc_insertion_point(field_get:Proto.AddItem.num)
  return num_;
}
inline void AddItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddItem.num)
}

// -------------------------------------------------------------------

// AddItemRet

// int32 ret = 1;
inline void AddItemRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddItemRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.AddItemRet.ret)
  return ret_;
}
inline void AddItemRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddItemRet.ret)
}

// int32 id = 2;
inline void AddItemRet::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddItemRet::id() const {
  // @@protoc_insertion_point(field_get:Proto.AddItemRet.id)
  return id_;
}
inline void AddItemRet::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddItemRet.id)
}

// int32 num = 3;
inline void AddItemRet::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddItemRet::num() const {
  // @@protoc_insertion_point(field_get:Proto.AddItemRet.num)
  return num_;
}
inline void AddItemRet::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddItemRet.num)
}

// -------------------------------------------------------------------

// AddExp

// int32 exp = 1;
inline void AddExp::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddExp::exp() const {
  // @@protoc_insertion_point(field_get:Proto.AddExp.exp)
  return exp_;
}
inline void AddExp::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddExp.exp)
}

// -------------------------------------------------------------------

// AddExpRet

// int32 ret = 1;
inline void AddExpRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddExpRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.AddExpRet.ret)
  return ret_;
}
inline void AddExpRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddExpRet.ret)
}

// int32 exp = 2;
inline void AddExpRet::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddExpRet::exp() const {
  // @@protoc_insertion_point(field_get:Proto.AddExpRet.exp)
  return exp_;
}
inline void AddExpRet::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddExpRet.exp)
}

// -------------------------------------------------------------------

// Dungeon

// int32 id = 1;
inline void Dungeon::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dungeon::id() const {
  // @@protoc_insertion_point(field_get:Proto.Dungeon.id)
  return id_;
}
inline void Dungeon::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.Dungeon.id)
}

// int32 star = 2;
inline void Dungeon::clear_star() {
  star_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dungeon::star() const {
  // @@protoc_insertion_point(field_get:Proto.Dungeon.star)
  return star_;
}
inline void Dungeon::set_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  star_ = value;
  // @@protoc_insertion_point(field_set:Proto.Dungeon.star)
}

// -------------------------------------------------------------------

// DungeonRs

// int32 ret = 1;
inline void DungeonRs::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungeonRs::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DungeonRs.ret)
  return ret_;
}
inline void DungeonRs::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DungeonRs.ret)
}

// repeated .Proto.ItemBase item_list = 2;
inline int DungeonRs::item_list_size() const {
  return item_list_.size();
}
inline ::Proto::ItemBase* DungeonRs::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.DungeonRs.item_list)
  return item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >*
DungeonRs::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:Proto.DungeonRs.item_list)
  return &item_list_;
}
inline const ::Proto::ItemBase& DungeonRs::item_list(int index) const {
  // @@protoc_insertion_point(field_get:Proto.DungeonRs.item_list)
  return item_list_.Get(index);
}
inline ::Proto::ItemBase* DungeonRs::add_item_list() {
  // @@protoc_insertion_point(field_add:Proto.DungeonRs.item_list)
  return item_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >&
DungeonRs::item_list() const {
  // @@protoc_insertion_point(field_list:Proto.DungeonRs.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// Chat

// .Proto.eChatChannel channel = 1;
inline void Chat::clear_channel() {
  channel_ = 0;
}
inline ::Proto::eChatChannel Chat::channel() const {
  // @@protoc_insertion_point(field_get:Proto.Chat.channel)
  return static_cast< ::Proto::eChatChannel >(channel_);
}
inline void Chat::set_channel(::Proto::eChatChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Proto.Chat.channel)
}

// int64 target_sn = 2;
inline void Chat::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Chat::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Chat.target_sn)
  return target_sn_;
}
inline void Chat::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Chat.target_sn)
}

// bool cross = 3;
inline void Chat::clear_cross() {
  cross_ = false;
}
inline bool Chat::cross() const {
  // @@protoc_insertion_point(field_get:Proto.Chat.cross)
  return cross_;
}
inline void Chat::set_cross(bool value) {
  
  cross_ = value;
  // @@protoc_insertion_point(field_set:Proto.Chat.cross)
}

// int32 server_id = 4;
inline void Chat::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.Chat.server_id)
  return server_id_;
}
inline void Chat::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.Chat.server_id)
}

// bytes chat_msg = 5;
inline void Chat::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat::chat_msg() const {
  // @@protoc_insertion_point(field_get:Proto.Chat.chat_msg)
  return chat_msg_.GetNoArena();
}
inline void Chat::set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.Chat.chat_msg)
}
inline void Chat::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.Chat.chat_msg)
}
inline void Chat::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.Chat.chat_msg)
}
inline void Chat::set_chat_msg(const void* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.Chat.chat_msg)
}
inline std::string* Chat::mutable_chat_msg() {
  
  // @@protoc_insertion_point(field_mutable:Proto.Chat.chat_msg)
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Proto.Chat.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Proto.Chat.chat_msg)
}

// -------------------------------------------------------------------

// ChatRet

// int32 ret = 1;
inline void ChatRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.ChatRet.ret)
  return ret_;
}
inline void ChatRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.ChatRet.ret)
}

// -------------------------------------------------------------------

// SyncChat

// .Proto.eChatChannel channel = 1;
inline void SyncChat::clear_channel() {
  channel_ = 0;
}
inline ::Proto::eChatChannel SyncChat::channel() const {
  // @@protoc_insertion_point(field_get:Proto.SyncChat.channel)
  return static_cast< ::Proto::eChatChannel >(channel_);
}
inline void SyncChat::set_channel(::Proto::eChatChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncChat.channel)
}

// repeated .Proto.STChatInfo chats = 2;
inline int SyncChat::chats_size() const {
  return chats_.size();
}
inline void SyncChat::clear_chats() {
  chats_.Clear();
}
inline ::Proto::STChatInfo* SyncChat::mutable_chats(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SyncChat.chats)
  return chats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >*
SyncChat::mutable_chats() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SyncChat.chats)
  return &chats_;
}
inline const ::Proto::STChatInfo& SyncChat::chats(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SyncChat.chats)
  return chats_.Get(index);
}
inline ::Proto::STChatInfo* SyncChat::add_chats() {
  // @@protoc_insertion_point(field_add:Proto.SyncChat.chats)
  return chats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >&
SyncChat::chats() const {
  // @@protoc_insertion_point(field_list:Proto.SyncChat.chats)
  return chats_;
}

// -------------------------------------------------------------------

// GetChatRecord

// .Proto.eChatChannel channel = 1;
inline void GetChatRecord::clear_channel() {
  channel_ = 0;
}
inline ::Proto::eChatChannel GetChatRecord::channel() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecord.channel)
  return static_cast< ::Proto::eChatChannel >(channel_);
}
inline void GetChatRecord::set_channel(::Proto::eChatChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecord.channel)
}

// int64 chat_id = 2;
inline void GetChatRecord::clear_chat_id() {
  chat_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChatRecord::chat_id() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecord.chat_id)
  return chat_id_;
}
inline void GetChatRecord::set_chat_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecord.chat_id)
}

// int64 target_sn = 3;
inline void GetChatRecord::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChatRecord::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecord.target_sn)
  return target_sn_;
}
inline void GetChatRecord::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecord.target_sn)
}

// int64 my_sn = 4;
inline void GetChatRecord::clear_my_sn() {
  my_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChatRecord::my_sn() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecord.my_sn)
  return my_sn_;
}
inline void GetChatRecord::set_my_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  my_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecord.my_sn)
}

// int32 server_id = 5;
inline void GetChatRecord::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChatRecord::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecord.server_id)
  return server_id_;
}
inline void GetChatRecord::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecord.server_id)
}

// -------------------------------------------------------------------

// STChatInfo

// .Proto.eChatChannel channel = 1;
inline void STChatInfo::clear_channel() {
  channel_ = 0;
}
inline ::Proto::eChatChannel STChatInfo::channel() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.channel)
  return static_cast< ::Proto::eChatChannel >(channel_);
}
inline void STChatInfo::set_channel(::Proto::eChatChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.channel)
}

// int64 chat_time = 2;
inline void STChatInfo::clear_chat_time() {
  chat_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STChatInfo::chat_time() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.chat_time)
  return chat_time_;
}
inline void STChatInfo::set_chat_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chat_time_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.chat_time)
}

// int64 chat_id = 3;
inline void STChatInfo::clear_chat_id() {
  chat_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STChatInfo::chat_id() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.chat_id)
  return chat_id_;
}
inline void STChatInfo::set_chat_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.chat_id)
}

// bool cross = 4;
inline void STChatInfo::clear_cross() {
  cross_ = false;
}
inline bool STChatInfo::cross() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.cross)
  return cross_;
}
inline void STChatInfo::set_cross(bool value) {
  
  cross_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.cross)
}

// int32 server_id = 5;
inline void STChatInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STChatInfo::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.server_id)
  return server_id_;
}
inline void STChatInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.server_id)
}

// bytes chat_msg = 6;
inline void STChatInfo::clear_chat_msg() {
  chat_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STChatInfo::chat_msg() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.chat_msg)
  return chat_msg_.GetNoArena();
}
inline void STChatInfo::set_chat_msg(const std::string& value) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.chat_msg)
}
inline void STChatInfo::set_chat_msg(std::string&& value) {
  
  chat_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.STChatInfo.chat_msg)
}
inline void STChatInfo::set_chat_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.STChatInfo.chat_msg)
}
inline void STChatInfo::set_chat_msg(const void* value, size_t size) {
  
  chat_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.STChatInfo.chat_msg)
}
inline std::string* STChatInfo::mutable_chat_msg() {
  
  // @@protoc_insertion_point(field_mutable:Proto.STChatInfo.chat_msg)
  return chat_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STChatInfo::release_chat_msg() {
  // @@protoc_insertion_point(field_release:Proto.STChatInfo.chat_msg)
  
  return chat_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STChatInfo::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg);
  // @@protoc_insertion_point(field_set_allocated:Proto.STChatInfo.chat_msg)
}

// int64 sender_sn = 7;
inline void STChatInfo::clear_sender_sn() {
  sender_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STChatInfo::sender_sn() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.sender_sn)
  return sender_sn_;
}
inline void STChatInfo::set_sender_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sender_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.sender_sn)
}

// bytes sender_name = 8;
inline void STChatInfo::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STChatInfo::sender_name() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.sender_name)
  return sender_name_.GetNoArena();
}
inline void STChatInfo::set_sender_name(const std::string& value) {
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.sender_name)
}
inline void STChatInfo::set_sender_name(std::string&& value) {
  
  sender_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.STChatInfo.sender_name)
}
inline void STChatInfo::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.STChatInfo.sender_name)
}
inline void STChatInfo::set_sender_name(const void* value, size_t size) {
  
  sender_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.STChatInfo.sender_name)
}
inline std::string* STChatInfo::mutable_sender_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.STChatInfo.sender_name)
  return sender_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STChatInfo::release_sender_name() {
  // @@protoc_insertion_point(field_release:Proto.STChatInfo.sender_name)
  
  return sender_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STChatInfo::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  sender_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.STChatInfo.sender_name)
}

// int64 recver_sn = 9;
inline void STChatInfo::clear_recver_sn() {
  recver_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STChatInfo::recver_sn() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.recver_sn)
  return recver_sn_;
}
inline void STChatInfo::set_recver_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  recver_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.recver_sn)
}

// bytes recver_name = 10;
inline void STChatInfo::clear_recver_name() {
  recver_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STChatInfo::recver_name() const {
  // @@protoc_insertion_point(field_get:Proto.STChatInfo.recver_name)
  return recver_name_.GetNoArena();
}
inline void STChatInfo::set_recver_name(const std::string& value) {
  
  recver_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.STChatInfo.recver_name)
}
inline void STChatInfo::set_recver_name(std::string&& value) {
  
  recver_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.STChatInfo.recver_name)
}
inline void STChatInfo::set_recver_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recver_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.STChatInfo.recver_name)
}
inline void STChatInfo::set_recver_name(const void* value, size_t size) {
  
  recver_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.STChatInfo.recver_name)
}
inline std::string* STChatInfo::mutable_recver_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.STChatInfo.recver_name)
  return recver_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STChatInfo::release_recver_name() {
  // @@protoc_insertion_point(field_release:Proto.STChatInfo.recver_name)
  
  return recver_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STChatInfo::set_allocated_recver_name(std::string* recver_name) {
  if (recver_name != nullptr) {
    
  } else {
    
  }
  recver_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recver_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.STChatInfo.recver_name)
}

// -------------------------------------------------------------------

// GetChatRecordRet

// .Proto.eChatChannel channel = 1;
inline void GetChatRecordRet::clear_channel() {
  channel_ = 0;
}
inline ::Proto::eChatChannel GetChatRecordRet::channel() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecordRet.channel)
  return static_cast< ::Proto::eChatChannel >(channel_);
}
inline void GetChatRecordRet::set_channel(::Proto::eChatChannel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecordRet.channel)
}

// repeated .Proto.STChatInfo chats = 2;
inline int GetChatRecordRet::chats_size() const {
  return chats_.size();
}
inline void GetChatRecordRet::clear_chats() {
  chats_.Clear();
}
inline ::Proto::STChatInfo* GetChatRecordRet::mutable_chats(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.GetChatRecordRet.chats)
  return chats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >*
GetChatRecordRet::mutable_chats() {
  // @@protoc_insertion_point(field_mutable_list:Proto.GetChatRecordRet.chats)
  return &chats_;
}
inline const ::Proto::STChatInfo& GetChatRecordRet::chats(int index) const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecordRet.chats)
  return chats_.Get(index);
}
inline ::Proto::STChatInfo* GetChatRecordRet::add_chats() {
  // @@protoc_insertion_point(field_add:Proto.GetChatRecordRet.chats)
  return chats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STChatInfo >&
GetChatRecordRet::chats() const {
  // @@protoc_insertion_point(field_list:Proto.GetChatRecordRet.chats)
  return chats_;
}

// int64 my_sn = 3;
inline void GetChatRecordRet::clear_my_sn() {
  my_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChatRecordRet::my_sn() const {
  // @@protoc_insertion_point(field_get:Proto.GetChatRecordRet.my_sn)
  return my_sn_;
}
inline void GetChatRecordRet::set_my_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  my_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetChatRecordRet.my_sn)
}

// -------------------------------------------------------------------

// QueryAllPlayerName

// -------------------------------------------------------------------

// STPlayerSnName

// int64 sn = 1;
inline void STPlayerSnName::clear_sn() {
  sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STPlayerSnName::sn() const {
  // @@protoc_insertion_point(field_get:Proto.STPlayerSnName.sn)
  return sn_;
}
inline void STPlayerSnName::set_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.STPlayerSnName.sn)
}

// bytes name = 2;
inline void STPlayerSnName::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& STPlayerSnName::name() const {
  // @@protoc_insertion_point(field_get:Proto.STPlayerSnName.name)
  return name_.GetNoArena();
}
inline void STPlayerSnName::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.STPlayerSnName.name)
}
inline void STPlayerSnName::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.STPlayerSnName.name)
}
inline void STPlayerSnName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.STPlayerSnName.name)
}
inline void STPlayerSnName::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.STPlayerSnName.name)
}
inline std::string* STPlayerSnName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.STPlayerSnName.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* STPlayerSnName::release_name() {
  // @@protoc_insertion_point(field_release:Proto.STPlayerSnName.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void STPlayerSnName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.STPlayerSnName.name)
}

// -------------------------------------------------------------------

// QueryAllPlayerNameRet

// repeated .Proto.STPlayerSnName infos = 1;
inline int QueryAllPlayerNameRet::infos_size() const {
  return infos_.size();
}
inline void QueryAllPlayerNameRet::clear_infos() {
  infos_.Clear();
}
inline ::Proto::STPlayerSnName* QueryAllPlayerNameRet::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.QueryAllPlayerNameRet.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STPlayerSnName >*
QueryAllPlayerNameRet::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:Proto.QueryAllPlayerNameRet.infos)
  return &infos_;
}
inline const ::Proto::STPlayerSnName& QueryAllPlayerNameRet::infos(int index) const {
  // @@protoc_insertion_point(field_get:Proto.QueryAllPlayerNameRet.infos)
  return infos_.Get(index);
}
inline ::Proto::STPlayerSnName* QueryAllPlayerNameRet::add_infos() {
  // @@protoc_insertion_point(field_add:Proto.QueryAllPlayerNameRet.infos)
  return infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STPlayerSnName >&
QueryAllPlayerNameRet::infos() const {
  // @@protoc_insertion_point(field_list:Proto.QueryAllPlayerNameRet.infos)
  return infos_;
}

// -------------------------------------------------------------------

// Mute

// bool cross = 1;
inline void Mute::clear_cross() {
  cross_ = false;
}
inline bool Mute::cross() const {
  // @@protoc_insertion_point(field_get:Proto.Mute.cross)
  return cross_;
}
inline void Mute::set_cross(bool value) {
  
  cross_ = value;
  // @@protoc_insertion_point(field_set:Proto.Mute.cross)
}

// int32 server_id = 2;
inline void Mute::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mute::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.Mute.server_id)
  return server_id_;
}
inline void Mute::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.Mute.server_id)
}

// int64 target_sn = 3;
inline void Mute::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Mute::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.Mute.target_sn)
  return target_sn_;
}
inline void Mute::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.Mute.target_sn)
}

// bool mute = 4;
inline void Mute::clear_mute() {
  mute_ = false;
}
inline bool Mute::mute() const {
  // @@protoc_insertion_point(field_get:Proto.Mute.mute)
  return mute_;
}
inline void Mute::set_mute(bool value) {
  
  mute_ = value;
  // @@protoc_insertion_point(field_set:Proto.Mute.mute)
}

// -------------------------------------------------------------------

// MuteRet

// int32 ret = 1;
inline void MuteRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MuteRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.MuteRet.ret)
  return ret_;
}
inline void MuteRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.MuteRet.ret)
}

// int64 operator_sn = 2;
inline void MuteRet::clear_operator_sn() {
  operator_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MuteRet::operator_sn() const {
  // @@protoc_insertion_point(field_get:Proto.MuteRet.operator_sn)
  return operator_sn_;
}
inline void MuteRet::set_operator_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operator_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.MuteRet.operator_sn)
}

// int64 target_sn = 3;
inline void MuteRet::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MuteRet::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.MuteRet.target_sn)
  return target_sn_;
}
inline void MuteRet::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.MuteRet.target_sn)
}

// bool mute = 4;
inline void MuteRet::clear_mute() {
  mute_ = false;
}
inline bool MuteRet::mute() const {
  // @@protoc_insertion_point(field_get:Proto.MuteRet.mute)
  return mute_;
}
inline void MuteRet::set_mute(bool value) {
  
  mute_ = value;
  // @@protoc_insertion_point(field_set:Proto.MuteRet.mute)
}

// -------------------------------------------------------------------

// GetTargetInfo

// bool cross = 1;
inline void GetTargetInfo::clear_cross() {
  cross_ = false;
}
inline bool GetTargetInfo::cross() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfo.cross)
  return cross_;
}
inline void GetTargetInfo::set_cross(bool value) {
  
  cross_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfo.cross)
}

// int32 server_id = 2;
inline void GetTargetInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTargetInfo::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfo.server_id)
  return server_id_;
}
inline void GetTargetInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfo.server_id)
}

// int64 target_sn = 3;
inline void GetTargetInfo::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTargetInfo::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfo.target_sn)
  return target_sn_;
}
inline void GetTargetInfo::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfo.target_sn)
}

// -------------------------------------------------------------------

// GetTargetInfoRet

// int32 ret = 1;
inline void GetTargetInfoRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTargetInfoRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.ret)
  return ret_;
}
inline void GetTargetInfoRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.ret)
}

// bool cross = 2;
inline void GetTargetInfoRet::clear_cross() {
  cross_ = false;
}
inline bool GetTargetInfoRet::cross() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.cross)
  return cross_;
}
inline void GetTargetInfoRet::set_cross(bool value) {
  
  cross_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.cross)
}

// int32 server_id = 3;
inline void GetTargetInfoRet::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTargetInfoRet::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.server_id)
  return server_id_;
}
inline void GetTargetInfoRet::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.server_id)
}

// int64 target_sn = 4;
inline void GetTargetInfoRet::clear_target_sn() {
  target_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTargetInfoRet::target_sn() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.target_sn)
  return target_sn_;
}
inline void GetTargetInfoRet::set_target_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.target_sn)
}

// bytes target_name = 5;
inline void GetTargetInfoRet::clear_target_name() {
  target_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTargetInfoRet::target_name() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.target_name)
  return target_name_.GetNoArena();
}
inline void GetTargetInfoRet::set_target_name(const std::string& value) {
  
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.target_name)
}
inline void GetTargetInfoRet::set_target_name(std::string&& value) {
  
  target_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GetTargetInfoRet.target_name)
}
inline void GetTargetInfoRet::set_target_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GetTargetInfoRet.target_name)
}
inline void GetTargetInfoRet::set_target_name(const void* value, size_t size) {
  
  target_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GetTargetInfoRet.target_name)
}
inline std::string* GetTargetInfoRet::mutable_target_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GetTargetInfoRet.target_name)
  return target_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTargetInfoRet::release_target_name() {
  // @@protoc_insertion_point(field_release:Proto.GetTargetInfoRet.target_name)
  
  return target_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTargetInfoRet::set_allocated_target_name(std::string* target_name) {
  if (target_name != nullptr) {
    
  } else {
    
  }
  target_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_name);
  // @@protoc_insertion_point(field_set_allocated:Proto.GetTargetInfoRet.target_name)
}

// bool in_blacklist = 6;
inline void GetTargetInfoRet::clear_in_blacklist() {
  in_blacklist_ = false;
}
inline bool GetTargetInfoRet::in_blacklist() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.in_blacklist)
  return in_blacklist_;
}
inline void GetTargetInfoRet::set_in_blacklist(bool value) {
  
  in_blacklist_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.in_blacklist)
}

// bool in_mute = 7;
inline void GetTargetInfoRet::clear_in_mute() {
  in_mute_ = false;
}
inline bool GetTargetInfoRet::in_mute() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.in_mute)
  return in_mute_;
}
inline void GetTargetInfoRet::set_in_mute(bool value) {
  
  in_mute_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.in_mute)
}

// bytes res_pic = 8;
inline void GetTargetInfoRet::clear_res_pic() {
  res_pic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTargetInfoRet::res_pic() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.res_pic)
  return res_pic_.GetNoArena();
}
inline void GetTargetInfoRet::set_res_pic(const std::string& value) {
  
  res_pic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.res_pic)
}
inline void GetTargetInfoRet::set_res_pic(std::string&& value) {
  
  res_pic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GetTargetInfoRet.res_pic)
}
inline void GetTargetInfoRet::set_res_pic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_pic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GetTargetInfoRet.res_pic)
}
inline void GetTargetInfoRet::set_res_pic(const void* value, size_t size) {
  
  res_pic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GetTargetInfoRet.res_pic)
}
inline std::string* GetTargetInfoRet::mutable_res_pic() {
  
  // @@protoc_insertion_point(field_mutable:Proto.GetTargetInfoRet.res_pic)
  return res_pic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTargetInfoRet::release_res_pic() {
  // @@protoc_insertion_point(field_release:Proto.GetTargetInfoRet.res_pic)
  
  return res_pic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTargetInfoRet::set_allocated_res_pic(std::string* res_pic) {
  if (res_pic != nullptr) {
    
  } else {
    
  }
  res_pic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_pic);
  // @@protoc_insertion_point(field_set_allocated:Proto.GetTargetInfoRet.res_pic)
}

// bool online = 9;
inline void GetTargetInfoRet::clear_online() {
  online_ = false;
}
inline bool GetTargetInfoRet::online() const {
  // @@protoc_insertion_point(field_get:Proto.GetTargetInfoRet.online)
  return online_;
}
inline void GetTargetInfoRet::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.GetTargetInfoRet.online)
}

// -------------------------------------------------------------------

// BoardcastLogin

// int64 sn = 1;
inline void BoardcastLogin::clear_sn() {
  sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BoardcastLogin::sn() const {
  // @@protoc_insertion_point(field_get:Proto.BoardcastLogin.sn)
  return sn_;
}
inline void BoardcastLogin::set_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BoardcastLogin.sn)
}

// bytes name = 2;
inline void BoardcastLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BoardcastLogin::name() const {
  // @@protoc_insertion_point(field_get:Proto.BoardcastLogin.name)
  return name_.GetNoArena();
}
inline void BoardcastLogin::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.BoardcastLogin.name)
}
inline void BoardcastLogin::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.BoardcastLogin.name)
}
inline void BoardcastLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.BoardcastLogin.name)
}
inline void BoardcastLogin::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.BoardcastLogin.name)
}
inline std::string* BoardcastLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.BoardcastLogin.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BoardcastLogin::release_name() {
  // @@protoc_insertion_point(field_release:Proto.BoardcastLogin.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BoardcastLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.BoardcastLogin.name)
}

// -------------------------------------------------------------------

// STFriendInfo

// int32 player_sn = 1;
inline void STFriendInfo::clear_player_sn() {
  player_sn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STFriendInfo::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.STFriendInfo.player_sn)
  return player_sn_;
}
inline void STFriendInfo::set_player_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.STFriendInfo.player_sn)
}

// int32 level = 2;
inline void STFriendInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STFriendInfo::level() const {
  // @@protoc_insertion_point(field_get:Proto.STFriendInfo.level)
  return level_;
}
inline void STFriendInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.STFriendInfo.level)
}

// int32 vip = 3;
inline void STFriendInfo::clear_vip() {
  vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STFriendInfo::vip() const {
  // @@protoc_insertion_point(field_get:Proto.STFriendInfo.vip)
  return vip_;
}
inline void STFriendInfo::set_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_ = value;
  // @@protoc_insertion_point(field_set:Proto.STFriendInfo.vip)
}

// int32 online = 4;
inline void STFriendInfo::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STFriendInfo::online() const {
  // @@protoc_insertion_point(field_get:Proto.STFriendInfo.online)
  return online_;
}
inline void STFriendInfo::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Proto.STFriendInfo.online)
}

// -------------------------------------------------------------------

// GetFriendList

// -------------------------------------------------------------------

// GetFriendListRet

// repeated .Proto.STFriendInfo friends = 1;
inline int GetFriendListRet::friends_size() const {
  return friends_.size();
}
inline void GetFriendListRet::clear_friends() {
  friends_.Clear();
}
inline ::Proto::STFriendInfo* GetFriendListRet::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.GetFriendListRet.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >*
GetFriendListRet::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Proto.GetFriendListRet.friends)
  return &friends_;
}
inline const ::Proto::STFriendInfo& GetFriendListRet::friends(int index) const {
  // @@protoc_insertion_point(field_get:Proto.GetFriendListRet.friends)
  return friends_.Get(index);
}
inline ::Proto::STFriendInfo* GetFriendListRet::add_friends() {
  // @@protoc_insertion_point(field_add:Proto.GetFriendListRet.friends)
  return friends_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >&
GetFriendListRet::friends() const {
  // @@protoc_insertion_point(field_list:Proto.GetFriendListRet.friends)
  return friends_;
}

// -------------------------------------------------------------------

// AddFriend

// int32 server_id = 1;
inline void AddFriend::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriend::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.AddFriend.server_id)
  return server_id_;
}
inline void AddFriend::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddFriend.server_id)
}

// int64 player_sn = 2;
inline void AddFriend::clear_player_sn() {
  player_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddFriend::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.AddFriend.player_sn)
  return player_sn_;
}
inline void AddFriend::set_player_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddFriend.player_sn)
}

// -------------------------------------------------------------------

// AddFriendRet

// int32 ret = 1;
inline void AddFriendRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFriendRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.AddFriendRet.ret)
  return ret_;
}
inline void AddFriendRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.AddFriendRet.ret)
}

// -------------------------------------------------------------------

// DelFriend

// int32 player_sn = 1;
inline void DelFriend::clear_player_sn() {
  player_sn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelFriend::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.DelFriend.player_sn)
  return player_sn_;
}
inline void DelFriend::set_player_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.DelFriend.player_sn)
}

// -------------------------------------------------------------------

// DelFriendRet

// int32 ret = 1;
inline void DelFriendRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelFriendRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DelFriendRet.ret)
  return ret_;
}
inline void DelFriendRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DelFriendRet.ret)
}

// -------------------------------------------------------------------

// RefreshFriend

// -------------------------------------------------------------------

// RefreshFriendRet

// repeated .Proto.STFriendInfo friends = 1;
inline int RefreshFriendRet::friends_size() const {
  return friends_.size();
}
inline void RefreshFriendRet::clear_friends() {
  friends_.Clear();
}
inline ::Proto::STFriendInfo* RefreshFriendRet::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.RefreshFriendRet.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >*
RefreshFriendRet::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Proto.RefreshFriendRet.friends)
  return &friends_;
}
inline const ::Proto::STFriendInfo& RefreshFriendRet::friends(int index) const {
  // @@protoc_insertion_point(field_get:Proto.RefreshFriendRet.friends)
  return friends_.Get(index);
}
inline ::Proto::STFriendInfo* RefreshFriendRet::add_friends() {
  // @@protoc_insertion_point(field_add:Proto.RefreshFriendRet.friends)
  return friends_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::STFriendInfo >&
RefreshFriendRet::friends() const {
  // @@protoc_insertion_point(field_list:Proto.RefreshFriendRet.friends)
  return friends_;
}

// -------------------------------------------------------------------

// JoinGuild

// int64 guild_sn = 1;
inline void JoinGuild::clear_guild_sn() {
  guild_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JoinGuild::guild_sn() const {
  // @@protoc_insertion_point(field_get:Proto.JoinGuild.guild_sn)
  return guild_sn_;
}
inline void JoinGuild::set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guild_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinGuild.guild_sn)
}

// -------------------------------------------------------------------

// JoinGuildRet

// int32 ret = 1;
inline void JoinGuildRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinGuildRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.JoinGuildRet.ret)
  return ret_;
}
inline void JoinGuildRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinGuildRet.ret)
}

// int64 guild_sn = 2;
inline void JoinGuildRet::clear_guild_sn() {
  guild_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JoinGuildRet::guild_sn() const {
  // @@protoc_insertion_point(field_get:Proto.JoinGuildRet.guild_sn)
  return guild_sn_;
}
inline void JoinGuildRet::set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guild_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinGuildRet.guild_sn)
}

// -------------------------------------------------------------------

// QuitGuild

// int64 guild_sn = 1;
inline void QuitGuild::clear_guild_sn() {
  guild_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuitGuild::guild_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QuitGuild.guild_sn)
  return guild_sn_;
}
inline void QuitGuild::set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guild_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitGuild.guild_sn)
}

// -------------------------------------------------------------------

// QuitGuildRet

// int32 ret = 1;
inline void QuitGuildRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitGuildRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.QuitGuildRet.ret)
  return ret_;
}
inline void QuitGuildRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitGuildRet.ret)
}

// int64 guild_sn = 2;
inline void QuitGuildRet::clear_guild_sn() {
  guild_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuitGuildRet::guild_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QuitGuildRet.guild_sn)
  return guild_sn_;
}
inline void QuitGuildRet::set_guild_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guild_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitGuildRet.guild_sn)
}

// -------------------------------------------------------------------

// JoinTeam

// int64 team_sn = 1;
inline void JoinTeam::clear_team_sn() {
  team_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JoinTeam::team_sn() const {
  // @@protoc_insertion_point(field_get:Proto.JoinTeam.team_sn)
  return team_sn_;
}
inline void JoinTeam::set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  team_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinTeam.team_sn)
}

// -------------------------------------------------------------------

// JoinTeamRet

// int32 ret = 1;
inline void JoinTeamRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinTeamRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.JoinTeamRet.ret)
  return ret_;
}
inline void JoinTeamRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinTeamRet.ret)
}

// int64 team_sn = 2;
inline void JoinTeamRet::clear_team_sn() {
  team_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 JoinTeamRet::team_sn() const {
  // @@protoc_insertion_point(field_get:Proto.JoinTeamRet.team_sn)
  return team_sn_;
}
inline void JoinTeamRet::set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  team_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.JoinTeamRet.team_sn)
}

// -------------------------------------------------------------------

// QuitTeam

// int64 team_sn = 1;
inline void QuitTeam::clear_team_sn() {
  team_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuitTeam::team_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QuitTeam.team_sn)
  return team_sn_;
}
inline void QuitTeam::set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  team_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitTeam.team_sn)
}

// -------------------------------------------------------------------

// QuitTeamRet

// int32 ret = 1;
inline void QuitTeamRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuitTeamRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.QuitTeamRet.ret)
  return ret_;
}
inline void QuitTeamRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitTeamRet.ret)
}

// int64 team_sn = 2;
inline void QuitTeamRet::clear_team_sn() {
  team_sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuitTeamRet::team_sn() const {
  // @@protoc_insertion_point(field_get:Proto.QuitTeamRet.team_sn)
  return team_sn_;
}
inline void QuitTeamRet::set_team_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  team_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.QuitTeamRet.team_sn)
}

// -------------------------------------------------------------------

// SyncPlayerProperty

// .Proto.SyncPlayerProperty.PlayerPropertyType property_type = 1;
inline void SyncPlayerProperty::clear_property_type() {
  property_type_ = 0;
}
inline ::Proto::SyncPlayerProperty_PlayerPropertyType SyncPlayerProperty::property_type() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerProperty.property_type)
  return static_cast< ::Proto::SyncPlayerProperty_PlayerPropertyType >(property_type_);
}
inline void SyncPlayerProperty::set_property_type(::Proto::SyncPlayerProperty_PlayerPropertyType value) {
  
  property_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayerProperty.property_type)
}

// int64 value = 2;
inline void SyncPlayerProperty::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerProperty::value() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerProperty.value)
  return value_;
}
inline void SyncPlayerProperty::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayerProperty.value)
}

// int64 value_change = 3;
inline void SyncPlayerProperty::clear_value_change() {
  value_change_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerProperty::value_change() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerProperty.value_change)
  return value_change_;
}
inline void SyncPlayerProperty::set_value_change(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_change_ = value;
  // @@protoc_insertion_point(field_set:Proto.SyncPlayerProperty.value_change)
}

// -------------------------------------------------------------------

// SyncPlayerPropertyList

// repeated .Proto.SyncPlayerProperty properties = 1;
inline int SyncPlayerPropertyList::properties_size() const {
  return properties_.size();
}
inline void SyncPlayerPropertyList::clear_properties() {
  properties_.Clear();
}
inline ::Proto::SyncPlayerProperty* SyncPlayerPropertyList::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayerPropertyList.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayerProperty >*
SyncPlayerPropertyList::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Proto.SyncPlayerPropertyList.properties)
  return &properties_;
}
inline const ::Proto::SyncPlayerProperty& SyncPlayerPropertyList::properties(int index) const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayerPropertyList.properties)
  return properties_.Get(index);
}
inline ::Proto::SyncPlayerProperty* SyncPlayerPropertyList::add_properties() {
  // @@protoc_insertion_point(field_add:Proto.SyncPlayerPropertyList.properties)
  return properties_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayerProperty >&
SyncPlayerPropertyList::properties() const {
  // @@protoc_insertion_point(field_list:Proto.SyncPlayerPropertyList.properties)
  return properties_;
}

// -------------------------------------------------------------------

// RequestChangeTeam

// .Proto.Team.TeamType team_type = 1;
inline void RequestChangeTeam::clear_team_type() {
  team_type_ = 0;
}
inline ::Proto::Team_TeamType RequestChangeTeam::team_type() const {
  // @@protoc_insertion_point(field_get:Proto.RequestChangeTeam.team_type)
  return static_cast< ::Proto::Team_TeamType >(team_type_);
}
inline void RequestChangeTeam::set_team_type(::Proto::Team_TeamType value) {
  
  team_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestChangeTeam.team_type)
}

// repeated .Proto.CardTeam cards = 2;
inline int RequestChangeTeam::cards_size() const {
  return cards_.size();
}
inline ::Proto::CardTeam* RequestChangeTeam::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.RequestChangeTeam.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >*
RequestChangeTeam::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:Proto.RequestChangeTeam.cards)
  return &cards_;
}
inline const ::Proto::CardTeam& RequestChangeTeam::cards(int index) const {
  // @@protoc_insertion_point(field_get:Proto.RequestChangeTeam.cards)
  return cards_.Get(index);
}
inline ::Proto::CardTeam* RequestChangeTeam::add_cards() {
  // @@protoc_insertion_point(field_add:Proto.RequestChangeTeam.cards)
  return cards_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >&
RequestChangeTeam::cards() const {
  // @@protoc_insertion_point(field_list:Proto.RequestChangeTeam.cards)
  return cards_;
}

// -------------------------------------------------------------------

// ReseponseChangeTeam

// .Proto.Team.TeamType team_type = 1;
inline void ReseponseChangeTeam::clear_team_type() {
  team_type_ = 0;
}
inline ::Proto::Team_TeamType ReseponseChangeTeam::team_type() const {
  // @@protoc_insertion_point(field_get:Proto.ReseponseChangeTeam.team_type)
  return static_cast< ::Proto::Team_TeamType >(team_type_);
}
inline void ReseponseChangeTeam::set_team_type(::Proto::Team_TeamType value) {
  
  team_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReseponseChangeTeam.team_type)
}

// repeated .Proto.CardTeam cards = 2;
inline int ReseponseChangeTeam::cards_size() const {
  return cards_.size();
}
inline ::Proto::CardTeam* ReseponseChangeTeam::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ReseponseChangeTeam.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >*
ReseponseChangeTeam::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ReseponseChangeTeam.cards)
  return &cards_;
}
inline const ::Proto::CardTeam& ReseponseChangeTeam::cards(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ReseponseChangeTeam.cards)
  return cards_.Get(index);
}
inline ::Proto::CardTeam* ReseponseChangeTeam::add_cards() {
  // @@protoc_insertion_point(field_add:Proto.ReseponseChangeTeam.cards)
  return cards_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CardTeam >&
ReseponseChangeTeam::cards() const {
  // @@protoc_insertion_point(field_list:Proto.ReseponseChangeTeam.cards)
  return cards_;
}

// -------------------------------------------------------------------

// ReqCardLevelUp

// int32 cardID = 1;
inline void ReqCardLevelUp::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCardLevelUp::cardid() const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardLevelUp.cardID)
  return cardid_;
}
inline void ReqCardLevelUp::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqCardLevelUp.cardID)
}

// bool isOneKey = 2;
inline void ReqCardLevelUp::clear_isonekey() {
  isonekey_ = false;
}
inline bool ReqCardLevelUp::isonekey() const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardLevelUp.isOneKey)
  return isonekey_;
}
inline void ReqCardLevelUp::set_isonekey(bool value) {
  
  isonekey_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqCardLevelUp.isOneKey)
}

// repeated .Proto.Item material = 3;
inline int ReqCardLevelUp::material_size() const {
  return material_.size();
}
inline ::Proto::Item* ReqCardLevelUp::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ReqCardLevelUp.material)
  return material_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >*
ReqCardLevelUp::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ReqCardLevelUp.material)
  return &material_;
}
inline const ::Proto::Item& ReqCardLevelUp::material(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardLevelUp.material)
  return material_.Get(index);
}
inline ::Proto::Item* ReqCardLevelUp::add_material() {
  // @@protoc_insertion_point(field_add:Proto.ReqCardLevelUp.material)
  return material_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >&
ReqCardLevelUp::material() const {
  // @@protoc_insertion_point(field_list:Proto.ReqCardLevelUp.material)
  return material_;
}

// int32 operator_type = 4;
inline void ReqCardLevelUp::clear_operator_type() {
  operator_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCardLevelUp::operator_type() const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardLevelUp.operator_type)
  return operator_type_;
}
inline void ReqCardLevelUp::set_operator_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operator_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqCardLevelUp.operator_type)
}

// -------------------------------------------------------------------

// ReqCardStar

// int32 cardID = 1;
inline void ReqCardStar::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCardStar::cardid() const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardStar.cardID)
  return cardid_;
}
inline void ReqCardStar::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqCardStar.cardID)
}

// repeated .Proto.ItemBase materialItems = 2;
inline int ReqCardStar::materialitems_size() const {
  return materialitems_.size();
}
inline ::Proto::ItemBase* ReqCardStar::mutable_materialitems(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ReqCardStar.materialItems)
  return materialitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >*
ReqCardStar::mutable_materialitems() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ReqCardStar.materialItems)
  return &materialitems_;
}
inline const ::Proto::ItemBase& ReqCardStar::materialitems(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardStar.materialItems)
  return materialitems_.Get(index);
}
inline ::Proto::ItemBase* ReqCardStar::add_materialitems() {
  // @@protoc_insertion_point(field_add:Proto.ReqCardStar.materialItems)
  return materialitems_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >&
ReqCardStar::materialitems() const {
  // @@protoc_insertion_point(field_list:Proto.ReqCardStar.materialItems)
  return materialitems_;
}

// -------------------------------------------------------------------

// ReqCardQlt

// int32 qltCardID = 1;
inline void ReqCardQlt::clear_qltcardid() {
  qltcardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCardQlt::qltcardid() const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardQlt.qltCardID)
  return qltcardid_;
}
inline void ReqCardQlt::set_qltcardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qltcardid_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqCardQlt.qltCardID)
}

// repeated .Proto.ItemBase materialItems = 2;
inline int ReqCardQlt::materialitems_size() const {
  return materialitems_.size();
}
inline ::Proto::ItemBase* ReqCardQlt::mutable_materialitems(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ReqCardQlt.materialItems)
  return materialitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >*
ReqCardQlt::mutable_materialitems() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ReqCardQlt.materialItems)
  return &materialitems_;
}
inline const ::Proto::ItemBase& ReqCardQlt::materialitems(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardQlt.materialItems)
  return materialitems_.Get(index);
}
inline ::Proto::ItemBase* ReqCardQlt::add_materialitems() {
  // @@protoc_insertion_point(field_add:Proto.ReqCardQlt.materialItems)
  return materialitems_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemBase >&
ReqCardQlt::materialitems() const {
  // @@protoc_insertion_point(field_list:Proto.ReqCardQlt.materialItems)
  return materialitems_;
}

// -------------------------------------------------------------------

// ResCardLevel

// .Proto.ResCardLevel.ResCode rescode = 1;
inline void ResCardLevel::clear_rescode() {
  rescode_ = 0;
}
inline ::Proto::ResCardLevel_ResCode ResCardLevel::rescode() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardLevel.rescode)
  return static_cast< ::Proto::ResCardLevel_ResCode >(rescode_);
}
inline void ResCardLevel::set_rescode(::Proto::ResCardLevel_ResCode value) {
  
  rescode_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardLevel.rescode)
}

// int32 isOneKey = 2;
inline void ResCardLevel::clear_isonekey() {
  isonekey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCardLevel::isonekey() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardLevel.isOneKey)
  return isonekey_;
}
inline void ResCardLevel::set_isonekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isonekey_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardLevel.isOneKey)
}

// .Proto.Card newcard = 3;
inline bool ResCardLevel::has_newcard() const {
  return this != internal_default_instance() && newcard_ != nullptr;
}
inline const ::Proto::Card& ResCardLevel::newcard() const {
  const ::Proto::Card* p = newcard_;
  // @@protoc_insertion_point(field_get:Proto.ResCardLevel.newcard)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Card*>(
      &::Proto::_Card_default_instance_);
}
inline ::Proto::Card* ResCardLevel::release_newcard() {
  // @@protoc_insertion_point(field_release:Proto.ResCardLevel.newcard)
  
  ::Proto::Card* temp = newcard_;
  newcard_ = nullptr;
  return temp;
}
inline ::Proto::Card* ResCardLevel::mutable_newcard() {
  
  if (newcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Card>(GetArenaNoVirtual());
    newcard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ResCardLevel.newcard)
  return newcard_;
}
inline void ResCardLevel::set_allocated_newcard(::Proto::Card* newcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newcard_);
  }
  if (newcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newcard, submessage_arena);
    }
    
  } else {
    
  }
  newcard_ = newcard;
  // @@protoc_insertion_point(field_set_allocated:Proto.ResCardLevel.newcard)
}

// int32 detalfightpower = 4;
inline void ResCardLevel::clear_detalfightpower() {
  detalfightpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCardLevel::detalfightpower() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardLevel.detalfightpower)
  return detalfightpower_;
}
inline void ResCardLevel::set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detalfightpower_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardLevel.detalfightpower)
}

// -------------------------------------------------------------------

// ResCardStar

// .Proto.ResCardStar.StarResCode starResCode = 1;
inline void ResCardStar::clear_starrescode() {
  starrescode_ = 0;
}
inline ::Proto::ResCardStar_StarResCode ResCardStar::starrescode() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardStar.starResCode)
  return static_cast< ::Proto::ResCardStar_StarResCode >(starrescode_);
}
inline void ResCardStar::set_starrescode(::Proto::ResCardStar_StarResCode value) {
  
  starrescode_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardStar.starResCode)
}

// .Proto.Card newcard = 2;
inline bool ResCardStar::has_newcard() const {
  return this != internal_default_instance() && newcard_ != nullptr;
}
inline const ::Proto::Card& ResCardStar::newcard() const {
  const ::Proto::Card* p = newcard_;
  // @@protoc_insertion_point(field_get:Proto.ResCardStar.newcard)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Card*>(
      &::Proto::_Card_default_instance_);
}
inline ::Proto::Card* ResCardStar::release_newcard() {
  // @@protoc_insertion_point(field_release:Proto.ResCardStar.newcard)
  
  ::Proto::Card* temp = newcard_;
  newcard_ = nullptr;
  return temp;
}
inline ::Proto::Card* ResCardStar::mutable_newcard() {
  
  if (newcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Card>(GetArenaNoVirtual());
    newcard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ResCardStar.newcard)
  return newcard_;
}
inline void ResCardStar::set_allocated_newcard(::Proto::Card* newcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newcard_);
  }
  if (newcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newcard, submessage_arena);
    }
    
  } else {
    
  }
  newcard_ = newcard;
  // @@protoc_insertion_point(field_set_allocated:Proto.ResCardStar.newcard)
}

// int32 detalfightpower = 3;
inline void ResCardStar::clear_detalfightpower() {
  detalfightpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCardStar::detalfightpower() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardStar.detalfightpower)
  return detalfightpower_;
}
inline void ResCardStar::set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detalfightpower_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardStar.detalfightpower)
}

// -------------------------------------------------------------------

// ResCardQlt

// .Proto.ResCardQlt.ResQltCode QLtResCode = 1;
inline void ResCardQlt::clear_qltrescode() {
  qltrescode_ = 0;
}
inline ::Proto::ResCardQlt_ResQltCode ResCardQlt::qltrescode() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardQlt.QLtResCode)
  return static_cast< ::Proto::ResCardQlt_ResQltCode >(qltrescode_);
}
inline void ResCardQlt::set_qltrescode(::Proto::ResCardQlt_ResQltCode value) {
  
  qltrescode_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardQlt.QLtResCode)
}

// .Proto.Card newcard = 2;
inline bool ResCardQlt::has_newcard() const {
  return this != internal_default_instance() && newcard_ != nullptr;
}
inline const ::Proto::Card& ResCardQlt::newcard() const {
  const ::Proto::Card* p = newcard_;
  // @@protoc_insertion_point(field_get:Proto.ResCardQlt.newcard)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Card*>(
      &::Proto::_Card_default_instance_);
}
inline ::Proto::Card* ResCardQlt::release_newcard() {
  // @@protoc_insertion_point(field_release:Proto.ResCardQlt.newcard)
  
  ::Proto::Card* temp = newcard_;
  newcard_ = nullptr;
  return temp;
}
inline ::Proto::Card* ResCardQlt::mutable_newcard() {
  
  if (newcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Card>(GetArenaNoVirtual());
    newcard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ResCardQlt.newcard)
  return newcard_;
}
inline void ResCardQlt::set_allocated_newcard(::Proto::Card* newcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newcard_);
  }
  if (newcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newcard, submessage_arena);
    }
    
  } else {
    
  }
  newcard_ = newcard;
  // @@protoc_insertion_point(field_set_allocated:Proto.ResCardQlt.newcard)
}

// int32 detalfightpower = 3;
inline void ResCardQlt::clear_detalfightpower() {
  detalfightpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCardQlt::detalfightpower() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardQlt.detalfightpower)
  return detalfightpower_;
}
inline void ResCardQlt::set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detalfightpower_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardQlt.detalfightpower)
}

// -------------------------------------------------------------------

// ResInten

// .Proto.ResInten.ResIntenCode MyIntenResCode = 1;
inline void ResInten::clear_myintenrescode() {
  myintenrescode_ = 0;
}
inline ::Proto::ResInten_ResIntenCode ResInten::myintenrescode() const {
  // @@protoc_insertion_point(field_get:Proto.ResInten.MyIntenResCode)
  return static_cast< ::Proto::ResInten_ResIntenCode >(myintenrescode_);
}
inline void ResInten::set_myintenrescode(::Proto::ResInten_ResIntenCode value) {
  
  myintenrescode_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResInten.MyIntenResCode)
}

// .Proto.Card newcard = 2;
inline bool ResInten::has_newcard() const {
  return this != internal_default_instance() && newcard_ != nullptr;
}
inline const ::Proto::Card& ResInten::newcard() const {
  const ::Proto::Card* p = newcard_;
  // @@protoc_insertion_point(field_get:Proto.ResInten.newcard)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Card*>(
      &::Proto::_Card_default_instance_);
}
inline ::Proto::Card* ResInten::release_newcard() {
  // @@protoc_insertion_point(field_release:Proto.ResInten.newcard)
  
  ::Proto::Card* temp = newcard_;
  newcard_ = nullptr;
  return temp;
}
inline ::Proto::Card* ResInten::mutable_newcard() {
  
  if (newcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Card>(GetArenaNoVirtual());
    newcard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ResInten.newcard)
  return newcard_;
}
inline void ResInten::set_allocated_newcard(::Proto::Card* newcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newcard_);
  }
  if (newcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newcard, submessage_arena);
    }
    
  } else {
    
  }
  newcard_ = newcard;
  // @@protoc_insertion_point(field_set_allocated:Proto.ResInten.newcard)
}

// int32 detalfightpower = 3;
inline void ResInten::clear_detalfightpower() {
  detalfightpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResInten::detalfightpower() const {
  // @@protoc_insertion_point(field_get:Proto.ResInten.detalfightpower)
  return detalfightpower_;
}
inline void ResInten::set_detalfightpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detalfightpower_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResInten.detalfightpower)
}

// -------------------------------------------------------------------

// ReuqestGMAddItem

// int32 id = 2;
inline void ReuqestGMAddItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReuqestGMAddItem::id() const {
  // @@protoc_insertion_point(field_get:Proto.ReuqestGMAddItem.id)
  return id_;
}
inline void ReuqestGMAddItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReuqestGMAddItem.id)
}

// int32 num = 3;
inline void ReuqestGMAddItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReuqestGMAddItem::num() const {
  // @@protoc_insertion_point(field_get:Proto.ReuqestGMAddItem.num)
  return num_;
}
inline void ReuqestGMAddItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReuqestGMAddItem.num)
}

// -------------------------------------------------------------------

// ItemChange

// uint64 sn = 1;
inline void ItemChange::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ItemChange::sn() const {
  // @@protoc_insertion_point(field_get:Proto.ItemChange.sn)
  return sn_;
}
inline void ItemChange::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemChange.sn)
}

// int32 id = 2;
inline void ItemChange::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemChange::id() const {
  // @@protoc_insertion_point(field_get:Proto.ItemChange.id)
  return id_;
}
inline void ItemChange::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemChange.id)
}

// int32 num = 3;
inline void ItemChange::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemChange::num() const {
  // @@protoc_insertion_point(field_get:Proto.ItemChange.num)
  return num_;
}
inline void ItemChange::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemChange.num)
}

// int32 delta = 4;
inline void ItemChange::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemChange::delta() const {
  // @@protoc_insertion_point(field_get:Proto.ItemChange.delta)
  return delta_;
}
inline void ItemChange::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemChange.delta)
}

// int32 bagIndex = 11;
inline void ItemChange::clear_bagindex() {
  bagindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemChange::bagindex() const {
  // @@protoc_insertion_point(field_get:Proto.ItemChange.bagIndex)
  return bagindex_;
}
inline void ItemChange::set_bagindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bagindex_ = value;
  // @@protoc_insertion_point(field_set:Proto.ItemChange.bagIndex)
}

// -------------------------------------------------------------------

// PushItemChange_ChangeShow

// int32 id = 1;
inline void PushItemChange_ChangeShow::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushItemChange_ChangeShow::id() const {
  // @@protoc_insertion_point(field_get:Proto.PushItemChange.ChangeShow.id)
  return id_;
}
inline void PushItemChange_ChangeShow::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.PushItemChange.ChangeShow.id)
}

// int32 delta = 2;
inline void PushItemChange_ChangeShow::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushItemChange_ChangeShow::delta() const {
  // @@protoc_insertion_point(field_get:Proto.PushItemChange.ChangeShow.delta)
  return delta_;
}
inline void PushItemChange_ChangeShow::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:Proto.PushItemChange.ChangeShow.delta)
}

// int32 replace = 3;
inline void PushItemChange_ChangeShow::clear_replace() {
  replace_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushItemChange_ChangeShow::replace() const {
  // @@protoc_insertion_point(field_get:Proto.PushItemChange.ChangeShow.replace)
  return replace_;
}
inline void PushItemChange_ChangeShow::set_replace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  replace_ = value;
  // @@protoc_insertion_point(field_set:Proto.PushItemChange.ChangeShow.replace)
}

// -------------------------------------------------------------------

// PushItemChange

// repeated .Proto.ItemChange changes = 1;
inline int PushItemChange::changes_size() const {
  return changes_.size();
}
inline void PushItemChange::clear_changes() {
  changes_.Clear();
}
inline ::Proto::ItemChange* PushItemChange::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PushItemChange.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemChange >*
PushItemChange::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PushItemChange.changes)
  return &changes_;
}
inline const ::Proto::ItemChange& PushItemChange::changes(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PushItemChange.changes)
  return changes_.Get(index);
}
inline ::Proto::ItemChange* PushItemChange::add_changes() {
  // @@protoc_insertion_point(field_add:Proto.PushItemChange.changes)
  return changes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::ItemChange >&
PushItemChange::changes() const {
  // @@protoc_insertion_point(field_list:Proto.PushItemChange.changes)
  return changes_;
}

// int32 source = 2;
inline void PushItemChange::clear_source() {
  source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PushItemChange::source() const {
  // @@protoc_insertion_point(field_get:Proto.PushItemChange.source)
  return source_;
}
inline void PushItemChange::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:Proto.PushItemChange.source)
}

// repeated .Proto.PushItemChange.ChangeShow show = 3;
inline int PushItemChange::show_size() const {
  return show_.size();
}
inline void PushItemChange::clear_show() {
  show_.Clear();
}
inline ::Proto::PushItemChange_ChangeShow* PushItemChange::mutable_show(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.PushItemChange.show)
  return show_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >*
PushItemChange::mutable_show() {
  // @@protoc_insertion_point(field_mutable_list:Proto.PushItemChange.show)
  return &show_;
}
inline const ::Proto::PushItemChange_ChangeShow& PushItemChange::show(int index) const {
  // @@protoc_insertion_point(field_get:Proto.PushItemChange.show)
  return show_.Get(index);
}
inline ::Proto::PushItemChange_ChangeShow* PushItemChange::add_show() {
  // @@protoc_insertion_point(field_add:Proto.PushItemChange.show)
  return show_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >&
PushItemChange::show() const {
  // @@protoc_insertion_point(field_list:Proto.PushItemChange.show)
  return show_;
}

// -------------------------------------------------------------------

// RequestUseItem

// int64 sn = 1;
inline void RequestUseItem::clear_sn() {
  sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestUseItem::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RequestUseItem.sn)
  return sn_;
}
inline void RequestUseItem::set_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestUseItem.sn)
}

// int32 num = 2;
inline void RequestUseItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestUseItem::num() const {
  // @@protoc_insertion_point(field_get:Proto.RequestUseItem.num)
  return num_;
}
inline void RequestUseItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestUseItem.num)
}

// -------------------------------------------------------------------

// ResponseUseItem

// -------------------------------------------------------------------

// RequestSortBag

// -------------------------------------------------------------------

// ResponseSortBag

// repeated uint64 bags = 1;
inline int ResponseSortBag::bags_size() const {
  return bags_.size();
}
inline void ResponseSortBag::clear_bags() {
  bags_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseSortBag::bags(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ResponseSortBag.bags)
  return bags_.Get(index);
}
inline void ResponseSortBag::set_bags(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bags_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto.ResponseSortBag.bags)
}
inline void ResponseSortBag::add_bags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bags_.Add(value);
  // @@protoc_insertion_point(field_add:Proto.ResponseSortBag.bags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ResponseSortBag::bags() const {
  // @@protoc_insertion_point(field_list:Proto.ResponseSortBag.bags)
  return bags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ResponseSortBag::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ResponseSortBag.bags)
  return &bags_;
}

// repeated .Proto.Item items = 2;
inline int ResponseSortBag::items_size() const {
  return items_.size();
}
inline ::Proto::Item* ResponseSortBag::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ResponseSortBag.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >*
ResponseSortBag::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ResponseSortBag.items)
  return &items_;
}
inline const ::Proto::Item& ResponseSortBag::items(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ResponseSortBag.items)
  return items_.Get(index);
}
inline ::Proto::Item* ResponseSortBag::add_items() {
  // @@protoc_insertion_point(field_add:Proto.ResponseSortBag.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Item >&
ResponseSortBag::items() const {
  // @@protoc_insertion_point(field_list:Proto.ResponseSortBag.items)
  return items_;
}

// -------------------------------------------------------------------

// RequestSellItem

// int64 sn = 1;
inline void RequestSellItem::clear_sn() {
  sn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestSellItem::sn() const {
  // @@protoc_insertion_point(field_get:Proto.RequestSellItem.sn)
  return sn_;
}
inline void RequestSellItem::set_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestSellItem.sn)
}

// int32 num = 2;
inline void RequestSellItem::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestSellItem::num() const {
  // @@protoc_insertion_point(field_get:Proto.RequestSellItem.num)
  return num_;
}
inline void RequestSellItem::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestSellItem.num)
}

// -------------------------------------------------------------------

// ResponseSellItem

// -------------------------------------------------------------------

// RequestGachaPull

// int32 poolId = 1;
inline void RequestGachaPull::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGachaPull::poolid() const {
  // @@protoc_insertion_point(field_get:Proto.RequestGachaPull.poolId)
  return poolid_;
}
inline void RequestGachaPull::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestGachaPull.poolId)
}

// bool single = 2;
inline void RequestGachaPull::clear_single() {
  single_ = false;
}
inline bool RequestGachaPull::single() const {
  // @@protoc_insertion_point(field_get:Proto.RequestGachaPull.single)
  return single_;
}
inline void RequestGachaPull::set_single(bool value) {
  
  single_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestGachaPull.single)
}

// uint32 costType = 3;
inline void RequestGachaPull::clear_costtype() {
  costtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestGachaPull::costtype() const {
  // @@protoc_insertion_point(field_get:Proto.RequestGachaPull.costType)
  return costtype_;
}
inline void RequestGachaPull::set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  costtype_ = value;
  // @@protoc_insertion_point(field_set:Proto.RequestGachaPull.costType)
}

// -------------------------------------------------------------------

// ResponseGachaPull

// repeated .Proto.PushItemChange.ChangeShow items = 1;
inline int ResponseGachaPull::items_size() const {
  return items_.size();
}
inline void ResponseGachaPull::clear_items() {
  items_.Clear();
}
inline ::Proto::PushItemChange_ChangeShow* ResponseGachaPull::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.ResponseGachaPull.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >*
ResponseGachaPull::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Proto.ResponseGachaPull.items)
  return &items_;
}
inline const ::Proto::PushItemChange_ChangeShow& ResponseGachaPull::items(int index) const {
  // @@protoc_insertion_point(field_get:Proto.ResponseGachaPull.items)
  return items_.Get(index);
}
inline ::Proto::PushItemChange_ChangeShow* ResponseGachaPull::add_items() {
  // @@protoc_insertion_point(field_add:Proto.ResponseGachaPull.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::PushItemChange_ChangeShow >&
ResponseGachaPull::items() const {
  // @@protoc_insertion_point(field_list:Proto.ResponseGachaPull.items)
  return items_;
}

// int32 poolId = 2;
inline void ResponseGachaPull::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseGachaPull::poolid() const {
  // @@protoc_insertion_point(field_get:Proto.ResponseGachaPull.poolId)
  return poolid_;
}
inline void ResponseGachaPull::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResponseGachaPull.poolId)
}

// int32 count = 3;
inline void ResponseGachaPull::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseGachaPull::count() const {
  // @@protoc_insertion_point(field_get:Proto.ResponseGachaPull.count)
  return count_;
}
inline void ResponseGachaPull::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResponseGachaPull.count)
}

// -------------------------------------------------------------------

// DBQueryPlayer

// int32 server_id = 1;
inline void DBQueryPlayer::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBQueryPlayer::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryPlayer.server_id)
  return server_id_;
}
inline void DBQueryPlayer::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBQueryPlayer.server_id)
}

// string channel = 2;
inline void DBQueryPlayer::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DBQueryPlayer::channel() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryPlayer.channel)
  return channel_.GetNoArena();
}
inline void DBQueryPlayer::set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.DBQueryPlayer.channel)
}
inline void DBQueryPlayer::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.DBQueryPlayer.channel)
}
inline void DBQueryPlayer::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.DBQueryPlayer.channel)
}
inline void DBQueryPlayer::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.DBQueryPlayer.channel)
}
inline std::string* DBQueryPlayer::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Proto.DBQueryPlayer.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DBQueryPlayer::release_channel() {
  // @@protoc_insertion_point(field_release:Proto.DBQueryPlayer.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DBQueryPlayer::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Proto.DBQueryPlayer.channel)
}

// string uuid = 3;
inline void DBQueryPlayer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DBQueryPlayer::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryPlayer.uuid)
  return uuid_.GetNoArena();
}
inline void DBQueryPlayer::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.DBQueryPlayer.uuid)
}
inline void DBQueryPlayer::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.DBQueryPlayer.uuid)
}
inline void DBQueryPlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.DBQueryPlayer.uuid)
}
inline void DBQueryPlayer::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.DBQueryPlayer.uuid)
}
inline std::string* DBQueryPlayer::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Proto.DBQueryPlayer.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DBQueryPlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.DBQueryPlayer.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DBQueryPlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Proto.DBQueryPlayer.uuid)
}

// -------------------------------------------------------------------

// DBQueryPlayerRet

// int32 ret = 1;
inline void DBQueryPlayerRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBQueryPlayerRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryPlayerRet.ret)
  return ret_;
}
inline void DBQueryPlayerRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBQueryPlayerRet.ret)
}

// .Proto.Player player = 2;
inline bool DBQueryPlayerRet::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& DBQueryPlayerRet::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.DBQueryPlayerRet.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* DBQueryPlayerRet::release_player() {
  // @@protoc_insertion_point(field_release:Proto.DBQueryPlayerRet.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* DBQueryPlayerRet::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.DBQueryPlayerRet.player)
  return player_;
}
inline void DBQueryPlayerRet::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.DBQueryPlayerRet.player)
}

// -------------------------------------------------------------------

// DBCreatePlayer

// int32 server_id = 1;
inline void DBCreatePlayer::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBCreatePlayer::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.DBCreatePlayer.server_id)
  return server_id_;
}
inline void DBCreatePlayer::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBCreatePlayer.server_id)
}

// string channel = 2;
inline void DBCreatePlayer::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DBCreatePlayer::channel() const {
  // @@protoc_insertion_point(field_get:Proto.DBCreatePlayer.channel)
  return channel_.GetNoArena();
}
inline void DBCreatePlayer::set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.DBCreatePlayer.channel)
}
inline void DBCreatePlayer::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.DBCreatePlayer.channel)
}
inline void DBCreatePlayer::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.DBCreatePlayer.channel)
}
inline void DBCreatePlayer::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.DBCreatePlayer.channel)
}
inline std::string* DBCreatePlayer::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:Proto.DBCreatePlayer.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DBCreatePlayer::release_channel() {
  // @@protoc_insertion_point(field_release:Proto.DBCreatePlayer.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DBCreatePlayer::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:Proto.DBCreatePlayer.channel)
}

// string uuid = 3;
inline void DBCreatePlayer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DBCreatePlayer::uuid() const {
  // @@protoc_insertion_point(field_get:Proto.DBCreatePlayer.uuid)
  return uuid_.GetNoArena();
}
inline void DBCreatePlayer::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.DBCreatePlayer.uuid)
}
inline void DBCreatePlayer::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.DBCreatePlayer.uuid)
}
inline void DBCreatePlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.DBCreatePlayer.uuid)
}
inline void DBCreatePlayer::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.DBCreatePlayer.uuid)
}
inline std::string* DBCreatePlayer::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Proto.DBCreatePlayer.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DBCreatePlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:Proto.DBCreatePlayer.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DBCreatePlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Proto.DBCreatePlayer.uuid)
}

// .Proto.Player player = 4;
inline bool DBCreatePlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& DBCreatePlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.DBCreatePlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* DBCreatePlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.DBCreatePlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* DBCreatePlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.DBCreatePlayer.player)
  return player_;
}
inline void DBCreatePlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.DBCreatePlayer.player)
}

// -------------------------------------------------------------------

// DBCreatePlayerRet

// int32 ret = 1;
inline void DBCreatePlayerRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBCreatePlayerRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DBCreatePlayerRet.ret)
  return ret_;
}
inline void DBCreatePlayerRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBCreatePlayerRet.ret)
}

// .Proto.Player player = 2;
inline bool DBCreatePlayerRet::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& DBCreatePlayerRet::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.DBCreatePlayerRet.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* DBCreatePlayerRet::release_player() {
  // @@protoc_insertion_point(field_release:Proto.DBCreatePlayerRet.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* DBCreatePlayerRet::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.DBCreatePlayerRet.player)
  return player_;
}
inline void DBCreatePlayerRet::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.DBCreatePlayerRet.player)
}

// -------------------------------------------------------------------

// DBSavePlayer

// .Proto.ESaveMode save_mode = 1;
inline void DBSavePlayer::clear_save_mode() {
  save_mode_ = 0;
}
inline ::Proto::ESaveMode DBSavePlayer::save_mode() const {
  // @@protoc_insertion_point(field_get:Proto.DBSavePlayer.save_mode)
  return static_cast< ::Proto::ESaveMode >(save_mode_);
}
inline void DBSavePlayer::set_save_mode(::Proto::ESaveMode value) {
  
  save_mode_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBSavePlayer.save_mode)
}

// .Proto.Player player = 2;
inline bool DBSavePlayer::has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline const ::Proto::Player& DBSavePlayer::player() const {
  const ::Proto::Player* p = player_;
  // @@protoc_insertion_point(field_get:Proto.DBSavePlayer.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Player*>(
      &::Proto::_Player_default_instance_);
}
inline ::Proto::Player* DBSavePlayer::release_player() {
  // @@protoc_insertion_point(field_release:Proto.DBSavePlayer.player)
  
  ::Proto::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Proto::Player* DBSavePlayer::mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.DBSavePlayer.player)
  return player_;
}
inline void DBSavePlayer::set_allocated_player(::Proto::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Proto.DBSavePlayer.player)
}

// -------------------------------------------------------------------

// DBSavePlayerRet

// int32 ret = 1;
inline void DBSavePlayerRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBSavePlayerRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DBSavePlayerRet.ret)
  return ret_;
}
inline void DBSavePlayerRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBSavePlayerRet.ret)
}

// -------------------------------------------------------------------

// DBSaveList

// -------------------------------------------------------------------

// DBSaveListRet

// int32 ret = 1;
inline void DBSaveListRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBSaveListRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DBSaveListRet.ret)
  return ret_;
}
inline void DBSaveListRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBSaveListRet.ret)
}

// repeated .Proto.Player player_list = 2;
inline int DBSaveListRet::player_list_size() const {
  return player_list_.size();
}
inline ::Proto::Player* DBSaveListRet::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.DBSaveListRet.player_list)
  return player_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >*
DBSaveListRet::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:Proto.DBSaveListRet.player_list)
  return &player_list_;
}
inline const ::Proto::Player& DBSaveListRet::player_list(int index) const {
  // @@protoc_insertion_point(field_get:Proto.DBSaveListRet.player_list)
  return player_list_.Get(index);
}
inline ::Proto::Player* DBSaveListRet::add_player_list() {
  // @@protoc_insertion_point(field_add:Proto.DBSaveListRet.player_list)
  return player_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Player >&
DBSaveListRet::player_list() const {
  // @@protoc_insertion_point(field_list:Proto.DBSaveListRet.player_list)
  return player_list_;
}

// -------------------------------------------------------------------

// DBSaveWorld

// .Proto.DBWorldData data = 1;
inline bool DBSaveWorld::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::Proto::DBWorldData& DBSaveWorld::data() const {
  const ::Proto::DBWorldData* p = data_;
  // @@protoc_insertion_point(field_get:Proto.DBSaveWorld.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::DBWorldData*>(
      &::Proto::_DBWorldData_default_instance_);
}
inline ::Proto::DBWorldData* DBSaveWorld::release_data() {
  // @@protoc_insertion_point(field_release:Proto.DBSaveWorld.data)
  
  ::Proto::DBWorldData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Proto::DBWorldData* DBSaveWorld::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DBWorldData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.DBSaveWorld.data)
  return data_;
}
inline void DBSaveWorld::set_allocated_data(::Proto::DBWorldData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Proto.DBSaveWorld.data)
}

// -------------------------------------------------------------------

// DBSaveWorldRet

// int32 ret = 1;
inline void DBSaveWorldRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBSaveWorldRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DBSaveWorldRet.ret)
  return ret_;
}
inline void DBSaveWorldRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBSaveWorldRet.ret)
}

// -------------------------------------------------------------------

// DBQueryWorld

// int32 server_id = 1;
inline void DBQueryWorld::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBQueryWorld::server_id() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryWorld.server_id)
  return server_id_;
}
inline void DBQueryWorld::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBQueryWorld.server_id)
}

// int32 world_id = 2;
inline void DBQueryWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBQueryWorld::world_id() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryWorld.world_id)
  return world_id_;
}
inline void DBQueryWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBQueryWorld.world_id)
}

// -------------------------------------------------------------------

// DBQueryWorldRet

// int32 ret = 1;
inline void DBQueryWorldRet::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBQueryWorldRet::ret() const {
  // @@protoc_insertion_point(field_get:Proto.DBQueryWorldRet.ret)
  return ret_;
}
inline void DBQueryWorldRet::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:Proto.DBQueryWorldRet.ret)
}

// .Proto.DBWorldData data = 2;
inline bool DBQueryWorldRet::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline const ::Proto::DBWorldData& DBQueryWorldRet::data() const {
  const ::Proto::DBWorldData* p = data_;
  // @@protoc_insertion_point(field_get:Proto.DBQueryWorldRet.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::DBWorldData*>(
      &::Proto::_DBWorldData_default_instance_);
}
inline ::Proto::DBWorldData* DBQueryWorldRet::release_data() {
  // @@protoc_insertion_point(field_release:Proto.DBQueryWorldRet.data)
  
  ::Proto::DBWorldData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Proto::DBWorldData* DBQueryWorldRet::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::DBWorldData>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.DBQueryWorldRet.data)
  return data_;
}
inline void DBQueryWorldRet::set_allocated_data(::Proto::DBWorldData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Proto.DBQueryWorldRet.data)
}

// -------------------------------------------------------------------

// BattleDamage

// int32 pos = 1;
inline void BattleDamage::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleDamage::pos() const {
  // @@protoc_insertion_point(field_get:Proto.BattleDamage.pos)
  return pos_;
}
inline void BattleDamage::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleDamage.pos)
}

// int32 damage = 2;
inline void BattleDamage::clear_damage() {
  damage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleDamage::damage() const {
  // @@protoc_insertion_point(field_get:Proto.BattleDamage.damage)
  return damage_;
}
inline void BattleDamage::set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleDamage.damage)
}

// -------------------------------------------------------------------

// BattleAction

// uint64 owner_sn = 1;
inline void BattleAction::clear_owner_sn() {
  owner_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleAction::owner_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BattleAction.owner_sn)
  return owner_sn_;
}
inline void BattleAction::set_owner_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  owner_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleAction.owner_sn)
}

// int32 pos = 2;
inline void BattleAction::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleAction::pos() const {
  // @@protoc_insertion_point(field_get:Proto.BattleAction.pos)
  return pos_;
}
inline void BattleAction::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleAction.pos)
}

// int32 skill_id = 3;
inline void BattleAction::clear_skill_id() {
  skill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleAction::skill_id() const {
  // @@protoc_insertion_point(field_get:Proto.BattleAction.skill_id)
  return skill_id_;
}
inline void BattleAction::set_skill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleAction.skill_id)
}

// .Proto.BattleActionType action_type = 4;
inline void BattleAction::clear_action_type() {
  action_type_ = 0;
}
inline ::Proto::BattleActionType BattleAction::action_type() const {
  // @@protoc_insertion_point(field_get:Proto.BattleAction.action_type)
  return static_cast< ::Proto::BattleActionType >(action_type_);
}
inline void BattleAction::set_action_type(::Proto::BattleActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleAction.action_type)
}

// repeated .Proto.BattleDamage damage = 5;
inline int BattleAction::damage_size() const {
  return damage_.size();
}
inline void BattleAction::clear_damage() {
  damage_.Clear();
}
inline ::Proto::BattleDamage* BattleAction::mutable_damage(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.BattleAction.damage)
  return damage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleDamage >*
BattleAction::mutable_damage() {
  // @@protoc_insertion_point(field_mutable_list:Proto.BattleAction.damage)
  return &damage_;
}
inline const ::Proto::BattleDamage& BattleAction::damage(int index) const {
  // @@protoc_insertion_point(field_get:Proto.BattleAction.damage)
  return damage_.Get(index);
}
inline ::Proto::BattleDamage* BattleAction::add_damage() {
  // @@protoc_insertion_point(field_add:Proto.BattleAction.damage)
  return damage_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleDamage >&
BattleAction::damage() const {
  // @@protoc_insertion_point(field_list:Proto.BattleAction.damage)
  return damage_;
}

// -------------------------------------------------------------------

// BattleActionList

// repeated .Proto.BattleAction actions = 1;
inline int BattleActionList::actions_size() const {
  return actions_.size();
}
inline void BattleActionList::clear_actions() {
  actions_.Clear();
}
inline ::Proto::BattleAction* BattleActionList::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.BattleActionList.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleAction >*
BattleActionList::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:Proto.BattleActionList.actions)
  return &actions_;
}
inline const ::Proto::BattleAction& BattleActionList::actions(int index) const {
  // @@protoc_insertion_point(field_get:Proto.BattleActionList.actions)
  return actions_.Get(index);
}
inline ::Proto::BattleAction* BattleActionList::add_actions() {
  // @@protoc_insertion_point(field_add:Proto.BattleActionList.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleAction >&
BattleActionList::actions() const {
  // @@protoc_insertion_point(field_list:Proto.BattleActionList.actions)
  return actions_;
}

// -------------------------------------------------------------------

// BattleJoin

// uint64 player_sn = 1;
inline void BattleJoin::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleJoin::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BattleJoin.player_sn)
  return player_sn_;
}
inline void BattleJoin::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleJoin.player_sn)
}

// -------------------------------------------------------------------

// BattleCreate

// int32 monster_team_id = 1;
inline void BattleCreate::clear_monster_team_id() {
  monster_team_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleCreate::monster_team_id() const {
  // @@protoc_insertion_point(field_get:Proto.BattleCreate.monster_team_id)
  return monster_team_id_;
}
inline void BattleCreate::set_monster_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monster_team_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleCreate.monster_team_id)
}

// -------------------------------------------------------------------

// BattleView

// uint64 player_sn = 1;
inline void BattleView::clear_player_sn() {
  player_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleView::player_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BattleView.player_sn)
  return player_sn_;
}
inline void BattleView::set_player_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  player_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleView.player_sn)
}

// -------------------------------------------------------------------

// BattleRs

// .Proto.RsCode return_code = 1;
inline void BattleRs::clear_return_code() {
  return_code_ = 0;
}
inline ::Proto::RsCode BattleRs::return_code() const {
  // @@protoc_insertion_point(field_get:Proto.BattleRs.return_code)
  return static_cast< ::Proto::RsCode >(return_code_);
}
inline void BattleRs::set_return_code(::Proto::RsCode value) {
  
  return_code_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleRs.return_code)
}

// -------------------------------------------------------------------

// BattleTeam

// uint64 owner_sn = 1;
inline void BattleTeam::clear_owner_sn() {
  owner_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleTeam::owner_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BattleTeam.owner_sn)
  return owner_sn_;
}
inline void BattleTeam::set_owner_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  owner_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleTeam.owner_sn)
}

// int32 pos = 2;
inline void BattleTeam::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleTeam::pos() const {
  // @@protoc_insertion_point(field_get:Proto.BattleTeam.pos)
  return pos_;
}
inline void BattleTeam::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleTeam.pos)
}

// .Proto.Card card = 3;
inline bool BattleTeam::has_card() const {
  return this != internal_default_instance() && card_ != nullptr;
}
inline const ::Proto::Card& BattleTeam::card() const {
  const ::Proto::Card* p = card_;
  // @@protoc_insertion_point(field_get:Proto.BattleTeam.card)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Card*>(
      &::Proto::_Card_default_instance_);
}
inline ::Proto::Card* BattleTeam::release_card() {
  // @@protoc_insertion_point(field_release:Proto.BattleTeam.card)
  
  ::Proto::Card* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::Proto::Card* BattleTeam::mutable_card() {
  
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Card>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.BattleTeam.card)
  return card_;
}
inline void BattleTeam::set_allocated_card(::Proto::Card* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:Proto.BattleTeam.card)
}

// -------------------------------------------------------------------

// BattleSyncTeam

// repeated .Proto.BattleTeam team = 2;
inline int BattleSyncTeam::team_size() const {
  return team_.size();
}
inline void BattleSyncTeam::clear_team() {
  team_.Clear();
}
inline ::Proto::BattleTeam* BattleSyncTeam::mutable_team(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.BattleSyncTeam.team)
  return team_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleTeam >*
BattleSyncTeam::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:Proto.BattleSyncTeam.team)
  return &team_;
}
inline const ::Proto::BattleTeam& BattleSyncTeam::team(int index) const {
  // @@protoc_insertion_point(field_get:Proto.BattleSyncTeam.team)
  return team_.Get(index);
}
inline ::Proto::BattleTeam* BattleSyncTeam::add_team() {
  // @@protoc_insertion_point(field_add:Proto.BattleSyncTeam.team)
  return team_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::BattleTeam >&
BattleSyncTeam::team() const {
  // @@protoc_insertion_point(field_list:Proto.BattleSyncTeam.team)
  return team_;
}

// -------------------------------------------------------------------

// BattleBegin

// uint64 owner_sn = 1;
inline void BattleBegin::clear_owner_sn() {
  owner_sn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleBegin::owner_sn() const {
  // @@protoc_insertion_point(field_get:Proto.BattleBegin.owner_sn)
  return owner_sn_;
}
inline void BattleBegin::set_owner_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  owner_sn_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleBegin.owner_sn)
}

// int32 monster_team_id = 2;
inline void BattleBegin::clear_monster_team_id() {
  monster_team_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleBegin::monster_team_id() const {
  // @@protoc_insertion_point(field_get:Proto.BattleBegin.monster_team_id)
  return monster_team_id_;
}
inline void BattleBegin::set_monster_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monster_team_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.BattleBegin.monster_team_id)
}

// -------------------------------------------------------------------

// BattleEnd

// -------------------------------------------------------------------

// ReqeustSkillLvUp

// int32 id = 1;
inline void ReqeustSkillLvUp::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqeustSkillLvUp::id() const {
  // @@protoc_insertion_point(field_get:Proto.ReqeustSkillLvUp.id)
  return id_;
}
inline void ReqeustSkillLvUp::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqeustSkillLvUp.id)
}

// -------------------------------------------------------------------

// ResponseSkillLvUp

// int32 id = 1;
inline void ResponseSkillLvUp::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseSkillLvUp::id() const {
  // @@protoc_insertion_point(field_get:Proto.ResponseSkillLvUp.id)
  return id_;
}
inline void ResponseSkillLvUp::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResponseSkillLvUp.id)
}

// int32 level = 2;
inline void ResponseSkillLvUp::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseSkillLvUp::level() const {
  // @@protoc_insertion_point(field_get:Proto.ResponseSkillLvUp.level)
  return level_;
}
inline void ResponseSkillLvUp::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResponseSkillLvUp.level)
}

// -------------------------------------------------------------------

// ReqeustEquipmentLvUp

// int32 id = 1;
inline void ReqeustEquipmentLvUp::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqeustEquipmentLvUp::id() const {
  // @@protoc_insertion_point(field_get:Proto.ReqeustEquipmentLvUp.id)
  return id_;
}
inline void ReqeustEquipmentLvUp::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqeustEquipmentLvUp.id)
}

// -------------------------------------------------------------------

// ResponseEquipmentLvUp

// int32 id = 1;
inline void ResponseEquipmentLvUp::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEquipmentLvUp::id() const {
  // @@protoc_insertion_point(field_get:Proto.ResponseEquipmentLvUp.id)
  return id_;
}
inline void ResponseEquipmentLvUp::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResponseEquipmentLvUp.id)
}

// int32 level = 2;
inline void ResponseEquipmentLvUp::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEquipmentLvUp::level() const {
  // @@protoc_insertion_point(field_get:Proto.ResponseEquipmentLvUp.level)
  return level_;
}
inline void ResponseEquipmentLvUp::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResponseEquipmentLvUp.level)
}

// -------------------------------------------------------------------

// ReqCardSkillLvUp

// int32 cardID = 1;
inline void ReqCardSkillLvUp::clear_cardid() {
  cardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCardSkillLvUp::cardid() const {
  // @@protoc_insertion_point(field_get:Proto.ReqCardSkillLvUp.cardID)
  return cardid_;
}
inline void ReqCardSkillLvUp::set_cardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardid_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReqCardSkillLvUp.cardID)
}

// .Proto.ReqeustSkillLvUp requestSkill = 2;
inline bool ReqCardSkillLvUp::has_requestskill() const {
  return this != internal_default_instance() && requestskill_ != nullptr;
}
inline void ReqCardSkillLvUp::clear_requestskill() {
  if (GetArenaNoVirtual() == nullptr && requestskill_ != nullptr) {
    delete requestskill_;
  }
  requestskill_ = nullptr;
}
inline const ::Proto::ReqeustSkillLvUp& ReqCardSkillLvUp::requestskill() const {
  const ::Proto::ReqeustSkillLvUp* p = requestskill_;
  // @@protoc_insertion_point(field_get:Proto.ReqCardSkillLvUp.requestSkill)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::ReqeustSkillLvUp*>(
      &::Proto::_ReqeustSkillLvUp_default_instance_);
}
inline ::Proto::ReqeustSkillLvUp* ReqCardSkillLvUp::release_requestskill() {
  // @@protoc_insertion_point(field_release:Proto.ReqCardSkillLvUp.requestSkill)
  
  ::Proto::ReqeustSkillLvUp* temp = requestskill_;
  requestskill_ = nullptr;
  return temp;
}
inline ::Proto::ReqeustSkillLvUp* ReqCardSkillLvUp::mutable_requestskill() {
  
  if (requestskill_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ReqeustSkillLvUp>(GetArenaNoVirtual());
    requestskill_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ReqCardSkillLvUp.requestSkill)
  return requestskill_;
}
inline void ReqCardSkillLvUp::set_allocated_requestskill(::Proto::ReqeustSkillLvUp* requestskill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requestskill_;
  }
  if (requestskill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requestskill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestskill, submessage_arena);
    }
    
  } else {
    
  }
  requestskill_ = requestskill;
  // @@protoc_insertion_point(field_set_allocated:Proto.ReqCardSkillLvUp.requestSkill)
}

// -------------------------------------------------------------------

// ResCardSkillLvUp

// int32 rescode = 1;
inline void ResCardSkillLvUp::clear_rescode() {
  rescode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCardSkillLvUp::rescode() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardSkillLvUp.rescode)
  return rescode_;
}
inline void ResCardSkillLvUp::set_rescode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rescode_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardSkillLvUp.rescode)
}

// int32 rescardID = 2;
inline void ResCardSkillLvUp::clear_rescardid() {
  rescardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResCardSkillLvUp::rescardid() const {
  // @@protoc_insertion_point(field_get:Proto.ResCardSkillLvUp.rescardID)
  return rescardid_;
}
inline void ResCardSkillLvUp::set_rescardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rescardid_ = value;
  // @@protoc_insertion_point(field_set:Proto.ResCardSkillLvUp.rescardID)
}

// .Proto.ResponseSkillLvUp resSkillLvUp = 3;
inline bool ResCardSkillLvUp::has_resskilllvup() const {
  return this != internal_default_instance() && resskilllvup_ != nullptr;
}
inline void ResCardSkillLvUp::clear_resskilllvup() {
  if (GetArenaNoVirtual() == nullptr && resskilllvup_ != nullptr) {
    delete resskilllvup_;
  }
  resskilllvup_ = nullptr;
}
inline const ::Proto::ResponseSkillLvUp& ResCardSkillLvUp::resskilllvup() const {
  const ::Proto::ResponseSkillLvUp* p = resskilllvup_;
  // @@protoc_insertion_point(field_get:Proto.ResCardSkillLvUp.resSkillLvUp)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::ResponseSkillLvUp*>(
      &::Proto::_ResponseSkillLvUp_default_instance_);
}
inline ::Proto::ResponseSkillLvUp* ResCardSkillLvUp::release_resskilllvup() {
  // @@protoc_insertion_point(field_release:Proto.ResCardSkillLvUp.resSkillLvUp)
  
  ::Proto::ResponseSkillLvUp* temp = resskilllvup_;
  resskilllvup_ = nullptr;
  return temp;
}
inline ::Proto::ResponseSkillLvUp* ResCardSkillLvUp::mutable_resskilllvup() {
  
  if (resskilllvup_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::ResponseSkillLvUp>(GetArenaNoVirtual());
    resskilllvup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ResCardSkillLvUp.resSkillLvUp)
  return resskilllvup_;
}
inline void ResCardSkillLvUp::set_allocated_resskilllvup(::Proto::ResponseSkillLvUp* resskilllvup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resskilllvup_;
  }
  if (resskilllvup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resskilllvup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resskilllvup, submessage_arena);
    }
    
  } else {
    
  }
  resskilllvup_ = resskilllvup;
  // @@protoc_insertion_point(field_set_allocated:Proto.ResCardSkillLvUp.resSkillLvUp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::CmdThread_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CmdThread_CmdType>() {
  return ::Proto::CmdThread_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Proto::CmdApp_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CmdApp_CmdType>() {
  return ::Proto::CmdApp_CmdType_descriptor();
}
template <> struct is_proto_enum< ::Proto::CreateComponentParam_ParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreateComponentParam_ParamType>() {
  return ::Proto::CreateComponentParam_ParamType_descriptor();
}
template <> struct is_proto_enum< ::Proto::SelectPlayerRs_SelectPlayerReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::SelectPlayerRs_SelectPlayerReturnCode>() {
  return ::Proto::SelectPlayerRs_SelectPlayerReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::GameToken_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::GameToken_ReturnCode>() {
  return ::Proto::GameToken_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginByTokenRs_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginByTokenRs_ReturnCode>() {
  return ::Proto::LoginByTokenRs_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::QueryDungeonBySnRs_ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::QueryDungeonBySnRs_ReturnCode>() {
  return ::Proto::QueryDungeonBySnRs_ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::SyncPlayerProperty_PlayerPropertyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::SyncPlayerProperty_PlayerPropertyType>() {
  return ::Proto::SyncPlayerProperty_PlayerPropertyType_descriptor();
}
template <> struct is_proto_enum< ::Proto::ResCardLevel_ResCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ResCardLevel_ResCode>() {
  return ::Proto::ResCardLevel_ResCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::ResCardStar_StarResCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ResCardStar_StarResCode>() {
  return ::Proto::ResCardStar_StarResCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::ResCardQlt_ResQltCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ResCardQlt_ResQltCode>() {
  return ::Proto::ResCardQlt_ResQltCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::ResInten_ResIntenCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ResInten_ResIntenCode>() {
  return ::Proto::ResInten_ResIntenCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::RsCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::RsCode>() {
  return ::Proto::RsCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::AccountCheckReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::AccountCheckReturnCode>() {
  return ::Proto::AccountCheckReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginHttpReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginHttpReturnCode>() {
  return ::Proto::LoginHttpReturnCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::LoginRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::LoginRetCode>() {
  return ::Proto::LoginRetCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::CreateRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreateRetCode>() {
  return ::Proto::CreateRetCode_descriptor();
}
template <> struct is_proto_enum< ::Proto::eChatChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::eChatChannel>() {
  return ::Proto::eChatChannel_descriptor();
}
template <> struct is_proto_enum< ::Proto::ESaveMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::ESaveMode>() {
  return ::Proto::ESaveMode_descriptor();
}
template <> struct is_proto_enum< ::Proto::BattleActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::BattleActionType>() {
  return ::Proto::BattleActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
